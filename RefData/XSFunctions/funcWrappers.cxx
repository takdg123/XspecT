//C++
//
// Generated by cxsetup.  Do not edit manually.

#include <funcWrappers.h>
#include <functionMap.h>
#include <xsTypes.h>
#include <XSModelFunction.h>
#include <cfortran.h>

void cppModelWrapper(const double* energy, int nFlux, const double* params, 
        int spectrumNumber, double* flux, double* fluxError, const char* initStr, 
        int nPar, void (*cppFunc)(const RealArray&, const RealArray&,
        int, RealArray&, RealArray&, const string&));

void fcppModelWrapper(const float* energy, int nFlux, const float* params, 
        int spectrumNumber, float* flux, float* fluxError,  
        int nPar, void (*cppFunc)(const RealArray&, const RealArray&,
	int, RealArray&, RealArray&, const string&));

void fModelWrapper(const double* energy, int nFlux, const double* params, 
        int nPar, int spectrumNumber, double* flux, double* fluxError,
        xsf77Call fFunc);
                 
void cModelWrapper(const float* energy, int nFlux, const float* params, 
        int spectrumNumber, float* flux, float* fluxError,  int nPar,
        xsccCall cFunc);

void cppModelWrapper(const double* energy, int nFlux, const double* params, 
        int spectrumNumber, double* flux, double* fluxError, const char* initStr, 
        int nPar, void (*cppFunc)(const RealArray&, const RealArray&,
        int, RealArray&, RealArray&, const string&))
{
   // Assumes energy points to arrays of size nFlux+1, flux and fluxError
   // point to arrays of size nFlux (though they need not be initialized),
   // and params points to an array of size nPar.
   RealArray energy_C(energy, (size_t)nFlux+1);
   RealArray params_C(params, nPar);
   RealArray flux_C(flux, (size_t)nFlux);
   RealArray fluxError_C(fluxError, (size_t)nFlux);
   string cppStr;
   if(initStr && strlen(initStr))
      cppStr = initStr;
   (*cppFunc)(energy_C, params_C, spectrumNumber, flux_C, fluxError_C, cppStr);
   for (int i=0; i<nFlux; ++i)
   {
      flux[i] = flux_C[i];
   }
   if (fluxError_C.size())
   {
      for (int i=0; i<nFlux; ++i)
      {
         fluxError[i] = fluxError_C[i];
      }
   }
} 

void fcppModelWrapper(const float* energy, int nFlux, const float* params, 
        int spectrumNumber, float* flux, float* fluxError, 
        int nPar, void (*cppFunc)(const RealArray&, const RealArray&,
        int, RealArray&, RealArray&, const string&))
{
   // Assumes energy points to arrays of size nFlux+1, flux and fluxError
   // point to arrays of size nFlux (though they need not be initialized),
   // and params points to an array of size nPar.
   RealArray energy_C(0.0, (size_t)nFlux+1);
   RealArray params_C(0.0, nPar);
   RealArray flux_C(0.0, (size_t)nFlux);
   RealArray fluxError_C(0.0, (size_t)nFlux);
   string cppStr;

   for (int i=0; i<nFlux+1; ++i)
   {
      energy_C[i] = (double)energy[i];
   }
   for (int i=0; i<nPar; ++i)
   {
      params_C[i] = (double)params[i];
   }
   for (int i=0; i<nFlux; ++i)
   {
      flux_C[i] = (double)flux[i];
   }
   if (fluxError)
   {
      for (int i=0; i<nFlux; ++i)
      {
         fluxError_C[i] = (double)fluxError[i];
      }
   }


   (*cppFunc)(energy_C, params_C, spectrumNumber, flux_C, fluxError_C, cppStr);

   for (int i=0; i<nFlux; ++i)
   {
      flux[i] = (float)flux_C[i];
   }
   if (fluxError_C.size())
   {
      for (int i=0; i<nFlux; ++i)
      {
         fluxError[i] = (float)fluxError_C[i];
      }
   }
} 

void fModelWrapper(const double* energy, int nFlux, const double* params, 
        int nPar, int spectrumNumber, double* flux, double* fluxError,
        xsf77Call fFunc)
{
   // Passing from C to a single precision Fortran function.
   float* fEng = new float[nFlux+1];
   float* fFlux = new float[nFlux];
   float* fFluxErr = new float[nFlux];
   float* fPars = new float[nPar];
   for (int i=0; i<nFlux; ++i)
   {
      fEng[i] = static_cast<float>(energy[i]);
      fFlux[i] = static_cast<float>(flux[i]);
   }
   fEng[nFlux] = static_cast<float>(energy[nFlux]);
   if (fluxError)
      for (int i=0; i<nFlux; ++i)
         fFluxErr[i] = static_cast<float>(fluxError[i]);
   else
      for (int i=0; i<nFlux; ++i)
         fFluxErr[i] = 0.0;
   for (int i=0; i<nPar; ++i)
      fPars[i] = static_cast<float>(params[i]);
      
   (*fFunc)(fEng, nFlux, fPars, spectrumNumber, fFlux, fFluxErr);
   
   for (int i=0; i<nFlux; ++i)
      flux[i] = static_cast<double>(fFlux[i]);
   if (fluxError)
      for (int i=0; i<nFlux; ++i)
         fluxError[i] = static_cast<double>(fFluxErr[i]);
   
   delete [] fEng;
   delete [] fFlux;
   delete [] fFluxErr;
   delete [] fPars;   
   
}
                 
void cModelWrapper(const float* energy, int nFlux, const float* params, 
        int spectrumNumber, float* flux, float* fluxError,  int nPar,
        xsccCall cFunc)
{
   // Passing from single precision Fortran to a C function.
   double* dEng = new double[nFlux+1];
   double* dFlux = new double[nFlux];
   double* dFluxErr = new double[nFlux];
   double* dPars = new double[nPar];
   for (int i=0; i<nFlux; ++i)
   {
      dEng[i] = static_cast<double>(energy[i]);
      dFlux[i] = static_cast<double>(flux[i]);
   }
   dEng[nFlux] = static_cast<double>(energy[nFlux]);
   if (fluxError)
      for (int i=0; i<nFlux; ++i)
         dFluxErr[i] = static_cast<double>(fluxError[i]);
   else
      for (int i=0; i<nFlux; ++i)
         dFluxErr[i] = 0.0;
   for (int i=0; i<nPar; ++i)
      dPars[i] = static_cast<double>(params[i]);
      
   (*cFunc)(dEng, nFlux, dPars, spectrumNumber, dFlux, dFluxErr, "");
   
   for (int i=0; i<nFlux; ++i)
      flux[i] = static_cast<float>(dFlux[i]);
   if (fluxError)
      for (int i=0; i<nFlux; ++i)
         fluxError[i] = static_cast<float>(dFluxErr[i]);
      
   delete [] dEng;
   delete [] dFlux;
   delete [] dFluxErr;
   delete [] dPars;   
      
}
void f_agauss(const float* energy, int nFlux, const float* params,
	     int spectrumNumber, float* flux, float* fluxError);

FCALLSCSUB6(f_agauss,AGAUSS,agauss,FLOATV,INT,FLOATV,INT,FLOATV,FLOATV)
FCALLSCSUB7(C_agauss,DAGAUSS,dagauss,DOUBLEV,INT,DOUBLEV,INT,DOUBLEV,DOUBLEV,STRING)

void f_agauss(const float* energy, int nFlux, const float* params,
        int spectrumNumber, float* flux, float* fluxError)
{
   const size_t nPar = 2;
   fcppModelWrapper(energy, nFlux, params, spectrumNumber, flux, fluxError,
        nPar, agauss);
}

void C_agauss(const double* energy, int nFlux, const double* params,
        int spectrumNumber, double* flux, double* fluxError, const char* initStr)
{
   const size_t nPar = 2;
   cppModelWrapper(energy, nFlux, params, spectrumNumber, flux, fluxError,
        initStr, nPar, agauss);
}

void CXX_agauss(const RealArray& energyArray, const RealArray& params,
        int spectrumNumber, RealArray& fluxArray, RealArray& fluxErrArray, const string& initString)
{
   agauss(energyArray, params, spectrumNumber, fluxArray, fluxErrArray, initString);
}

void C_agnsed(const double* energy, int nFlux, const double* params,
        int spectrumNumber, double* flux, double* fluxError, const char* initStr)
{
   const size_t nPar = 15;
   fModelWrapper(energy, nFlux, params, nPar, spectrumNumber, flux, fluxError,
        agnsed_);
}

void CXX_agnsed(const RealArray& energyArray, const RealArray& params,
        int spectrumNumber, RealArray& fluxArray, RealArray& fluxErrArray, const string& initString)
{
   XSModelFunction* funcObj = new XSCall<xsf77Call>(agnsed_);
   (*funcObj)(energyArray, params, spectrumNumber, fluxArray, fluxErrArray, initString);
   delete funcObj;
}

void C_agnslim(const double* energy, int nFlux, const double* params,
        int spectrumNumber, double* flux, double* fluxError, const char* initStr)
{
   const size_t nPar = 14;
   fModelWrapper(energy, nFlux, params, nPar, spectrumNumber, flux, fluxError,
        agnslim_);
}

void CXX_agnslim(const RealArray& energyArray, const RealArray& params,
        int spectrumNumber, RealArray& fluxArray, RealArray& fluxErrArray, const string& initString)
{
   XSModelFunction* funcObj = new XSCall<xsf77Call>(agnslim_);
   (*funcObj)(energyArray, params, spectrumNumber, fluxArray, fluxErrArray, initString);
   delete funcObj;
}

void f_apec(const float* energy, int nFlux, const float* params,
	     int spectrumNumber, float* flux, float* fluxError);

FCALLSCSUB6(f_apec,APEC,apec,FLOATV,INT,FLOATV,INT,FLOATV,FLOATV)
FCALLSCSUB7(C_apec,DAPEC,dapec,DOUBLEV,INT,DOUBLEV,INT,DOUBLEV,DOUBLEV,STRING)

void f_apec(const float* energy, int nFlux, const float* params,
        int spectrumNumber, float* flux, float* fluxError)
{
   const size_t nPar = 3;
   fcppModelWrapper(energy, nFlux, params, spectrumNumber, flux, fluxError,
        nPar, apec);
}

void C_apec(const double* energy, int nFlux, const double* params,
        int spectrumNumber, double* flux, double* fluxError, const char* initStr)
{
   const size_t nPar = 3;
   cppModelWrapper(energy, nFlux, params, spectrumNumber, flux, fluxError,
        initStr, nPar, apec);
}

void CXX_apec(const RealArray& energyArray, const RealArray& params,
        int spectrumNumber, RealArray& fluxArray, RealArray& fluxErrArray, const string& initString)
{
   apec(energyArray, params, spectrumNumber, fluxArray, fluxErrArray, initString);
}

void f_bapec(const float* energy, int nFlux, const float* params,
	     int spectrumNumber, float* flux, float* fluxError);

FCALLSCSUB6(f_bapec,BAPEC,bapec,FLOATV,INT,FLOATV,INT,FLOATV,FLOATV)
FCALLSCSUB7(C_bapec,DBAPEC,dbapec,DOUBLEV,INT,DOUBLEV,INT,DOUBLEV,DOUBLEV,STRING)

void f_bapec(const float* energy, int nFlux, const float* params,
        int spectrumNumber, float* flux, float* fluxError)
{
   const size_t nPar = 4;
   fcppModelWrapper(energy, nFlux, params, spectrumNumber, flux, fluxError,
        nPar, bapec);
}

void C_bapec(const double* energy, int nFlux, const double* params,
        int spectrumNumber, double* flux, double* fluxError, const char* initStr)
{
   const size_t nPar = 4;
   cppModelWrapper(energy, nFlux, params, spectrumNumber, flux, fluxError,
        initStr, nPar, bapec);
}

void CXX_bapec(const RealArray& energyArray, const RealArray& params,
        int spectrumNumber, RealArray& fluxArray, RealArray& fluxErrArray, const string& initString)
{
   bapec(energyArray, params, spectrumNumber, fluxArray, fluxErrArray, initString);
}

void f_btapec(const float* energy, int nFlux, const float* params,
	     int spectrumNumber, float* flux, float* fluxError);

FCALLSCSUB6(f_btapec,BTAPEC,btapec,FLOATV,INT,FLOATV,INT,FLOATV,FLOATV)
FCALLSCSUB7(C_btapec,DBTAPEC,dbtapec,DOUBLEV,INT,DOUBLEV,INT,DOUBLEV,DOUBLEV,STRING)

void f_btapec(const float* energy, int nFlux, const float* params,
        int spectrumNumber, float* flux, float* fluxError)
{
   const size_t nPar = 5;
   fcppModelWrapper(energy, nFlux, params, spectrumNumber, flux, fluxError,
        nPar, btapec);
}

void C_btapec(const double* energy, int nFlux, const double* params,
        int spectrumNumber, double* flux, double* fluxError, const char* initStr)
{
   const size_t nPar = 5;
   cppModelWrapper(energy, nFlux, params, spectrumNumber, flux, fluxError,
        initStr, nPar, btapec);
}

void CXX_btapec(const RealArray& energyArray, const RealArray& params,
        int spectrumNumber, RealArray& fluxArray, RealArray& fluxErrArray, const string& initString)
{
   btapec(energyArray, params, spectrumNumber, fluxArray, fluxErrArray, initString);
}

void f_bbody(const float* energy, int nFlux, const float* params,
	     int spectrumNumber, float* flux, float* fluxError);

FCALLSCSUB6(f_bbody,BBODY,bbody,FLOATV,INT,FLOATV,INT,FLOATV,FLOATV)
FCALLSCSUB7(C_bbody,DBBODY,dbbody,DOUBLEV,INT,DOUBLEV,INT,DOUBLEV,DOUBLEV,STRING)

void f_bbody(const float* energy, int nFlux, const float* params,
        int spectrumNumber, float* flux, float* fluxError)
{
   xsblbd_(energy, nFlux, params, spectrumNumber, flux, fluxError);
}

void C_bbody(const double* energy, int nFlux, const double* params,
        int spectrumNumber, double* flux, double* fluxError, const char* initStr)
{
   const size_t nPar = 1;
   fModelWrapper(energy, nFlux, params, nPar, spectrumNumber, flux, fluxError,
        xsblbd_);
}

void CXX_bbody(const RealArray& energyArray, const RealArray& params,
        int spectrumNumber, RealArray& fluxArray, RealArray& fluxErrArray, const string& initString)
{
   XSModelFunction* funcObj = new XSCall<xsf77Call>(xsblbd_);
   (*funcObj)(energyArray, params, spectrumNumber, fluxArray, fluxErrArray, initString);
   delete funcObj;
}

void f_bbodyrad(const float* energy, int nFlux, const float* params,
	     int spectrumNumber, float* flux, float* fluxError);

FCALLSCSUB6(f_bbodyrad,BBODYRAD,bbodyrad,FLOATV,INT,FLOATV,INT,FLOATV,FLOATV)
FCALLSCSUB7(C_bbodyrad,DBBODYRAD,dbbodyrad,DOUBLEV,INT,DOUBLEV,INT,DOUBLEV,DOUBLEV,STRING)

void f_bbodyrad(const float* energy, int nFlux, const float* params,
        int spectrumNumber, float* flux, float* fluxError)
{
   xsbbrd_(energy, nFlux, params, spectrumNumber, flux, fluxError);
}

void C_bbodyrad(const double* energy, int nFlux, const double* params,
        int spectrumNumber, double* flux, double* fluxError, const char* initStr)
{
   const size_t nPar = 1;
   fModelWrapper(energy, nFlux, params, nPar, spectrumNumber, flux, fluxError,
        xsbbrd_);
}

void CXX_bbodyrad(const RealArray& energyArray, const RealArray& params,
        int spectrumNumber, RealArray& fluxArray, RealArray& fluxErrArray, const string& initString)
{
   XSModelFunction* funcObj = new XSCall<xsf77Call>(xsbbrd_);
   (*funcObj)(energyArray, params, spectrumNumber, fluxArray, fluxErrArray, initString);
   delete funcObj;
}

void f_xsbexrav(const float* energy, int nFlux, const float* params,
	     int spectrumNumber, float* flux, float* fluxError);

FCALLSCSUB6(f_xsbexrav,XSBEXRAV,xsbexrav,FLOATV,INT,FLOATV,INT,FLOATV,FLOATV)
FCALLSCSUB7(C_xsbexrav,DXSBEXRAV,dxsbexrav,DOUBLEV,INT,DOUBLEV,INT,DOUBLEV,DOUBLEV,STRING)

void f_xsbexrav(const float* energy, int nFlux, const float* params,
        int spectrumNumber, float* flux, float* fluxError)
{
   const size_t nPar = 9;
   fcppModelWrapper(energy, nFlux, params, spectrumNumber, flux, fluxError,
        nPar, xsbexrav);
}

void C_xsbexrav(const double* energy, int nFlux, const double* params,
        int spectrumNumber, double* flux, double* fluxError, const char* initStr)
{
   const size_t nPar = 9;
   cppModelWrapper(energy, nFlux, params, spectrumNumber, flux, fluxError,
        initStr, nPar, xsbexrav);
}

void f_bexrav(const float* energy, int nFlux, const float* params,
	     int spectrumNumber, float* flux, float* fluxError);

FCALLSCSUB6(f_bexrav,BEXRAV,bexrav,FLOATV,INT,FLOATV,INT,FLOATV,FLOATV)
FCALLSCSUB7(C_bexrav,DBEXRAV,dbexrav,DOUBLEV,INT,DOUBLEV,INT,DOUBLEV,DOUBLEV,STRING)

void f_bexrav(const float* energy, int nFlux, const float* params,
        int spectrumNumber, float* flux, float* fluxError)
{
   const size_t nPar = 9;
   fcppModelWrapper(energy, nFlux, params, spectrumNumber, flux, fluxError,
        nPar, xsbexrav);
}

void C_bexrav(const double* energy, int nFlux, const double* params,
        int spectrumNumber, double* flux, double* fluxError, const char* initStr)
{
   const size_t nPar = 9;
   cppModelWrapper(energy, nFlux, params, spectrumNumber, flux, fluxError,
        initStr, nPar, xsbexrav);
}

void CXX_bexrav(const RealArray& energyArray, const RealArray& params,
        int spectrumNumber, RealArray& fluxArray, RealArray& fluxErrArray, const string& initString)
{
   xsbexrav(energyArray, params, spectrumNumber, fluxArray, fluxErrArray, initString);
}

void f_xsbexriv(const float* energy, int nFlux, const float* params,
	     int spectrumNumber, float* flux, float* fluxError);

FCALLSCSUB6(f_xsbexriv,XSBEXRIV,xsbexriv,FLOATV,INT,FLOATV,INT,FLOATV,FLOATV)
FCALLSCSUB7(C_xsbexriv,DXSBEXRIV,dxsbexriv,DOUBLEV,INT,DOUBLEV,INT,DOUBLEV,DOUBLEV,STRING)

void f_xsbexriv(const float* energy, int nFlux, const float* params,
        int spectrumNumber, float* flux, float* fluxError)
{
   const size_t nPar = 11;
   fcppModelWrapper(energy, nFlux, params, spectrumNumber, flux, fluxError,
        nPar, xsbexriv);
}

void C_xsbexriv(const double* energy, int nFlux, const double* params,
        int spectrumNumber, double* flux, double* fluxError, const char* initStr)
{
   const size_t nPar = 11;
   cppModelWrapper(energy, nFlux, params, spectrumNumber, flux, fluxError,
        initStr, nPar, xsbexriv);
}

void f_bexriv(const float* energy, int nFlux, const float* params,
	     int spectrumNumber, float* flux, float* fluxError);

FCALLSCSUB6(f_bexriv,BEXRIV,bexriv,FLOATV,INT,FLOATV,INT,FLOATV,FLOATV)
FCALLSCSUB7(C_bexriv,DBEXRIV,dbexriv,DOUBLEV,INT,DOUBLEV,INT,DOUBLEV,DOUBLEV,STRING)

void f_bexriv(const float* energy, int nFlux, const float* params,
        int spectrumNumber, float* flux, float* fluxError)
{
   const size_t nPar = 11;
   fcppModelWrapper(energy, nFlux, params, spectrumNumber, flux, fluxError,
        nPar, xsbexriv);
}

void C_bexriv(const double* energy, int nFlux, const double* params,
        int spectrumNumber, double* flux, double* fluxError, const char* initStr)
{
   const size_t nPar = 11;
   cppModelWrapper(energy, nFlux, params, spectrumNumber, flux, fluxError,
        initStr, nPar, xsbexriv);
}

void CXX_bexriv(const RealArray& energyArray, const RealArray& params,
        int spectrumNumber, RealArray& fluxArray, RealArray& fluxErrArray, const string& initString)
{
   xsbexriv(energyArray, params, spectrumNumber, fluxArray, fluxErrArray, initString);
}

void f_brokenPowerLaw(const float* energy, int nFlux, const float* params,
	     int spectrumNumber, float* flux, float* fluxError);

FCALLSCSUB6(f_brokenPowerLaw,XSBPLW,xsbplw,FLOATV,INT,FLOATV,INT,FLOATV,FLOATV)
FCALLSCSUB7(C_brokenPowerLaw,DXSBPLW,dxsbplw,DOUBLEV,INT,DOUBLEV,INT,DOUBLEV,DOUBLEV,STRING)

void f_brokenPowerLaw(const float* energy, int nFlux, const float* params,
        int spectrumNumber, float* flux, float* fluxError)
{
   const size_t nPar = 3;
   fcppModelWrapper(energy, nFlux, params, spectrumNumber, flux, fluxError,
        nPar, brokenPowerLaw);
}

void C_brokenPowerLaw(const double* energy, int nFlux, const double* params,
        int spectrumNumber, double* flux, double* fluxError, const char* initStr)
{
   const size_t nPar = 3;
   cppModelWrapper(energy, nFlux, params, spectrumNumber, flux, fluxError,
        initStr, nPar, brokenPowerLaw);
}

void f_bknpower(const float* energy, int nFlux, const float* params,
	     int spectrumNumber, float* flux, float* fluxError);

FCALLSCSUB6(f_bknpower,BKNPOWER,bknpower,FLOATV,INT,FLOATV,INT,FLOATV,FLOATV)
FCALLSCSUB7(C_bknpower,DBKNPOWER,dbknpower,DOUBLEV,INT,DOUBLEV,INT,DOUBLEV,DOUBLEV,STRING)

void f_bknpower(const float* energy, int nFlux, const float* params,
        int spectrumNumber, float* flux, float* fluxError)
{
   const size_t nPar = 3;
   fcppModelWrapper(energy, nFlux, params, spectrumNumber, flux, fluxError,
        nPar, brokenPowerLaw);
}

void C_bknpower(const double* energy, int nFlux, const double* params,
        int spectrumNumber, double* flux, double* fluxError, const char* initStr)
{
   const size_t nPar = 3;
   cppModelWrapper(energy, nFlux, params, spectrumNumber, flux, fluxError,
        initStr, nPar, brokenPowerLaw);
}

void CXX_bknpower(const RealArray& energyArray, const RealArray& params,
        int spectrumNumber, RealArray& fluxArray, RealArray& fluxErrArray, const string& initString)
{
   brokenPowerLaw(energyArray, params, spectrumNumber, fluxArray, fluxErrArray, initString);
}

void f_broken2PowerLaw(const float* energy, int nFlux, const float* params,
	     int spectrumNumber, float* flux, float* fluxError);

FCALLSCSUB6(f_broken2PowerLaw,XSB2PL,xsb2pl,FLOATV,INT,FLOATV,INT,FLOATV,FLOATV)
FCALLSCSUB7(C_broken2PowerLaw,DXSB2PL,dxsb2pl,DOUBLEV,INT,DOUBLEV,INT,DOUBLEV,DOUBLEV,STRING)

void f_broken2PowerLaw(const float* energy, int nFlux, const float* params,
        int spectrumNumber, float* flux, float* fluxError)
{
   const size_t nPar = 5;
   fcppModelWrapper(energy, nFlux, params, spectrumNumber, flux, fluxError,
        nPar, broken2PowerLaw);
}

void C_broken2PowerLaw(const double* energy, int nFlux, const double* params,
        int spectrumNumber, double* flux, double* fluxError, const char* initStr)
{
   const size_t nPar = 5;
   cppModelWrapper(energy, nFlux, params, spectrumNumber, flux, fluxError,
        initStr, nPar, broken2PowerLaw);
}

void f_bkn2pow(const float* energy, int nFlux, const float* params,
	     int spectrumNumber, float* flux, float* fluxError);

FCALLSCSUB6(f_bkn2pow,BKN2POW,bkn2pow,FLOATV,INT,FLOATV,INT,FLOATV,FLOATV)
FCALLSCSUB7(C_bkn2pow,DBKN2POW,dbkn2pow,DOUBLEV,INT,DOUBLEV,INT,DOUBLEV,DOUBLEV,STRING)

void f_bkn2pow(const float* energy, int nFlux, const float* params,
        int spectrumNumber, float* flux, float* fluxError)
{
   const size_t nPar = 5;
   fcppModelWrapper(energy, nFlux, params, spectrumNumber, flux, fluxError,
        nPar, broken2PowerLaw);
}

void C_bkn2pow(const double* energy, int nFlux, const double* params,
        int spectrumNumber, double* flux, double* fluxError, const char* initStr)
{
   const size_t nPar = 5;
   cppModelWrapper(energy, nFlux, params, spectrumNumber, flux, fluxError,
        initStr, nPar, broken2PowerLaw);
}

void CXX_bkn2pow(const RealArray& energyArray, const RealArray& params,
        int spectrumNumber, RealArray& fluxArray, RealArray& fluxErrArray, const string& initString)
{
   broken2PowerLaw(energyArray, params, spectrumNumber, fluxArray, fluxErrArray, initString);
}

void f_bmc(const float* energy, int nFlux, const float* params,
	     int spectrumNumber, float* flux, float* fluxError);

FCALLSCSUB6(f_bmc,BMC,bmc,FLOATV,INT,FLOATV,INT,FLOATV,FLOATV)
FCALLSCSUB7(C_bmc,DBMC,dbmc,DOUBLEV,INT,DOUBLEV,INT,DOUBLEV,DOUBLEV,STRING)

void f_bmc(const float* energy, int nFlux, const float* params,
        int spectrumNumber, float* flux, float* fluxError)
{
   xsbmc_(energy, nFlux, params, spectrumNumber, flux, fluxError);
}

void C_bmc(const double* energy, int nFlux, const double* params,
        int spectrumNumber, double* flux, double* fluxError, const char* initStr)
{
   const size_t nPar = 3;
   fModelWrapper(energy, nFlux, params, nPar, spectrumNumber, flux, fluxError,
        xsbmc_);
}

void CXX_bmc(const RealArray& energyArray, const RealArray& params,
        int spectrumNumber, RealArray& fluxArray, RealArray& fluxErrArray, const string& initString)
{
   XSModelFunction* funcObj = new XSCall<xsf77Call>(xsbmc_);
   (*funcObj)(energyArray, params, spectrumNumber, fluxArray, fluxErrArray, initString);
   delete funcObj;
}

void f_bremss(const float* energy, int nFlux, const float* params,
	     int spectrumNumber, float* flux, float* fluxError);

FCALLSCSUB6(f_bremss,BREMSS,bremss,FLOATV,INT,FLOATV,INT,FLOATV,FLOATV)
FCALLSCSUB7(C_bremss,DBREMSS,dbremss,DOUBLEV,INT,DOUBLEV,INT,DOUBLEV,DOUBLEV,STRING)

void f_bremss(const float* energy, int nFlux, const float* params,
        int spectrumNumber, float* flux, float* fluxError)
{
   xsbrms_(energy, nFlux, params, spectrumNumber, flux, fluxError);
}

void C_bremss(const double* energy, int nFlux, const double* params,
        int spectrumNumber, double* flux, double* fluxError, const char* initStr)
{
   const size_t nPar = 1;
   fModelWrapper(energy, nFlux, params, nPar, spectrumNumber, flux, fluxError,
        xsbrms_);
}

void CXX_bremss(const RealArray& energyArray, const RealArray& params,
        int spectrumNumber, RealArray& fluxArray, RealArray& fluxErrArray, const string& initString)
{
   XSModelFunction* funcObj = new XSCall<xsf77Call>(xsbrms_);
   (*funcObj)(energyArray, params, spectrumNumber, fluxArray, fluxErrArray, initString);
   delete funcObj;
}

void f_brnei(const float* energy, int nFlux, const float* params,
	     int spectrumNumber, float* flux, float* fluxError);

FCALLSCSUB6(f_brnei,BRNEI,brnei,FLOATV,INT,FLOATV,INT,FLOATV,FLOATV)
FCALLSCSUB7(C_brnei,DBRNEI,dbrnei,DOUBLEV,INT,DOUBLEV,INT,DOUBLEV,DOUBLEV,STRING)

void f_brnei(const float* energy, int nFlux, const float* params,
        int spectrumNumber, float* flux, float* fluxError)
{
   const size_t nPar = 6;
   fcppModelWrapper(energy, nFlux, params, spectrumNumber, flux, fluxError,
        nPar, brnei);
}

void C_brnei(const double* energy, int nFlux, const double* params,
        int spectrumNumber, double* flux, double* fluxError, const char* initStr)
{
   const size_t nPar = 6;
   cppModelWrapper(energy, nFlux, params, spectrumNumber, flux, fluxError,
        initStr, nPar, brnei);
}

void CXX_brnei(const RealArray& energyArray, const RealArray& params,
        int spectrumNumber, RealArray& fluxArray, RealArray& fluxErrArray, const string& initString)
{
   brnei(energyArray, params, spectrumNumber, fluxArray, fluxErrArray, initString);
}

void f_bvapec(const float* energy, int nFlux, const float* params,
	     int spectrumNumber, float* flux, float* fluxError);

FCALLSCSUB6(f_bvapec,BVAPEC,bvapec,FLOATV,INT,FLOATV,INT,FLOATV,FLOATV)
FCALLSCSUB7(C_bvapec,DBVAPEC,dbvapec,DOUBLEV,INT,DOUBLEV,INT,DOUBLEV,DOUBLEV,STRING)

void f_bvapec(const float* energy, int nFlux, const float* params,
        int spectrumNumber, float* flux, float* fluxError)
{
   const size_t nPar = 16;
   fcppModelWrapper(energy, nFlux, params, spectrumNumber, flux, fluxError,
        nPar, bvapec);
}

void C_bvapec(const double* energy, int nFlux, const double* params,
        int spectrumNumber, double* flux, double* fluxError, const char* initStr)
{
   const size_t nPar = 16;
   cppModelWrapper(energy, nFlux, params, spectrumNumber, flux, fluxError,
        initStr, nPar, bvapec);
}

void CXX_bvapec(const RealArray& energyArray, const RealArray& params,
        int spectrumNumber, RealArray& fluxArray, RealArray& fluxErrArray, const string& initString)
{
   bvapec(energyArray, params, spectrumNumber, fluxArray, fluxErrArray, initString);
}

void f_bvrnei(const float* energy, int nFlux, const float* params,
	     int spectrumNumber, float* flux, float* fluxError);

FCALLSCSUB6(f_bvrnei,BVRNEI,bvrnei,FLOATV,INT,FLOATV,INT,FLOATV,FLOATV)
FCALLSCSUB7(C_bvrnei,DBVRNEI,dbvrnei,DOUBLEV,INT,DOUBLEV,INT,DOUBLEV,DOUBLEV,STRING)

void f_bvrnei(const float* energy, int nFlux, const float* params,
        int spectrumNumber, float* flux, float* fluxError)
{
   const size_t nPar = 18;
   fcppModelWrapper(energy, nFlux, params, spectrumNumber, flux, fluxError,
        nPar, bvrnei);
}

void C_bvrnei(const double* energy, int nFlux, const double* params,
        int spectrumNumber, double* flux, double* fluxError, const char* initStr)
{
   const size_t nPar = 18;
   cppModelWrapper(energy, nFlux, params, spectrumNumber, flux, fluxError,
        initStr, nPar, bvrnei);
}

void CXX_bvrnei(const RealArray& energyArray, const RealArray& params,
        int spectrumNumber, RealArray& fluxArray, RealArray& fluxErrArray, const string& initString)
{
   bvrnei(energyArray, params, spectrumNumber, fluxArray, fluxErrArray, initString);
}

void f_bvtapec(const float* energy, int nFlux, const float* params,
	     int spectrumNumber, float* flux, float* fluxError);

FCALLSCSUB6(f_bvtapec,BVTAPEC,bvtapec,FLOATV,INT,FLOATV,INT,FLOATV,FLOATV)
FCALLSCSUB7(C_bvtapec,DBVTAPEC,dbvtapec,DOUBLEV,INT,DOUBLEV,INT,DOUBLEV,DOUBLEV,STRING)

void f_bvtapec(const float* energy, int nFlux, const float* params,
        int spectrumNumber, float* flux, float* fluxError)
{
   const size_t nPar = 17;
   fcppModelWrapper(energy, nFlux, params, spectrumNumber, flux, fluxError,
        nPar, bvtapec);
}

void C_bvtapec(const double* energy, int nFlux, const double* params,
        int spectrumNumber, double* flux, double* fluxError, const char* initStr)
{
   const size_t nPar = 17;
   cppModelWrapper(energy, nFlux, params, spectrumNumber, flux, fluxError,
        initStr, nPar, bvtapec);
}

void CXX_bvtapec(const RealArray& energyArray, const RealArray& params,
        int spectrumNumber, RealArray& fluxArray, RealArray& fluxErrArray, const string& initString)
{
   bvtapec(energyArray, params, spectrumNumber, fluxArray, fluxErrArray, initString);
}

void f_bvvapec(const float* energy, int nFlux, const float* params,
	     int spectrumNumber, float* flux, float* fluxError);

FCALLSCSUB6(f_bvvapec,BVVAPEC,bvvapec,FLOATV,INT,FLOATV,INT,FLOATV,FLOATV)
FCALLSCSUB7(C_bvvapec,DBVVAPEC,dbvvapec,DOUBLEV,INT,DOUBLEV,INT,DOUBLEV,DOUBLEV,STRING)

void f_bvvapec(const float* energy, int nFlux, const float* params,
        int spectrumNumber, float* flux, float* fluxError)
{
   const size_t nPar = 33;
   fcppModelWrapper(energy, nFlux, params, spectrumNumber, flux, fluxError,
        nPar, bvvapec);
}

void C_bvvapec(const double* energy, int nFlux, const double* params,
        int spectrumNumber, double* flux, double* fluxError, const char* initStr)
{
   const size_t nPar = 33;
   cppModelWrapper(energy, nFlux, params, spectrumNumber, flux, fluxError,
        initStr, nPar, bvvapec);
}

void CXX_bvvapec(const RealArray& energyArray, const RealArray& params,
        int spectrumNumber, RealArray& fluxArray, RealArray& fluxErrArray, const string& initString)
{
   bvvapec(energyArray, params, spectrumNumber, fluxArray, fluxErrArray, initString);
}

void f_bvvrnei(const float* energy, int nFlux, const float* params,
	     int spectrumNumber, float* flux, float* fluxError);

FCALLSCSUB6(f_bvvrnei,BVVRNEI,bvvrnei,FLOATV,INT,FLOATV,INT,FLOATV,FLOATV)
FCALLSCSUB7(C_bvvrnei,DBVVRNEI,dbvvrnei,DOUBLEV,INT,DOUBLEV,INT,DOUBLEV,DOUBLEV,STRING)

void f_bvvrnei(const float* energy, int nFlux, const float* params,
        int spectrumNumber, float* flux, float* fluxError)
{
   const size_t nPar = 35;
   fcppModelWrapper(energy, nFlux, params, spectrumNumber, flux, fluxError,
        nPar, bvvrnei);
}

void C_bvvrnei(const double* energy, int nFlux, const double* params,
        int spectrumNumber, double* flux, double* fluxError, const char* initStr)
{
   const size_t nPar = 35;
   cppModelWrapper(energy, nFlux, params, spectrumNumber, flux, fluxError,
        initStr, nPar, bvvrnei);
}

void CXX_bvvrnei(const RealArray& energyArray, const RealArray& params,
        int spectrumNumber, RealArray& fluxArray, RealArray& fluxErrArray, const string& initString)
{
   bvvrnei(energyArray, params, spectrumNumber, fluxArray, fluxErrArray, initString);
}

void f_bvvtapec(const float* energy, int nFlux, const float* params,
	     int spectrumNumber, float* flux, float* fluxError);

FCALLSCSUB6(f_bvvtapec,BVVTAPEC,bvvtapec,FLOATV,INT,FLOATV,INT,FLOATV,FLOATV)
FCALLSCSUB7(C_bvvtapec,DBVVTAPEC,dbvvtapec,DOUBLEV,INT,DOUBLEV,INT,DOUBLEV,DOUBLEV,STRING)

void f_bvvtapec(const float* energy, int nFlux, const float* params,
        int spectrumNumber, float* flux, float* fluxError)
{
   const size_t nPar = 34;
   fcppModelWrapper(energy, nFlux, params, spectrumNumber, flux, fluxError,
        nPar, bvvtapec);
}

void C_bvvtapec(const double* energy, int nFlux, const double* params,
        int spectrumNumber, double* flux, double* fluxError, const char* initStr)
{
   const size_t nPar = 34;
   cppModelWrapper(energy, nFlux, params, spectrumNumber, flux, fluxError,
        initStr, nPar, bvvtapec);
}

void CXX_bvvtapec(const RealArray& energyArray, const RealArray& params,
        int spectrumNumber, RealArray& fluxArray, RealArray& fluxErrArray, const string& initString)
{
   bvvtapec(energyArray, params, spectrumNumber, fluxArray, fluxErrArray, initString);
}

void f_c6mekl(const float* energy, int nFlux, const float* params,
	     int spectrumNumber, float* flux, float* fluxError);

FCALLSCSUB6(f_c6mekl,C6MEKL,c6mekl,FLOATV,INT,FLOATV,INT,FLOATV,FLOATV)
FCALLSCSUB7(C_c6mekl,DC6MEKL,dc6mekl,DOUBLEV,INT,DOUBLEV,INT,DOUBLEV,DOUBLEV,STRING)

void f_c6mekl(const float* energy, int nFlux, const float* params,
        int spectrumNumber, float* flux, float* fluxError)
{
   const size_t nPar = 10;
   fcppModelWrapper(energy, nFlux, params, spectrumNumber, flux, fluxError,
        nPar, c6mekl);
}

void C_c6mekl(const double* energy, int nFlux, const double* params,
        int spectrumNumber, double* flux, double* fluxError, const char* initStr)
{
   const size_t nPar = 10;
   cppModelWrapper(energy, nFlux, params, spectrumNumber, flux, fluxError,
        initStr, nPar, c6mekl);
}

void CXX_c6mekl(const RealArray& energyArray, const RealArray& params,
        int spectrumNumber, RealArray& fluxArray, RealArray& fluxErrArray, const string& initString)
{
   c6mekl(energyArray, params, spectrumNumber, fluxArray, fluxErrArray, initString);
}

void f_c6pmekl(const float* energy, int nFlux, const float* params,
	     int spectrumNumber, float* flux, float* fluxError);

FCALLSCSUB6(f_c6pmekl,C6PMEKL,c6pmekl,FLOATV,INT,FLOATV,INT,FLOATV,FLOATV)
FCALLSCSUB7(C_c6pmekl,DC6PMEKL,dc6pmekl,DOUBLEV,INT,DOUBLEV,INT,DOUBLEV,DOUBLEV,STRING)

void f_c6pmekl(const float* energy, int nFlux, const float* params,
        int spectrumNumber, float* flux, float* fluxError)
{
   const size_t nPar = 10;
   fcppModelWrapper(energy, nFlux, params, spectrumNumber, flux, fluxError,
        nPar, c6pmekl);
}

void C_c6pmekl(const double* energy, int nFlux, const double* params,
        int spectrumNumber, double* flux, double* fluxError, const char* initStr)
{
   const size_t nPar = 10;
   cppModelWrapper(energy, nFlux, params, spectrumNumber, flux, fluxError,
        initStr, nPar, c6pmekl);
}

void CXX_c6pmekl(const RealArray& energyArray, const RealArray& params,
        int spectrumNumber, RealArray& fluxArray, RealArray& fluxErrArray, const string& initString)
{
   c6pmekl(energyArray, params, spectrumNumber, fluxArray, fluxErrArray, initString);
}

void f_c6pvmkl(const float* energy, int nFlux, const float* params,
	     int spectrumNumber, float* flux, float* fluxError);

FCALLSCSUB6(f_c6pvmkl,C6PVMKL,c6pvmkl,FLOATV,INT,FLOATV,INT,FLOATV,FLOATV)
FCALLSCSUB7(C_c6pvmkl,DC6PVMKL,dc6pvmkl,DOUBLEV,INT,DOUBLEV,INT,DOUBLEV,DOUBLEV,STRING)

void f_c6pvmkl(const float* energy, int nFlux, const float* params,
        int spectrumNumber, float* flux, float* fluxError)
{
   const size_t nPar = 23;
   fcppModelWrapper(energy, nFlux, params, spectrumNumber, flux, fluxError,
        nPar, c6pvmkl);
}

void C_c6pvmkl(const double* energy, int nFlux, const double* params,
        int spectrumNumber, double* flux, double* fluxError, const char* initStr)
{
   const size_t nPar = 23;
   cppModelWrapper(energy, nFlux, params, spectrumNumber, flux, fluxError,
        initStr, nPar, c6pvmkl);
}

void CXX_c6pvmkl(const RealArray& energyArray, const RealArray& params,
        int spectrumNumber, RealArray& fluxArray, RealArray& fluxErrArray, const string& initString)
{
   c6pvmkl(energyArray, params, spectrumNumber, fluxArray, fluxErrArray, initString);
}

void f_c6vmekl(const float* energy, int nFlux, const float* params,
	     int spectrumNumber, float* flux, float* fluxError);

FCALLSCSUB6(f_c6vmekl,C6VMEKL,c6vmekl,FLOATV,INT,FLOATV,INT,FLOATV,FLOATV)
FCALLSCSUB7(C_c6vmekl,DC6VMEKL,dc6vmekl,DOUBLEV,INT,DOUBLEV,INT,DOUBLEV,DOUBLEV,STRING)

void f_c6vmekl(const float* energy, int nFlux, const float* params,
        int spectrumNumber, float* flux, float* fluxError)
{
   const size_t nPar = 23;
   fcppModelWrapper(energy, nFlux, params, spectrumNumber, flux, fluxError,
        nPar, c6vmekl);
}

void C_c6vmekl(const double* energy, int nFlux, const double* params,
        int spectrumNumber, double* flux, double* fluxError, const char* initStr)
{
   const size_t nPar = 23;
   cppModelWrapper(energy, nFlux, params, spectrumNumber, flux, fluxError,
        initStr, nPar, c6vmekl);
}

void CXX_c6vmekl(const RealArray& energyArray, const RealArray& params,
        int spectrumNumber, RealArray& fluxArray, RealArray& fluxErrArray, const string& initString)
{
   c6vmekl(energyArray, params, spectrumNumber, fluxArray, fluxErrArray, initString);
}

void f_carbatm(const float* energy, int nFlux, const float* params,
	     int spectrumNumber, float* flux, float* fluxError);

FCALLSCSUB6(f_carbatm,CARBATM,carbatm,FLOATV,INT,FLOATV,INT,FLOATV,FLOATV)
FCALLSCSUB7(C_carbatm,DCARBATM,dcarbatm,DOUBLEV,INT,DOUBLEV,INT,DOUBLEV,DOUBLEV,STRING)

void f_carbatm(const float* energy, int nFlux, const float* params,
        int spectrumNumber, float* flux, float* fluxError)
{
   const size_t nPar = 3;
   fcppModelWrapper(energy, nFlux, params, spectrumNumber, flux, fluxError,
        nPar, carbatm);
}

void C_carbatm(const double* energy, int nFlux, const double* params,
        int spectrumNumber, double* flux, double* fluxError, const char* initStr)
{
   const size_t nPar = 3;
   cppModelWrapper(energy, nFlux, params, spectrumNumber, flux, fluxError,
        initStr, nPar, carbatm);
}

void CXX_carbatm(const RealArray& energyArray, const RealArray& params,
        int spectrumNumber, RealArray& fluxArray, RealArray& fluxErrArray, const string& initString)
{
   carbatm(energyArray, params, spectrumNumber, fluxArray, fluxErrArray, initString);
}

void C_cemekl(const double* energy, int nFlux, const double* params,
        int spectrumNumber, double* flux, double* fluxError, const char* initStr)
{
   const size_t nPar = 6;
   fModelWrapper(energy, nFlux, params, nPar, spectrumNumber, flux, fluxError,
        cemekl_);
}

void CXX_cemekl(const RealArray& energyArray, const RealArray& params,
        int spectrumNumber, RealArray& fluxArray, RealArray& fluxErrArray, const string& initString)
{
   XSModelFunction* funcObj = new XSCall<xsf77Call>(cemekl_);
   (*funcObj)(energyArray, params, spectrumNumber, fluxArray, fluxErrArray, initString);
   delete funcObj;
}

void f_cemVMekal(const float* energy, int nFlux, const float* params,
	     int spectrumNumber, float* flux, float* fluxError);

FCALLSCSUB6(f_cemVMekal,CEMVMEKAL,cemvmekal,FLOATV,INT,FLOATV,INT,FLOATV,FLOATV)
FCALLSCSUB7(C_cemVMekal,DCEMVMEKAL,dcemvmekal,DOUBLEV,INT,DOUBLEV,INT,DOUBLEV,DOUBLEV,STRING)

void f_cemVMekal(const float* energy, int nFlux, const float* params,
        int spectrumNumber, float* flux, float* fluxError)
{
   const size_t nPar = 19;
   fcppModelWrapper(energy, nFlux, params, spectrumNumber, flux, fluxError,
        nPar, cemVMekal);
}

void C_cemVMekal(const double* energy, int nFlux, const double* params,
        int spectrumNumber, double* flux, double* fluxError, const char* initStr)
{
   const size_t nPar = 19;
   cppModelWrapper(energy, nFlux, params, spectrumNumber, flux, fluxError,
        initStr, nPar, cemVMekal);
}

void f_cevmkl(const float* energy, int nFlux, const float* params,
	     int spectrumNumber, float* flux, float* fluxError);

FCALLSCSUB6(f_cevmkl,CEVMKL,cevmkl,FLOATV,INT,FLOATV,INT,FLOATV,FLOATV)
FCALLSCSUB7(C_cevmkl,DCEVMKL,dcevmkl,DOUBLEV,INT,DOUBLEV,INT,DOUBLEV,DOUBLEV,STRING)

void f_cevmkl(const float* energy, int nFlux, const float* params,
        int spectrumNumber, float* flux, float* fluxError)
{
   const size_t nPar = 19;
   fcppModelWrapper(energy, nFlux, params, spectrumNumber, flux, fluxError,
        nPar, cemVMekal);
}

void C_cevmkl(const double* energy, int nFlux, const double* params,
        int spectrumNumber, double* flux, double* fluxError, const char* initStr)
{
   const size_t nPar = 19;
   cppModelWrapper(energy, nFlux, params, spectrumNumber, flux, fluxError,
        initStr, nPar, cemVMekal);
}

void CXX_cevmkl(const RealArray& energyArray, const RealArray& params,
        int spectrumNumber, RealArray& fluxArray, RealArray& fluxErrArray, const string& initString)
{
   cemVMekal(energyArray, params, spectrumNumber, fluxArray, fluxErrArray, initString);
}

void f_xscflw(const float* energy, int nFlux, const float* params,
	     int spectrumNumber, float* flux, float* fluxError);

FCALLSCSUB6(f_xscflw,XSCFLW,xscflw,FLOATV,INT,FLOATV,INT,FLOATV,FLOATV)
FCALLSCSUB7(C_xscflw,DXSCFLW,dxscflw,DOUBLEV,INT,DOUBLEV,INT,DOUBLEV,DOUBLEV,STRING)

void f_xscflw(const float* energy, int nFlux, const float* params,
        int spectrumNumber, float* flux, float* fluxError)
{
   const size_t nPar = 5;
   fcppModelWrapper(energy, nFlux, params, spectrumNumber, flux, fluxError,
        nPar, xscflw);
}

void C_xscflw(const double* energy, int nFlux, const double* params,
        int spectrumNumber, double* flux, double* fluxError, const char* initStr)
{
   const size_t nPar = 5;
   cppModelWrapper(energy, nFlux, params, spectrumNumber, flux, fluxError,
        initStr, nPar, xscflw);
}

void f_cflow(const float* energy, int nFlux, const float* params,
	     int spectrumNumber, float* flux, float* fluxError);

FCALLSCSUB6(f_cflow,CFLOW,cflow,FLOATV,INT,FLOATV,INT,FLOATV,FLOATV)
FCALLSCSUB7(C_cflow,DCFLOW,dcflow,DOUBLEV,INT,DOUBLEV,INT,DOUBLEV,DOUBLEV,STRING)

void f_cflow(const float* energy, int nFlux, const float* params,
        int spectrumNumber, float* flux, float* fluxError)
{
   const size_t nPar = 5;
   fcppModelWrapper(energy, nFlux, params, spectrumNumber, flux, fluxError,
        nPar, xscflw);
}

void C_cflow(const double* energy, int nFlux, const double* params,
        int spectrumNumber, double* flux, double* fluxError, const char* initStr)
{
   const size_t nPar = 5;
   cppModelWrapper(energy, nFlux, params, spectrumNumber, flux, fluxError,
        initStr, nPar, xscflw);
}

void CXX_cflow(const RealArray& energyArray, const RealArray& params,
        int spectrumNumber, RealArray& fluxArray, RealArray& fluxErrArray, const string& initString)
{
   xscflw(energyArray, params, spectrumNumber, fluxArray, fluxErrArray, initString);
}

void C_compbb(const double* energy, int nFlux, const double* params,
        int spectrumNumber, double* flux, double* fluxError, const char* initStr)
{
   const size_t nPar = 3;
   fModelWrapper(energy, nFlux, params, nPar, spectrumNumber, flux, fluxError,
        compbb_);
}

void CXX_compbb(const RealArray& energyArray, const RealArray& params,
        int spectrumNumber, RealArray& fluxArray, RealArray& fluxErrArray, const string& initString)
{
   XSModelFunction* funcObj = new XSCall<xsf77Call>(compbb_);
   (*funcObj)(energyArray, params, spectrumNumber, fluxArray, fluxErrArray, initString);
   delete funcObj;
}

void f_compmag(const float* energy, int nFlux, const float* params,
	     int spectrumNumber, float* flux, float* fluxError);

FCALLSCSUB6(f_compmag,COMPMAG,compmag,FLOATV,INT,FLOATV,INT,FLOATV,FLOATV)
FCALLSCSUB7(C_compmag,DCOMPMAG,dcompmag,DOUBLEV,INT,DOUBLEV,INT,DOUBLEV,DOUBLEV,STRING)

void f_compmag(const float* energy, int nFlux, const float* params,
        int spectrumNumber, float* flux, float* fluxError)
{
   const size_t nPar = 8;
   cModelWrapper(energy, nFlux, params, spectrumNumber, flux, fluxError,
        nPar, xscompmag);
}

void C_compmag(const double* energy, int nFlux, const double* params,
        int spectrumNumber, double* flux, double* fluxError, const char* initStr)
{
   xscompmag(energy, nFlux, params, spectrumNumber, flux, fluxError, initStr);
}

void CXX_compmag(const RealArray& energyArray, const RealArray& params,
        int spectrumNumber, RealArray& fluxArray, RealArray& fluxErrArray, const string& initString)
{
   XSModelFunction* funcObj = new XSCall<xsccCall>(xscompmag);
   (*funcObj)(energyArray, params, spectrumNumber, fluxArray, fluxErrArray, initString);
   delete funcObj;
}

void C_compLS(const double* energy, int nFlux, const double* params,
        int spectrumNumber, double* flux, double* fluxError, const char* initStr)
{
   const size_t nPar = 2;
   fModelWrapper(energy, nFlux, params, nPar, spectrumNumber, flux, fluxError,
        compls_);
}

void CXX_compLS(const RealArray& energyArray, const RealArray& params,
        int spectrumNumber, RealArray& fluxArray, RealArray& fluxErrArray, const string& initString)
{
   XSModelFunction* funcObj = new XSCall<xsf77Call>(compls_);
   (*funcObj)(energyArray, params, spectrumNumber, fluxArray, fluxErrArray, initString);
   delete funcObj;
}

void f_xscompps(const float* energy, int nFlux, const float* params,
	     int spectrumNumber, float* flux, float* fluxError);

FCALLSCSUB6(f_xscompps,XSCOMPPS,xscompps,FLOATV,INT,FLOATV,INT,FLOATV,FLOATV)
FCALLSCSUB7(C_xscompps,DXSCOMPPS,dxscompps,DOUBLEV,INT,DOUBLEV,INT,DOUBLEV,DOUBLEV,STRING)

void f_xscompps(const float* energy, int nFlux, const float* params,
        int spectrumNumber, float* flux, float* fluxError)
{
   const size_t nPar = 19;
   fcppModelWrapper(energy, nFlux, params, spectrumNumber, flux, fluxError,
        nPar, xscompps);
}

void C_xscompps(const double* energy, int nFlux, const double* params,
        int spectrumNumber, double* flux, double* fluxError, const char* initStr)
{
   const size_t nPar = 19;
   cppModelWrapper(energy, nFlux, params, spectrumNumber, flux, fluxError,
        initStr, nPar, xscompps);
}

void f_compPS(const float* energy, int nFlux, const float* params,
	     int spectrumNumber, float* flux, float* fluxError);

FCALLSCSUB6(f_compPS,COMPPS,compps,FLOATV,INT,FLOATV,INT,FLOATV,FLOATV)
FCALLSCSUB7(C_compPS,DCOMPPS,dcompps,DOUBLEV,INT,DOUBLEV,INT,DOUBLEV,DOUBLEV,STRING)

void f_compPS(const float* energy, int nFlux, const float* params,
        int spectrumNumber, float* flux, float* fluxError)
{
   const size_t nPar = 19;
   fcppModelWrapper(energy, nFlux, params, spectrumNumber, flux, fluxError,
        nPar, xscompps);
}

void C_compPS(const double* energy, int nFlux, const double* params,
        int spectrumNumber, double* flux, double* fluxError, const char* initStr)
{
   const size_t nPar = 19;
   cppModelWrapper(energy, nFlux, params, spectrumNumber, flux, fluxError,
        initStr, nPar, xscompps);
}

void CXX_compPS(const RealArray& energyArray, const RealArray& params,
        int spectrumNumber, RealArray& fluxArray, RealArray& fluxErrArray, const string& initString)
{
   xscompps(energyArray, params, spectrumNumber, fluxArray, fluxErrArray, initString);
}

void C_compST(const double* energy, int nFlux, const double* params,
        int spectrumNumber, double* flux, double* fluxError, const char* initStr)
{
   const size_t nPar = 2;
   fModelWrapper(energy, nFlux, params, nPar, spectrumNumber, flux, fluxError,
        compst_);
}

void CXX_compST(const RealArray& energyArray, const RealArray& params,
        int spectrumNumber, RealArray& fluxArray, RealArray& fluxErrArray, const string& initString)
{
   XSModelFunction* funcObj = new XSCall<xsf77Call>(compst_);
   (*funcObj)(energyArray, params, spectrumNumber, fluxArray, fluxErrArray, initString);
   delete funcObj;
}

void f_comptb(const float* energy, int nFlux, const float* params,
	     int spectrumNumber, float* flux, float* fluxError);

FCALLSCSUB6(f_comptb,COMPTB,comptb,FLOATV,INT,FLOATV,INT,FLOATV,FLOATV)
FCALLSCSUB7(C_comptb,DCOMPTB,dcomptb,DOUBLEV,INT,DOUBLEV,INT,DOUBLEV,DOUBLEV,STRING)

void f_comptb(const float* energy, int nFlux, const float* params,
        int spectrumNumber, float* flux, float* fluxError)
{
   const size_t nPar = 6;
   cModelWrapper(energy, nFlux, params, spectrumNumber, flux, fluxError,
        nPar, xscomptb);
}

void C_comptb(const double* energy, int nFlux, const double* params,
        int spectrumNumber, double* flux, double* fluxError, const char* initStr)
{
   xscomptb(energy, nFlux, params, spectrumNumber, flux, fluxError, initStr);
}

void CXX_comptb(const RealArray& energyArray, const RealArray& params,
        int spectrumNumber, RealArray& fluxArray, RealArray& fluxErrArray, const string& initString)
{
   XSModelFunction* funcObj = new XSCall<xsccCall>(xscomptb);
   (*funcObj)(energyArray, params, spectrumNumber, fluxArray, fluxErrArray, initString);
   delete funcObj;
}

void f_xscompth(const float* energy, int nFlux, const float* params,
	     int spectrumNumber, float* flux, float* fluxError);

FCALLSCSUB6(f_xscompth,XSCOMPTH,xscompth,FLOATV,INT,FLOATV,INT,FLOATV,FLOATV)
FCALLSCSUB7(C_xscompth,DXSCOMPTH,dxscompth,DOUBLEV,INT,DOUBLEV,INT,DOUBLEV,DOUBLEV,STRING)

void f_xscompth(const float* energy, int nFlux, const float* params,
        int spectrumNumber, float* flux, float* fluxError)
{
   const size_t nPar = 20;
   fcppModelWrapper(energy, nFlux, params, spectrumNumber, flux, fluxError,
        nPar, xscompth);
}

void C_xscompth(const double* energy, int nFlux, const double* params,
        int spectrumNumber, double* flux, double* fluxError, const char* initStr)
{
   const size_t nPar = 20;
   cppModelWrapper(energy, nFlux, params, spectrumNumber, flux, fluxError,
        initStr, nPar, xscompth);
}

void f_compth(const float* energy, int nFlux, const float* params,
	     int spectrumNumber, float* flux, float* fluxError);

FCALLSCSUB6(f_compth,COMPTH,compth,FLOATV,INT,FLOATV,INT,FLOATV,FLOATV)
FCALLSCSUB7(C_compth,DCOMPTH,dcompth,DOUBLEV,INT,DOUBLEV,INT,DOUBLEV,DOUBLEV,STRING)

void f_compth(const float* energy, int nFlux, const float* params,
        int spectrumNumber, float* flux, float* fluxError)
{
   const size_t nPar = 20;
   fcppModelWrapper(energy, nFlux, params, spectrumNumber, flux, fluxError,
        nPar, xscompth);
}

void C_compth(const double* energy, int nFlux, const double* params,
        int spectrumNumber, double* flux, double* fluxError, const char* initStr)
{
   const size_t nPar = 20;
   cppModelWrapper(energy, nFlux, params, spectrumNumber, flux, fluxError,
        initStr, nPar, xscompth);
}

void CXX_compth(const RealArray& energyArray, const RealArray& params,
        int spectrumNumber, RealArray& fluxArray, RealArray& fluxErrArray, const string& initString)
{
   xscompth(energyArray, params, spectrumNumber, fluxArray, fluxErrArray, initString);
}

void f_compTT(const float* energy, int nFlux, const float* params,
	     int spectrumNumber, float* flux, float* fluxError);

FCALLSCSUB6(f_compTT,COMPTT,comptt,FLOATV,INT,FLOATV,INT,FLOATV,FLOATV)
FCALLSCSUB7(C_compTT,DCOMPTT,dcomptt,DOUBLEV,INT,DOUBLEV,INT,DOUBLEV,DOUBLEV,STRING)

void f_compTT(const float* energy, int nFlux, const float* params,
        int spectrumNumber, float* flux, float* fluxError)
{
   xstitg_(energy, nFlux, params, spectrumNumber, flux, fluxError);
}

void C_compTT(const double* energy, int nFlux, const double* params,
        int spectrumNumber, double* flux, double* fluxError, const char* initStr)
{
   const size_t nPar = 5;
   fModelWrapper(energy, nFlux, params, nPar, spectrumNumber, flux, fluxError,
        xstitg_);
}

void CXX_compTT(const RealArray& energyArray, const RealArray& params,
        int spectrumNumber, RealArray& fluxArray, RealArray& fluxErrArray, const string& initString)
{
   XSModelFunction* funcObj = new XSCall<xsf77Call>(xstitg_);
   (*funcObj)(energyArray, params, spectrumNumber, fluxArray, fluxErrArray, initString);
   delete funcObj;
}

void f_cph(const float* energy, int nFlux, const float* params,
	     int spectrumNumber, float* flux, float* fluxError);

FCALLSCSUB6(f_cph,CPH,cph,FLOATV,INT,FLOATV,INT,FLOATV,FLOATV)
FCALLSCSUB7(C_cph,DCPH,dcph,DOUBLEV,INT,DOUBLEV,INT,DOUBLEV,DOUBLEV,STRING)

void f_cph(const float* energy, int nFlux, const float* params,
        int spectrumNumber, float* flux, float* fluxError)
{
   const size_t nPar = 4;
   fcppModelWrapper(energy, nFlux, params, spectrumNumber, flux, fluxError,
        nPar, cph);
}

void C_cph(const double* energy, int nFlux, const double* params,
        int spectrumNumber, double* flux, double* fluxError, const char* initStr)
{
   const size_t nPar = 4;
   cppModelWrapper(energy, nFlux, params, spectrumNumber, flux, fluxError,
        initStr, nPar, cph);
}

void CXX_cph(const RealArray& energyArray, const RealArray& params,
        int spectrumNumber, RealArray& fluxArray, RealArray& fluxErrArray, const string& initString)
{
   cph(energyArray, params, spectrumNumber, fluxArray, fluxErrArray, initString);
}

void f_cplinear(const float* energy, int nFlux, const float* params,
	     int spectrumNumber, float* flux, float* fluxError);

FCALLSCSUB6(f_cplinear,CPLINEAR,cplinear,FLOATV,INT,FLOATV,INT,FLOATV,FLOATV)
FCALLSCSUB7(C_cplinear,DCPLINEAR,dcplinear,DOUBLEV,INT,DOUBLEV,INT,DOUBLEV,DOUBLEV,STRING)

void f_cplinear(const float* energy, int nFlux, const float* params,
        int spectrumNumber, float* flux, float* fluxError)
{
   const size_t nPar = 20;
   fcppModelWrapper(energy, nFlux, params, spectrumNumber, flux, fluxError,
        nPar, cplinear);
}

void C_cplinear(const double* energy, int nFlux, const double* params,
        int spectrumNumber, double* flux, double* fluxError, const char* initStr)
{
   const size_t nPar = 20;
   cppModelWrapper(energy, nFlux, params, spectrumNumber, flux, fluxError,
        initStr, nPar, cplinear);
}

void CXX_cplinear(const RealArray& energyArray, const RealArray& params,
        int spectrumNumber, RealArray& fluxArray, RealArray& fluxErrArray, const string& initString)
{
   cplinear(energyArray, params, spectrumNumber, fluxArray, fluxErrArray, initString);
}

void f_cutoffPowerLaw(const float* energy, int nFlux, const float* params,
	     int spectrumNumber, float* flux, float* fluxError);

FCALLSCSUB6(f_cutoffPowerLaw,XSPLCO,xsplco,FLOATV,INT,FLOATV,INT,FLOATV,FLOATV)
FCALLSCSUB7(C_cutoffPowerLaw,DXSPLCO,dxsplco,DOUBLEV,INT,DOUBLEV,INT,DOUBLEV,DOUBLEV,STRING)

void f_cutoffPowerLaw(const float* energy, int nFlux, const float* params,
        int spectrumNumber, float* flux, float* fluxError)
{
   const size_t nPar = 2;
   fcppModelWrapper(energy, nFlux, params, spectrumNumber, flux, fluxError,
        nPar, cutoffPowerLaw);
}

void C_cutoffPowerLaw(const double* energy, int nFlux, const double* params,
        int spectrumNumber, double* flux, double* fluxError, const char* initStr)
{
   const size_t nPar = 2;
   cppModelWrapper(energy, nFlux, params, spectrumNumber, flux, fluxError,
        initStr, nPar, cutoffPowerLaw);
}

void f_cutoffpl(const float* energy, int nFlux, const float* params,
	     int spectrumNumber, float* flux, float* fluxError);

FCALLSCSUB6(f_cutoffpl,CUTOFFPL,cutoffpl,FLOATV,INT,FLOATV,INT,FLOATV,FLOATV)
FCALLSCSUB7(C_cutoffpl,DCUTOFFPL,dcutoffpl,DOUBLEV,INT,DOUBLEV,INT,DOUBLEV,DOUBLEV,STRING)

void f_cutoffpl(const float* energy, int nFlux, const float* params,
        int spectrumNumber, float* flux, float* fluxError)
{
   const size_t nPar = 2;
   fcppModelWrapper(energy, nFlux, params, spectrumNumber, flux, fluxError,
        nPar, cutoffPowerLaw);
}

void C_cutoffpl(const double* energy, int nFlux, const double* params,
        int spectrumNumber, double* flux, double* fluxError, const char* initStr)
{
   const size_t nPar = 2;
   cppModelWrapper(energy, nFlux, params, spectrumNumber, flux, fluxError,
        initStr, nPar, cutoffPowerLaw);
}

void CXX_cutoffpl(const RealArray& energyArray, const RealArray& params,
        int spectrumNumber, RealArray& fluxArray, RealArray& fluxErrArray, const string& initString)
{
   cutoffPowerLaw(energyArray, params, spectrumNumber, fluxArray, fluxErrArray, initString);
}

void C_disk(const double* energy, int nFlux, const double* params,
        int spectrumNumber, double* flux, double* fluxError, const char* initStr)
{
   const size_t nPar = 3;
   fModelWrapper(energy, nFlux, params, nPar, spectrumNumber, flux, fluxError,
        disk_);
}

void CXX_disk(const RealArray& energyArray, const RealArray& params,
        int spectrumNumber, RealArray& fluxArray, RealArray& fluxErrArray, const string& initString)
{
   XSModelFunction* funcObj = new XSCall<xsf77Call>(disk_);
   (*funcObj)(energyArray, params, spectrumNumber, fluxArray, fluxErrArray, initString);
   delete funcObj;
}

void C_diskir(const double* energy, int nFlux, const double* params,
        int spectrumNumber, double* flux, double* fluxError, const char* initStr)
{
   const size_t nPar = 8;
   fModelWrapper(energy, nFlux, params, nPar, spectrumNumber, flux, fluxError,
        diskir_);
}

void CXX_diskir(const RealArray& energyArray, const RealArray& params,
        int spectrumNumber, RealArray& fluxArray, RealArray& fluxErrArray, const string& initString)
{
   XSModelFunction* funcObj = new XSCall<xsf77Call>(diskir_);
   (*funcObj)(energyArray, params, spectrumNumber, fluxArray, fluxErrArray, initString);
   delete funcObj;
}

void f_diskbb(const float* energy, int nFlux, const float* params,
	     int spectrumNumber, float* flux, float* fluxError);

FCALLSCSUB6(f_diskbb,DISKBB,diskbb,FLOATV,INT,FLOATV,INT,FLOATV,FLOATV)
FCALLSCSUB7(C_diskbb,DDISKBB,ddiskbb,DOUBLEV,INT,DOUBLEV,INT,DOUBLEV,DOUBLEV,STRING)

void f_diskbb(const float* energy, int nFlux, const float* params,
        int spectrumNumber, float* flux, float* fluxError)
{
   xsdskb_(energy, nFlux, params, spectrumNumber, flux, fluxError);
}

void C_diskbb(const double* energy, int nFlux, const double* params,
        int spectrumNumber, double* flux, double* fluxError, const char* initStr)
{
   const size_t nPar = 1;
   fModelWrapper(energy, nFlux, params, nPar, spectrumNumber, flux, fluxError,
        xsdskb_);
}

void CXX_diskbb(const RealArray& energyArray, const RealArray& params,
        int spectrumNumber, RealArray& fluxArray, RealArray& fluxErrArray, const string& initString)
{
   XSModelFunction* funcObj = new XSCall<xsf77Call>(xsdskb_);
   (*funcObj)(energyArray, params, spectrumNumber, fluxArray, fluxErrArray, initString);
   delete funcObj;
}

void f_diskline(const float* energy, int nFlux, const float* params,
	     int spectrumNumber, float* flux, float* fluxError);

FCALLSCSUB6(f_diskline,DISKLINE,diskline,FLOATV,INT,FLOATV,INT,FLOATV,FLOATV)
FCALLSCSUB7(C_diskline,DDISKLINE,ddiskline,DOUBLEV,INT,DOUBLEV,INT,DOUBLEV,DOUBLEV,STRING)

void f_diskline(const float* energy, int nFlux, const float* params,
        int spectrumNumber, float* flux, float* fluxError)
{
   const size_t nPar = 5;
   fcppModelWrapper(energy, nFlux, params, spectrumNumber, flux, fluxError,
        nPar, diskline);
}

void C_diskline(const double* energy, int nFlux, const double* params,
        int spectrumNumber, double* flux, double* fluxError, const char* initStr)
{
   const size_t nPar = 5;
   cppModelWrapper(energy, nFlux, params, spectrumNumber, flux, fluxError,
        initStr, nPar, diskline);
}

void CXX_diskline(const RealArray& energyArray, const RealArray& params,
        int spectrumNumber, RealArray& fluxArray, RealArray& fluxErrArray, const string& initString)
{
   diskline(energyArray, params, spectrumNumber, fluxArray, fluxErrArray, initString);
}

void C_diskm(const double* energy, int nFlux, const double* params,
        int spectrumNumber, double* flux, double* fluxError, const char* initStr)
{
   const size_t nPar = 4;
   fModelWrapper(energy, nFlux, params, nPar, spectrumNumber, flux, fluxError,
        diskm_);
}

void CXX_diskm(const RealArray& energyArray, const RealArray& params,
        int spectrumNumber, RealArray& fluxArray, RealArray& fluxErrArray, const string& initString)
{
   XSModelFunction* funcObj = new XSCall<xsf77Call>(diskm_);
   (*funcObj)(energyArray, params, spectrumNumber, fluxArray, fluxErrArray, initString);
   delete funcObj;
}

void C_disko(const double* energy, int nFlux, const double* params,
        int spectrumNumber, double* flux, double* fluxError, const char* initStr)
{
   const size_t nPar = 4;
   fModelWrapper(energy, nFlux, params, nPar, spectrumNumber, flux, fluxError,
        disko_);
}

void CXX_disko(const RealArray& energyArray, const RealArray& params,
        int spectrumNumber, RealArray& fluxArray, RealArray& fluxErrArray, const string& initString)
{
   XSModelFunction* funcObj = new XSCall<xsf77Call>(disko_);
   (*funcObj)(energyArray, params, spectrumNumber, fluxArray, fluxErrArray, initString);
   delete funcObj;
}

void C_diskpbb(const double* energy, int nFlux, const double* params,
        int spectrumNumber, double* flux, double* fluxError, const char* initStr)
{
   const size_t nPar = 2;
   fModelWrapper(energy, nFlux, params, nPar, spectrumNumber, flux, fluxError,
        diskpbb_);
}

void CXX_diskpbb(const RealArray& energyArray, const RealArray& params,
        int spectrumNumber, RealArray& fluxArray, RealArray& fluxErrArray, const string& initString)
{
   XSModelFunction* funcObj = new XSCall<xsf77Call>(diskpbb_);
   (*funcObj)(energyArray, params, spectrumNumber, fluxArray, fluxErrArray, initString);
   delete funcObj;
}

void f_diskpn(const float* energy, int nFlux, const float* params,
	     int spectrumNumber, float* flux, float* fluxError);

FCALLSCSUB6(f_diskpn,DISKPN,diskpn,FLOATV,INT,FLOATV,INT,FLOATV,FLOATV)
FCALLSCSUB7(C_diskpn,DDISKPN,ddiskpn,DOUBLEV,INT,DOUBLEV,INT,DOUBLEV,DOUBLEV,STRING)

void f_diskpn(const float* energy, int nFlux, const float* params,
        int spectrumNumber, float* flux, float* fluxError)
{
   xsdiskpn_(energy, nFlux, params, spectrumNumber, flux, fluxError);
}

void C_diskpn(const double* energy, int nFlux, const double* params,
        int spectrumNumber, double* flux, double* fluxError, const char* initStr)
{
   const size_t nPar = 2;
   fModelWrapper(energy, nFlux, params, nPar, spectrumNumber, flux, fluxError,
        xsdiskpn_);
}

void CXX_diskpn(const RealArray& energyArray, const RealArray& params,
        int spectrumNumber, RealArray& fluxArray, RealArray& fluxErrArray, const string& initString)
{
   XSModelFunction* funcObj = new XSCall<xsf77Call>(xsdiskpn_);
   (*funcObj)(energyArray, params, spectrumNumber, fluxArray, fluxErrArray, initString);
   delete funcObj;
}

void C_eplogpar(const double* energy, int nFlux, const double* params,
        int spectrumNumber, double* flux, double* fluxError, const char* initStr)
{
   const size_t nPar = 2;
   fModelWrapper(energy, nFlux, params, nPar, spectrumNumber, flux, fluxError,
        eplogpar_);
}

void CXX_eplogpar(const RealArray& energyArray, const RealArray& params,
        int spectrumNumber, RealArray& fluxArray, RealArray& fluxErrArray, const string& initString)
{
   XSModelFunction* funcObj = new XSCall<xsf77Call>(eplogpar_);
   (*funcObj)(energyArray, params, spectrumNumber, fluxArray, fluxErrArray, initString);
   delete funcObj;
}

void f_xseqpair(const float* energy, int nFlux, const float* params,
	     int spectrumNumber, float* flux, float* fluxError);

FCALLSCSUB6(f_xseqpair,XSEQPAIR,xseqpair,FLOATV,INT,FLOATV,INT,FLOATV,FLOATV)
FCALLSCSUB7(C_xseqpair,DXSEQPAIR,dxseqpair,DOUBLEV,INT,DOUBLEV,INT,DOUBLEV,DOUBLEV,STRING)

void f_xseqpair(const float* energy, int nFlux, const float* params,
        int spectrumNumber, float* flux, float* fluxError)
{
   const size_t nPar = 20;
   fcppModelWrapper(energy, nFlux, params, spectrumNumber, flux, fluxError,
        nPar, xseqpair);
}

void C_xseqpair(const double* energy, int nFlux, const double* params,
        int spectrumNumber, double* flux, double* fluxError, const char* initStr)
{
   const size_t nPar = 20;
   cppModelWrapper(energy, nFlux, params, spectrumNumber, flux, fluxError,
        initStr, nPar, xseqpair);
}

void f_eqpair(const float* energy, int nFlux, const float* params,
	     int spectrumNumber, float* flux, float* fluxError);

FCALLSCSUB6(f_eqpair,EQPAIR,eqpair,FLOATV,INT,FLOATV,INT,FLOATV,FLOATV)
FCALLSCSUB7(C_eqpair,DEQPAIR,deqpair,DOUBLEV,INT,DOUBLEV,INT,DOUBLEV,DOUBLEV,STRING)

void f_eqpair(const float* energy, int nFlux, const float* params,
        int spectrumNumber, float* flux, float* fluxError)
{
   const size_t nPar = 20;
   fcppModelWrapper(energy, nFlux, params, spectrumNumber, flux, fluxError,
        nPar, xseqpair);
}

void C_eqpair(const double* energy, int nFlux, const double* params,
        int spectrumNumber, double* flux, double* fluxError, const char* initStr)
{
   const size_t nPar = 20;
   cppModelWrapper(energy, nFlux, params, spectrumNumber, flux, fluxError,
        initStr, nPar, xseqpair);
}

void CXX_eqpair(const RealArray& energyArray, const RealArray& params,
        int spectrumNumber, RealArray& fluxArray, RealArray& fluxErrArray, const string& initString)
{
   xseqpair(energyArray, params, spectrumNumber, fluxArray, fluxErrArray, initString);
}

void f_xseqth(const float* energy, int nFlux, const float* params,
	     int spectrumNumber, float* flux, float* fluxError);

FCALLSCSUB6(f_xseqth,XSEQTH,xseqth,FLOATV,INT,FLOATV,INT,FLOATV,FLOATV)
FCALLSCSUB7(C_xseqth,DXSEQTH,dxseqth,DOUBLEV,INT,DOUBLEV,INT,DOUBLEV,DOUBLEV,STRING)

void f_xseqth(const float* energy, int nFlux, const float* params,
        int spectrumNumber, float* flux, float* fluxError)
{
   const size_t nPar = 20;
   fcppModelWrapper(energy, nFlux, params, spectrumNumber, flux, fluxError,
        nPar, xseqth);
}

void C_xseqth(const double* energy, int nFlux, const double* params,
        int spectrumNumber, double* flux, double* fluxError, const char* initStr)
{
   const size_t nPar = 20;
   cppModelWrapper(energy, nFlux, params, spectrumNumber, flux, fluxError,
        initStr, nPar, xseqth);
}

void f_eqtherm(const float* energy, int nFlux, const float* params,
	     int spectrumNumber, float* flux, float* fluxError);

FCALLSCSUB6(f_eqtherm,EQTHERM,eqtherm,FLOATV,INT,FLOATV,INT,FLOATV,FLOATV)
FCALLSCSUB7(C_eqtherm,DEQTHERM,deqtherm,DOUBLEV,INT,DOUBLEV,INT,DOUBLEV,DOUBLEV,STRING)

void f_eqtherm(const float* energy, int nFlux, const float* params,
        int spectrumNumber, float* flux, float* fluxError)
{
   const size_t nPar = 20;
   fcppModelWrapper(energy, nFlux, params, spectrumNumber, flux, fluxError,
        nPar, xseqth);
}

void C_eqtherm(const double* energy, int nFlux, const double* params,
        int spectrumNumber, double* flux, double* fluxError, const char* initStr)
{
   const size_t nPar = 20;
   cppModelWrapper(energy, nFlux, params, spectrumNumber, flux, fluxError,
        initStr, nPar, xseqth);
}

void CXX_eqtherm(const RealArray& energyArray, const RealArray& params,
        int spectrumNumber, RealArray& fluxArray, RealArray& fluxErrArray, const string& initString)
{
   xseqth(energyArray, params, spectrumNumber, fluxArray, fluxErrArray, initString);
}

void f_equil(const float* energy, int nFlux, const float* params,
	     int spectrumNumber, float* flux, float* fluxError);

FCALLSCSUB6(f_equil,EQUIL,equil,FLOATV,INT,FLOATV,INT,FLOATV,FLOATV)
FCALLSCSUB7(C_equil,DEQUIL,dequil,DOUBLEV,INT,DOUBLEV,INT,DOUBLEV,DOUBLEV,STRING)

void f_equil(const float* energy, int nFlux, const float* params,
        int spectrumNumber, float* flux, float* fluxError)
{
   const size_t nPar = 3;
   fcppModelWrapper(energy, nFlux, params, spectrumNumber, flux, fluxError,
        nPar, equil);
}

void C_equil(const double* energy, int nFlux, const double* params,
        int spectrumNumber, double* flux, double* fluxError, const char* initStr)
{
   const size_t nPar = 3;
   cppModelWrapper(energy, nFlux, params, spectrumNumber, flux, fluxError,
        initStr, nPar, equil);
}

void CXX_equil(const RealArray& energyArray, const RealArray& params,
        int spectrumNumber, RealArray& fluxArray, RealArray& fluxErrArray, const string& initString)
{
   equil(energyArray, params, spectrumNumber, fluxArray, fluxErrArray, initString);
}

void f_expdec(const float* energy, int nFlux, const float* params,
	     int spectrumNumber, float* flux, float* fluxError);

FCALLSCSUB6(f_expdec,EXPDEC,expdec,FLOATV,INT,FLOATV,INT,FLOATV,FLOATV)
FCALLSCSUB7(C_expdec,DEXPDEC,dexpdec,DOUBLEV,INT,DOUBLEV,INT,DOUBLEV,DOUBLEV,STRING)

void f_expdec(const float* energy, int nFlux, const float* params,
        int spectrumNumber, float* flux, float* fluxError)
{
   xsxpdec_(energy, nFlux, params, spectrumNumber, flux, fluxError);
}

void C_expdec(const double* energy, int nFlux, const double* params,
        int spectrumNumber, double* flux, double* fluxError, const char* initStr)
{
   const size_t nPar = 1;
   fModelWrapper(energy, nFlux, params, nPar, spectrumNumber, flux, fluxError,
        xsxpdec_);
}

void CXX_expdec(const RealArray& energyArray, const RealArray& params,
        int spectrumNumber, RealArray& fluxArray, RealArray& fluxErrArray, const string& initString)
{
   XSModelFunction* funcObj = new XSCall<xsf77Call>(xsxpdec_);
   (*funcObj)(energyArray, params, spectrumNumber, fluxArray, fluxErrArray, initString);
   delete funcObj;
}

void C_ezdiskbb(const double* energy, int nFlux, const double* params,
        int spectrumNumber, double* flux, double* fluxError, const char* initStr)
{
   const size_t nPar = 1;
   fModelWrapper(energy, nFlux, params, nPar, spectrumNumber, flux, fluxError,
        ezdiskbb_);
}

void CXX_ezdiskbb(const RealArray& energyArray, const RealArray& params,
        int spectrumNumber, RealArray& fluxArray, RealArray& fluxErrArray, const string& initString)
{
   XSModelFunction* funcObj = new XSCall<xsf77Call>(ezdiskbb_);
   (*funcObj)(energyArray, params, spectrumNumber, fluxArray, fluxErrArray, initString);
   delete funcObj;
}

void f_gaussianLine(const float* energy, int nFlux, const float* params,
	     int spectrumNumber, float* flux, float* fluxError);

FCALLSCSUB6(f_gaussianLine,GAUSSIANLINE,gaussianline,FLOATV,INT,FLOATV,INT,FLOATV,FLOATV)
FCALLSCSUB7(C_gaussianLine,DGAUSSIANLINE,dgaussianline,DOUBLEV,INT,DOUBLEV,INT,DOUBLEV,DOUBLEV,STRING)

void f_gaussianLine(const float* energy, int nFlux, const float* params,
        int spectrumNumber, float* flux, float* fluxError)
{
   const size_t nPar = 2;
   fcppModelWrapper(energy, nFlux, params, spectrumNumber, flux, fluxError,
        nPar, gaussianLine);
}

void C_gaussianLine(const double* energy, int nFlux, const double* params,
        int spectrumNumber, double* flux, double* fluxError, const char* initStr)
{
   const size_t nPar = 2;
   cppModelWrapper(energy, nFlux, params, spectrumNumber, flux, fluxError,
        initStr, nPar, gaussianLine);
}

void f_gaussian(const float* energy, int nFlux, const float* params,
	     int spectrumNumber, float* flux, float* fluxError);

FCALLSCSUB6(f_gaussian,GAUSSIAN,gaussian,FLOATV,INT,FLOATV,INT,FLOATV,FLOATV)
FCALLSCSUB7(C_gaussian,DGAUSSIAN,dgaussian,DOUBLEV,INT,DOUBLEV,INT,DOUBLEV,DOUBLEV,STRING)

void f_gaussian(const float* energy, int nFlux, const float* params,
        int spectrumNumber, float* flux, float* fluxError)
{
   const size_t nPar = 2;
   fcppModelWrapper(energy, nFlux, params, spectrumNumber, flux, fluxError,
        nPar, gaussianLine);
}

void C_gaussian(const double* energy, int nFlux, const double* params,
        int spectrumNumber, double* flux, double* fluxError, const char* initStr)
{
   const size_t nPar = 2;
   cppModelWrapper(energy, nFlux, params, spectrumNumber, flux, fluxError,
        initStr, nPar, gaussianLine);
}

void CXX_gaussian(const RealArray& energyArray, const RealArray& params,
        int spectrumNumber, RealArray& fluxArray, RealArray& fluxErrArray, const string& initString)
{
   gaussianLine(energyArray, params, spectrumNumber, fluxArray, fluxErrArray, initString);
}

void f_gaussDem(const float* energy, int nFlux, const float* params,
	     int spectrumNumber, float* flux, float* fluxError);

FCALLSCSUB6(f_gaussDem,GAUSSDEM,gaussdem,FLOATV,INT,FLOATV,INT,FLOATV,FLOATV)
FCALLSCSUB7(C_gaussDem,DGAUSSDEM,dgaussdem,DOUBLEV,INT,DOUBLEV,INT,DOUBLEV,DOUBLEV,STRING)

void f_gaussDem(const float* energy, int nFlux, const float* params,
        int spectrumNumber, float* flux, float* fluxError)
{
   const size_t nPar = 6;
   fcppModelWrapper(energy, nFlux, params, spectrumNumber, flux, fluxError,
        nPar, gaussDem);
}

void C_gaussDem(const double* energy, int nFlux, const double* params,
        int spectrumNumber, double* flux, double* fluxError, const char* initStr)
{
   const size_t nPar = 6;
   cppModelWrapper(energy, nFlux, params, spectrumNumber, flux, fluxError,
        initStr, nPar, gaussDem);
}

void f_gadem(const float* energy, int nFlux, const float* params,
	     int spectrumNumber, float* flux, float* fluxError);

FCALLSCSUB6(f_gadem,GADEM,gadem,FLOATV,INT,FLOATV,INT,FLOATV,FLOATV)
FCALLSCSUB7(C_gadem,DGADEM,dgadem,DOUBLEV,INT,DOUBLEV,INT,DOUBLEV,DOUBLEV,STRING)

void f_gadem(const float* energy, int nFlux, const float* params,
        int spectrumNumber, float* flux, float* fluxError)
{
   const size_t nPar = 6;
   fcppModelWrapper(energy, nFlux, params, spectrumNumber, flux, fluxError,
        nPar, gaussDem);
}

void C_gadem(const double* energy, int nFlux, const double* params,
        int spectrumNumber, double* flux, double* fluxError, const char* initStr)
{
   const size_t nPar = 6;
   cppModelWrapper(energy, nFlux, params, spectrumNumber, flux, fluxError,
        initStr, nPar, gaussDem);
}

void CXX_gadem(const RealArray& energyArray, const RealArray& params,
        int spectrumNumber, RealArray& fluxArray, RealArray& fluxErrArray, const string& initString)
{
   gaussDem(energyArray, params, spectrumNumber, fluxArray, fluxErrArray, initString);
}

void f_gnei(const float* energy, int nFlux, const float* params,
	     int spectrumNumber, float* flux, float* fluxError);

FCALLSCSUB6(f_gnei,GNEI,gnei,FLOATV,INT,FLOATV,INT,FLOATV,FLOATV)
FCALLSCSUB7(C_gnei,DGNEI,dgnei,DOUBLEV,INT,DOUBLEV,INT,DOUBLEV,DOUBLEV,STRING)

void f_gnei(const float* energy, int nFlux, const float* params,
        int spectrumNumber, float* flux, float* fluxError)
{
   const size_t nPar = 5;
   fcppModelWrapper(energy, nFlux, params, spectrumNumber, flux, fluxError,
        nPar, gnei);
}

void C_gnei(const double* energy, int nFlux, const double* params,
        int spectrumNumber, double* flux, double* fluxError, const char* initStr)
{
   const size_t nPar = 5;
   cppModelWrapper(energy, nFlux, params, spectrumNumber, flux, fluxError,
        initStr, nPar, gnei);
}

void CXX_gnei(const RealArray& energyArray, const RealArray& params,
        int spectrumNumber, RealArray& fluxArray, RealArray& fluxErrArray, const string& initString)
{
   gnei(energyArray, params, spectrumNumber, fluxArray, fluxErrArray, initString);
}

void C_grad(const double* energy, int nFlux, const double* params,
        int spectrumNumber, double* flux, double* fluxError, const char* initStr)
{
   const size_t nPar = 6;
   fModelWrapper(energy, nFlux, params, nPar, spectrumNumber, flux, fluxError,
        grad_);
}

void CXX_grad(const RealArray& energyArray, const RealArray& params,
        int spectrumNumber, RealArray& fluxArray, RealArray& fluxErrArray, const string& initString)
{
   XSModelFunction* funcObj = new XSCall<xsf77Call>(grad_);
   (*funcObj)(energyArray, params, spectrumNumber, fluxArray, fluxErrArray, initString);
   delete funcObj;
}

void f_grbcomp(const float* energy, int nFlux, const float* params,
	     int spectrumNumber, float* flux, float* fluxError);

FCALLSCSUB6(f_grbcomp,GRBCOMP,grbcomp,FLOATV,INT,FLOATV,INT,FLOATV,FLOATV)
FCALLSCSUB7(C_grbcomp,DGRBCOMP,dgrbcomp,DOUBLEV,INT,DOUBLEV,INT,DOUBLEV,DOUBLEV,STRING)

void f_grbcomp(const float* energy, int nFlux, const float* params,
        int spectrumNumber, float* flux, float* fluxError)
{
   const size_t nPar = 9;
   cModelWrapper(energy, nFlux, params, spectrumNumber, flux, fluxError,
        nPar, xsgrbcomp);
}

void C_grbcomp(const double* energy, int nFlux, const double* params,
        int spectrumNumber, double* flux, double* fluxError, const char* initStr)
{
   xsgrbcomp(energy, nFlux, params, spectrumNumber, flux, fluxError, initStr);
}

void CXX_grbcomp(const RealArray& energyArray, const RealArray& params,
        int spectrumNumber, RealArray& fluxArray, RealArray& fluxErrArray, const string& initString)
{
   XSModelFunction* funcObj = new XSCall<xsccCall>(xsgrbcomp);
   (*funcObj)(energyArray, params, spectrumNumber, fluxArray, fluxErrArray, initString);
   delete funcObj;
}

void f_grbm(const float* energy, int nFlux, const float* params,
	     int spectrumNumber, float* flux, float* fluxError);

FCALLSCSUB6(f_grbm,GRBM,grbm,FLOATV,INT,FLOATV,INT,FLOATV,FLOATV)
FCALLSCSUB7(C_grbm,DGRBM,dgrbm,DOUBLEV,INT,DOUBLEV,INT,DOUBLEV,DOUBLEV,STRING)

void f_grbm(const float* energy, int nFlux, const float* params,
        int spectrumNumber, float* flux, float* fluxError)
{
   xsgrbm_(energy, nFlux, params, spectrumNumber, flux, fluxError);
}

void C_grbm(const double* energy, int nFlux, const double* params,
        int spectrumNumber, double* flux, double* fluxError, const char* initStr)
{
   const size_t nPar = 3;
   fModelWrapper(energy, nFlux, params, nPar, spectrumNumber, flux, fluxError,
        xsgrbm_);
}

void CXX_grbm(const RealArray& energyArray, const RealArray& params,
        int spectrumNumber, RealArray& fluxArray, RealArray& fluxErrArray, const string& initString)
{
   XSModelFunction* funcObj = new XSCall<xsf77Call>(xsgrbm_);
   (*funcObj)(energyArray, params, spectrumNumber, fluxArray, fluxErrArray, initString);
   delete funcObj;
}

void f_hatm(const float* energy, int nFlux, const float* params,
	     int spectrumNumber, float* flux, float* fluxError);

FCALLSCSUB6(f_hatm,HATM,hatm,FLOATV,INT,FLOATV,INT,FLOATV,FLOATV)
FCALLSCSUB7(C_hatm,DHATM,dhatm,DOUBLEV,INT,DOUBLEV,INT,DOUBLEV,DOUBLEV,STRING)

void f_hatm(const float* energy, int nFlux, const float* params,
        int spectrumNumber, float* flux, float* fluxError)
{
   const size_t nPar = 3;
   fcppModelWrapper(energy, nFlux, params, spectrumNumber, flux, fluxError,
        nPar, hatm);
}

void C_hatm(const double* energy, int nFlux, const double* params,
        int spectrumNumber, double* flux, double* fluxError, const char* initStr)
{
   const size_t nPar = 3;
   cppModelWrapper(energy, nFlux, params, spectrumNumber, flux, fluxError,
        initStr, nPar, hatm);
}

void CXX_hatm(const RealArray& energyArray, const RealArray& params,
        int spectrumNumber, RealArray& fluxArray, RealArray& fluxErrArray, const string& initString)
{
   hatm(energyArray, params, spectrumNumber, fluxArray, fluxErrArray, initString);
}

void C_jet(const double* energy, int nFlux, const double* params,
        int spectrumNumber, double* flux, double* fluxError, const char* initStr)
{
   const size_t nPar = 15;
   fModelWrapper(energy, nFlux, params, nPar, spectrumNumber, flux, fluxError,
        jet_);
}

void CXX_jet(const RealArray& energyArray, const RealArray& params,
        int spectrumNumber, RealArray& fluxArray, RealArray& fluxErrArray, const string& initString)
{
   XSModelFunction* funcObj = new XSCall<xsf77Call>(jet_);
   (*funcObj)(energyArray, params, spectrumNumber, fluxArray, fluxErrArray, initString);
   delete funcObj;
}

void f_kerrbb(const float* energy, int nFlux, const float* params,
	     int spectrumNumber, float* flux, float* fluxError);

FCALLSCSUB6(f_kerrbb,KERRBB,kerrbb,FLOATV,INT,FLOATV,INT,FLOATV,FLOATV)
FCALLSCSUB7(C_kerrbb,DKERRBB,dkerrbb,DOUBLEV,INT,DOUBLEV,INT,DOUBLEV,DOUBLEV,STRING)

void f_kerrbb(const float* energy, int nFlux, const float* params,
        int spectrumNumber, float* flux, float* fluxError)
{
   const size_t nPar = 9;
   fcppModelWrapper(energy, nFlux, params, spectrumNumber, flux, fluxError,
        nPar, kerrbb);
}

void C_kerrbb(const double* energy, int nFlux, const double* params,
        int spectrumNumber, double* flux, double* fluxError, const char* initStr)
{
   const size_t nPar = 9;
   cppModelWrapper(energy, nFlux, params, spectrumNumber, flux, fluxError,
        initStr, nPar, kerrbb);
}

void CXX_kerrbb(const RealArray& energyArray, const RealArray& params,
        int spectrumNumber, RealArray& fluxArray, RealArray& fluxErrArray, const string& initString)
{
   kerrbb(energyArray, params, spectrumNumber, fluxArray, fluxErrArray, initString);
}

void f_kerrd(const float* energy, int nFlux, const float* params,
	     int spectrumNumber, float* flux, float* fluxError);

FCALLSCSUB6(f_kerrd,KERRD,kerrd,FLOATV,INT,FLOATV,INT,FLOATV,FLOATV)
FCALLSCSUB7(C_kerrd,DKERRD,dkerrd,DOUBLEV,INT,DOUBLEV,INT,DOUBLEV,DOUBLEV,STRING)

void f_kerrd(const float* energy, int nFlux, const float* params,
        int spectrumNumber, float* flux, float* fluxError)
{
   const size_t nPar = 7;
   fcppModelWrapper(energy, nFlux, params, spectrumNumber, flux, fluxError,
        nPar, kerrd);
}

void C_kerrd(const double* energy, int nFlux, const double* params,
        int spectrumNumber, double* flux, double* fluxError, const char* initStr)
{
   const size_t nPar = 7;
   cppModelWrapper(energy, nFlux, params, spectrumNumber, flux, fluxError,
        initStr, nPar, kerrd);
}

void CXX_kerrd(const RealArray& energyArray, const RealArray& params,
        int spectrumNumber, RealArray& fluxArray, RealArray& fluxErrArray, const string& initString)
{
   kerrd(energyArray, params, spectrumNumber, fluxArray, fluxErrArray, initString);
}

void f_spin(const float* energy, int nFlux, const float* params,
	     int spectrumNumber, float* flux, float* fluxError);

FCALLSCSUB6(f_spin,SPIN,spin,FLOATV,INT,FLOATV,INT,FLOATV,FLOATV)
FCALLSCSUB7(C_spin,DSPIN,dspin,DOUBLEV,INT,DOUBLEV,INT,DOUBLEV,DOUBLEV,STRING)

void f_spin(const float* energy, int nFlux, const float* params,
        int spectrumNumber, float* flux, float* fluxError)
{
   const size_t nPar = 9;
   fcppModelWrapper(energy, nFlux, params, spectrumNumber, flux, fluxError,
        nPar, spin);
}

void C_spin(const double* energy, int nFlux, const double* params,
        int spectrumNumber, double* flux, double* fluxError, const char* initStr)
{
   const size_t nPar = 9;
   cppModelWrapper(energy, nFlux, params, spectrumNumber, flux, fluxError,
        initStr, nPar, spin);
}

void f_kerrdisk(const float* energy, int nFlux, const float* params,
	     int spectrumNumber, float* flux, float* fluxError);

FCALLSCSUB6(f_kerrdisk,KERRDISK,kerrdisk,FLOATV,INT,FLOATV,INT,FLOATV,FLOATV)
FCALLSCSUB7(C_kerrdisk,DKERRDISK,dkerrdisk,DOUBLEV,INT,DOUBLEV,INT,DOUBLEV,DOUBLEV,STRING)

void f_kerrdisk(const float* energy, int nFlux, const float* params,
        int spectrumNumber, float* flux, float* fluxError)
{
   const size_t nPar = 9;
   fcppModelWrapper(energy, nFlux, params, spectrumNumber, flux, fluxError,
        nPar, spin);
}

void C_kerrdisk(const double* energy, int nFlux, const double* params,
        int spectrumNumber, double* flux, double* fluxError, const char* initStr)
{
   const size_t nPar = 9;
   cppModelWrapper(energy, nFlux, params, spectrumNumber, flux, fluxError,
        initStr, nPar, spin);
}

void CXX_kerrdisk(const RealArray& energyArray, const RealArray& params,
        int spectrumNumber, RealArray& fluxArray, RealArray& fluxErrArray, const string& initString)
{
   spin(energyArray, params, spectrumNumber, fluxArray, fluxErrArray, initString);
}

void C_kyconv(const double* energy, int nFlux, const double* params,
        int spectrumNumber, double* flux, double* fluxError, const char* initStr)
{
   const size_t nPar = 12;
   fModelWrapper(energy, nFlux, params, nPar, spectrumNumber, flux, fluxError,
        kyconv_);
}

void CXX_kyconv(const RealArray& energyArray, const RealArray& params,
        int spectrumNumber, RealArray& fluxArray, RealArray& fluxErrArray, const string& initString)
{
   XSModelFunction* funcObj = new XSCall<xsf77Call>(kyconv_);
   (*funcObj)(energyArray, params, spectrumNumber, fluxArray, fluxErrArray, initString);
   delete funcObj;
}

void C_kyrline(const double* energy, int nFlux, const double* params,
        int spectrumNumber, double* flux, double* fluxError, const char* initStr)
{
   const size_t nPar = 11;
   fModelWrapper(energy, nFlux, params, nPar, spectrumNumber, flux, fluxError,
        kyrline_);
}

void CXX_kyrline(const RealArray& energyArray, const RealArray& params,
        int spectrumNumber, RealArray& fluxArray, RealArray& fluxErrArray, const string& initString)
{
   XSModelFunction* funcObj = new XSCall<xsf77Call>(kyrline_);
   (*funcObj)(energyArray, params, spectrumNumber, fluxArray, fluxErrArray, initString);
   delete funcObj;
}

void f_laor(const float* energy, int nFlux, const float* params,
	     int spectrumNumber, float* flux, float* fluxError);

FCALLSCSUB6(f_laor,LAOR,laor,FLOATV,INT,FLOATV,INT,FLOATV,FLOATV)
FCALLSCSUB7(C_laor,DLAOR,dlaor,DOUBLEV,INT,DOUBLEV,INT,DOUBLEV,DOUBLEV,STRING)

void f_laor(const float* energy, int nFlux, const float* params,
        int spectrumNumber, float* flux, float* fluxError)
{
   const size_t nPar = 5;
   fcppModelWrapper(energy, nFlux, params, spectrumNumber, flux, fluxError,
        nPar, laor);
}

void C_laor(const double* energy, int nFlux, const double* params,
        int spectrumNumber, double* flux, double* fluxError, const char* initStr)
{
   const size_t nPar = 5;
   cppModelWrapper(energy, nFlux, params, spectrumNumber, flux, fluxError,
        initStr, nPar, laor);
}

void CXX_laor(const RealArray& energyArray, const RealArray& params,
        int spectrumNumber, RealArray& fluxArray, RealArray& fluxErrArray, const string& initString)
{
   laor(energyArray, params, spectrumNumber, fluxArray, fluxErrArray, initString);
}

void f_laor2(const float* energy, int nFlux, const float* params,
	     int spectrumNumber, float* flux, float* fluxError);

FCALLSCSUB6(f_laor2,LAOR2,laor2,FLOATV,INT,FLOATV,INT,FLOATV,FLOATV)
FCALLSCSUB7(C_laor2,DLAOR2,dlaor2,DOUBLEV,INT,DOUBLEV,INT,DOUBLEV,DOUBLEV,STRING)

void f_laor2(const float* energy, int nFlux, const float* params,
        int spectrumNumber, float* flux, float* fluxError)
{
   const size_t nPar = 7;
   fcppModelWrapper(energy, nFlux, params, spectrumNumber, flux, fluxError,
        nPar, laor2);
}

void C_laor2(const double* energy, int nFlux, const double* params,
        int spectrumNumber, double* flux, double* fluxError, const char* initStr)
{
   const size_t nPar = 7;
   cppModelWrapper(energy, nFlux, params, spectrumNumber, flux, fluxError,
        initStr, nPar, laor2);
}

void CXX_laor2(const RealArray& energyArray, const RealArray& params,
        int spectrumNumber, RealArray& fluxArray, RealArray& fluxErrArray, const string& initString)
{
   laor2(energyArray, params, spectrumNumber, fluxArray, fluxErrArray, initString);
}

void f_logpar(const float* energy, int nFlux, const float* params,
	     int spectrumNumber, float* flux, float* fluxError);

FCALLSCSUB6(f_logpar,LOGPAR,logpar,FLOATV,INT,FLOATV,INT,FLOATV,FLOATV)
FCALLSCSUB7(C_logpar,DLOGPAR,dlogpar,DOUBLEV,INT,DOUBLEV,INT,DOUBLEV,DOUBLEV,STRING)

void f_logpar(const float* energy, int nFlux, const float* params,
        int spectrumNumber, float* flux, float* fluxError)
{
   const size_t nPar = 3;
   fcppModelWrapper(energy, nFlux, params, spectrumNumber, flux, fluxError,
        nPar, logpar);
}

void C_logpar(const double* energy, int nFlux, const double* params,
        int spectrumNumber, double* flux, double* fluxError, const char* initStr)
{
   const size_t nPar = 3;
   cppModelWrapper(energy, nFlux, params, spectrumNumber, flux, fluxError,
        initStr, nPar, logpar);
}

void CXX_logpar(const RealArray& energyArray, const RealArray& params,
        int spectrumNumber, RealArray& fluxArray, RealArray& fluxErrArray, const string& initString)
{
   logpar(energyArray, params, spectrumNumber, fluxArray, fluxErrArray, initString);
}

void f_lorentzianLine(const float* energy, int nFlux, const float* params,
	     int spectrumNumber, float* flux, float* fluxError);

FCALLSCSUB6(f_lorentzianLine,LORENTZIANLINE,lorentzianline,FLOATV,INT,FLOATV,INT,FLOATV,FLOATV)
FCALLSCSUB7(C_lorentzianLine,DLORENTZIANLINE,dlorentzianline,DOUBLEV,INT,DOUBLEV,INT,DOUBLEV,DOUBLEV,STRING)

void f_lorentzianLine(const float* energy, int nFlux, const float* params,
        int spectrumNumber, float* flux, float* fluxError)
{
   const size_t nPar = 2;
   fcppModelWrapper(energy, nFlux, params, spectrumNumber, flux, fluxError,
        nPar, lorentzianLine);
}

void C_lorentzianLine(const double* energy, int nFlux, const double* params,
        int spectrumNumber, double* flux, double* fluxError, const char* initStr)
{
   const size_t nPar = 2;
   cppModelWrapper(energy, nFlux, params, spectrumNumber, flux, fluxError,
        initStr, nPar, lorentzianLine);
}

void f_lorentz(const float* energy, int nFlux, const float* params,
	     int spectrumNumber, float* flux, float* fluxError);

FCALLSCSUB6(f_lorentz,LORENTZ,lorentz,FLOATV,INT,FLOATV,INT,FLOATV,FLOATV)
FCALLSCSUB7(C_lorentz,DLORENTZ,dlorentz,DOUBLEV,INT,DOUBLEV,INT,DOUBLEV,DOUBLEV,STRING)

void f_lorentz(const float* energy, int nFlux, const float* params,
        int spectrumNumber, float* flux, float* fluxError)
{
   const size_t nPar = 2;
   fcppModelWrapper(energy, nFlux, params, spectrumNumber, flux, fluxError,
        nPar, lorentzianLine);
}

void C_lorentz(const double* energy, int nFlux, const double* params,
        int spectrumNumber, double* flux, double* fluxError, const char* initStr)
{
   const size_t nPar = 2;
   cppModelWrapper(energy, nFlux, params, spectrumNumber, flux, fluxError,
        initStr, nPar, lorentzianLine);
}

void CXX_lorentz(const RealArray& energyArray, const RealArray& params,
        int spectrumNumber, RealArray& fluxArray, RealArray& fluxErrArray, const string& initString)
{
   lorentzianLine(energyArray, params, spectrumNumber, fluxArray, fluxErrArray, initString);
}

void f_meka(const float* energy, int nFlux, const float* params,
	     int spectrumNumber, float* flux, float* fluxError);

FCALLSCSUB6(f_meka,MEKA,meka,FLOATV,INT,FLOATV,INT,FLOATV,FLOATV)
FCALLSCSUB7(C_meka,DMEKA,dmeka,DOUBLEV,INT,DOUBLEV,INT,DOUBLEV,DOUBLEV,STRING)

void f_meka(const float* energy, int nFlux, const float* params,
        int spectrumNumber, float* flux, float* fluxError)
{
   const size_t nPar = 4;
   fcppModelWrapper(energy, nFlux, params, spectrumNumber, flux, fluxError,
        nPar, meka);
}

void C_meka(const double* energy, int nFlux, const double* params,
        int spectrumNumber, double* flux, double* fluxError, const char* initStr)
{
   const size_t nPar = 4;
   cppModelWrapper(energy, nFlux, params, spectrumNumber, flux, fluxError,
        initStr, nPar, meka);
}

void CXX_meka(const RealArray& energyArray, const RealArray& params,
        int spectrumNumber, RealArray& fluxArray, RealArray& fluxErrArray, const string& initString)
{
   meka(energyArray, params, spectrumNumber, fluxArray, fluxErrArray, initString);
}

void f_mekal(const float* energy, int nFlux, const float* params,
	     int spectrumNumber, float* flux, float* fluxError);

FCALLSCSUB6(f_mekal,MEKAL,mekal,FLOATV,INT,FLOATV,INT,FLOATV,FLOATV)
FCALLSCSUB7(C_mekal,DMEKAL,dmekal,DOUBLEV,INT,DOUBLEV,INT,DOUBLEV,DOUBLEV,STRING)

void f_mekal(const float* energy, int nFlux, const float* params,
        int spectrumNumber, float* flux, float* fluxError)
{
   const size_t nPar = 5;
   fcppModelWrapper(energy, nFlux, params, spectrumNumber, flux, fluxError,
        nPar, mekal);
}

void C_mekal(const double* energy, int nFlux, const double* params,
        int spectrumNumber, double* flux, double* fluxError, const char* initStr)
{
   const size_t nPar = 5;
   cppModelWrapper(energy, nFlux, params, spectrumNumber, flux, fluxError,
        initStr, nPar, mekal);
}

void CXX_mekal(const RealArray& energyArray, const RealArray& params,
        int spectrumNumber, RealArray& fluxArray, RealArray& fluxErrArray, const string& initString)
{
   mekal(energyArray, params, spectrumNumber, fluxArray, fluxErrArray, initString);
}

void f_xsmkcf(const float* energy, int nFlux, const float* params,
	     int spectrumNumber, float* flux, float* fluxError);

FCALLSCSUB6(f_xsmkcf,XSMKCF,xsmkcf,FLOATV,INT,FLOATV,INT,FLOATV,FLOATV)
FCALLSCSUB7(C_xsmkcf,DXSMKCF,dxsmkcf,DOUBLEV,INT,DOUBLEV,INT,DOUBLEV,DOUBLEV,STRING)

void f_xsmkcf(const float* energy, int nFlux, const float* params,
        int spectrumNumber, float* flux, float* fluxError)
{
   const size_t nPar = 5;
   fcppModelWrapper(energy, nFlux, params, spectrumNumber, flux, fluxError,
        nPar, xsmkcf);
}

void C_xsmkcf(const double* energy, int nFlux, const double* params,
        int spectrumNumber, double* flux, double* fluxError, const char* initStr)
{
   const size_t nPar = 5;
   cppModelWrapper(energy, nFlux, params, spectrumNumber, flux, fluxError,
        initStr, nPar, xsmkcf);
}

void f_mkcflow(const float* energy, int nFlux, const float* params,
	     int spectrumNumber, float* flux, float* fluxError);

FCALLSCSUB6(f_mkcflow,MKCFLOW,mkcflow,FLOATV,INT,FLOATV,INT,FLOATV,FLOATV)
FCALLSCSUB7(C_mkcflow,DMKCFLOW,dmkcflow,DOUBLEV,INT,DOUBLEV,INT,DOUBLEV,DOUBLEV,STRING)

void f_mkcflow(const float* energy, int nFlux, const float* params,
        int spectrumNumber, float* flux, float* fluxError)
{
   const size_t nPar = 5;
   fcppModelWrapper(energy, nFlux, params, spectrumNumber, flux, fluxError,
        nPar, xsmkcf);
}

void C_mkcflow(const double* energy, int nFlux, const double* params,
        int spectrumNumber, double* flux, double* fluxError, const char* initStr)
{
   const size_t nPar = 5;
   cppModelWrapper(energy, nFlux, params, spectrumNumber, flux, fluxError,
        initStr, nPar, xsmkcf);
}

void CXX_mkcflow(const RealArray& energyArray, const RealArray& params,
        int spectrumNumber, RealArray& fluxArray, RealArray& fluxErrArray, const string& initString)
{
   xsmkcf(energyArray, params, spectrumNumber, fluxArray, fluxErrArray, initString);
}

void f_nei(const float* energy, int nFlux, const float* params,
	     int spectrumNumber, float* flux, float* fluxError);

FCALLSCSUB6(f_nei,NEI,nei,FLOATV,INT,FLOATV,INT,FLOATV,FLOATV)
FCALLSCSUB7(C_nei,DNEI,dnei,DOUBLEV,INT,DOUBLEV,INT,DOUBLEV,DOUBLEV,STRING)

void f_nei(const float* energy, int nFlux, const float* params,
        int spectrumNumber, float* flux, float* fluxError)
{
   const size_t nPar = 4;
   fcppModelWrapper(energy, nFlux, params, spectrumNumber, flux, fluxError,
        nPar, nei);
}

void C_nei(const double* energy, int nFlux, const double* params,
        int spectrumNumber, double* flux, double* fluxError, const char* initStr)
{
   const size_t nPar = 4;
   cppModelWrapper(energy, nFlux, params, spectrumNumber, flux, fluxError,
        initStr, nPar, nei);
}

void CXX_nei(const RealArray& energyArray, const RealArray& params,
        int spectrumNumber, RealArray& fluxArray, RealArray& fluxErrArray, const string& initString)
{
   nei(energyArray, params, spectrumNumber, fluxArray, fluxErrArray, initString);
}

void f_nlapec(const float* energy, int nFlux, const float* params,
	     int spectrumNumber, float* flux, float* fluxError);

FCALLSCSUB6(f_nlapec,NLAPEC,nlapec,FLOATV,INT,FLOATV,INT,FLOATV,FLOATV)
FCALLSCSUB7(C_nlapec,DNLAPEC,dnlapec,DOUBLEV,INT,DOUBLEV,INT,DOUBLEV,DOUBLEV,STRING)

void f_nlapec(const float* energy, int nFlux, const float* params,
        int spectrumNumber, float* flux, float* fluxError)
{
   const size_t nPar = 3;
   fcppModelWrapper(energy, nFlux, params, spectrumNumber, flux, fluxError,
        nPar, nlapec);
}

void C_nlapec(const double* energy, int nFlux, const double* params,
        int spectrumNumber, double* flux, double* fluxError, const char* initStr)
{
   const size_t nPar = 3;
   cppModelWrapper(energy, nFlux, params, spectrumNumber, flux, fluxError,
        initStr, nPar, nlapec);
}

void CXX_nlapec(const RealArray& energyArray, const RealArray& params,
        int spectrumNumber, RealArray& fluxArray, RealArray& fluxErrArray, const string& initString)
{
   nlapec(energyArray, params, spectrumNumber, fluxArray, fluxErrArray, initString);
}

void f_npshock(const float* energy, int nFlux, const float* params,
	     int spectrumNumber, float* flux, float* fluxError);

FCALLSCSUB6(f_npshock,NPSHOCK,npshock,FLOATV,INT,FLOATV,INT,FLOATV,FLOATV)
FCALLSCSUB7(C_npshock,DNPSHOCK,dnpshock,DOUBLEV,INT,DOUBLEV,INT,DOUBLEV,DOUBLEV,STRING)

void f_npshock(const float* energy, int nFlux, const float* params,
        int spectrumNumber, float* flux, float* fluxError)
{
   const size_t nPar = 6;
   fcppModelWrapper(energy, nFlux, params, spectrumNumber, flux, fluxError,
        nPar, npshock);
}

void C_npshock(const double* energy, int nFlux, const double* params,
        int spectrumNumber, double* flux, double* fluxError, const char* initStr)
{
   const size_t nPar = 6;
   cppModelWrapper(energy, nFlux, params, spectrumNumber, flux, fluxError,
        initStr, nPar, npshock);
}

void CXX_npshock(const RealArray& energyArray, const RealArray& params,
        int spectrumNumber, RealArray& fluxArray, RealArray& fluxErrArray, const string& initString)
{
   npshock(energyArray, params, spectrumNumber, fluxArray, fluxErrArray, initString);
}

void C_nsa(const double* energy, int nFlux, const double* params,
        int spectrumNumber, double* flux, double* fluxError, const char* initStr)
{
   const size_t nPar = 4;
   fModelWrapper(energy, nFlux, params, nPar, spectrumNumber, flux, fluxError,
        nsa_);
}

void CXX_nsa(const RealArray& energyArray, const RealArray& params,
        int spectrumNumber, RealArray& fluxArray, RealArray& fluxErrArray, const string& initString)
{
   XSModelFunction* funcObj = new XSCall<xsf77Call>(nsa_);
   (*funcObj)(energyArray, params, spectrumNumber, fluxArray, fluxErrArray, initString);
   delete funcObj;
}

void C_nsagrav(const double* energy, int nFlux, const double* params,
        int spectrumNumber, double* flux, double* fluxError, const char* initStr)
{
   const size_t nPar = 3;
   fModelWrapper(energy, nFlux, params, nPar, spectrumNumber, flux, fluxError,
        nsagrav_);
}

void CXX_nsagrav(const RealArray& energyArray, const RealArray& params,
        int spectrumNumber, RealArray& fluxArray, RealArray& fluxErrArray, const string& initString)
{
   XSModelFunction* funcObj = new XSCall<xsf77Call>(nsagrav_);
   (*funcObj)(energyArray, params, spectrumNumber, fluxArray, fluxErrArray, initString);
   delete funcObj;
}

void C_nsatmos(const double* energy, int nFlux, const double* params,
        int spectrumNumber, double* flux, double* fluxError, const char* initStr)
{
   const size_t nPar = 4;
   fModelWrapper(energy, nFlux, params, nPar, spectrumNumber, flux, fluxError,
        nsatmos_);
}

void CXX_nsatmos(const RealArray& energyArray, const RealArray& params,
        int spectrumNumber, RealArray& fluxArray, RealArray& fluxErrArray, const string& initString)
{
   XSModelFunction* funcObj = new XSCall<xsf77Call>(nsatmos_);
   (*funcObj)(energyArray, params, spectrumNumber, fluxArray, fluxErrArray, initString);
   delete funcObj;
}

void f_nsmax(const float* energy, int nFlux, const float* params,
	     int spectrumNumber, float* flux, float* fluxError);

FCALLSCSUB6(f_nsmax,NSMAX,nsmax,FLOATV,INT,FLOATV,INT,FLOATV,FLOATV)
FCALLSCSUB7(C_nsmax,DNSMAX,dnsmax,DOUBLEV,INT,DOUBLEV,INT,DOUBLEV,DOUBLEV,STRING)

void f_nsmax(const float* energy, int nFlux, const float* params,
        int spectrumNumber, float* flux, float* fluxError)
{
   const size_t nPar = 3;
   fcppModelWrapper(energy, nFlux, params, spectrumNumber, flux, fluxError,
        nPar, nsmax);
}

void C_nsmax(const double* energy, int nFlux, const double* params,
        int spectrumNumber, double* flux, double* fluxError, const char* initStr)
{
   const size_t nPar = 3;
   cppModelWrapper(energy, nFlux, params, spectrumNumber, flux, fluxError,
        initStr, nPar, nsmax);
}

void CXX_nsmax(const RealArray& energyArray, const RealArray& params,
        int spectrumNumber, RealArray& fluxArray, RealArray& fluxErrArray, const string& initString)
{
   nsmax(energyArray, params, spectrumNumber, fluxArray, fluxErrArray, initString);
}

void f_nsmaxg(const float* energy, int nFlux, const float* params,
	     int spectrumNumber, float* flux, float* fluxError);

FCALLSCSUB6(f_nsmaxg,NSMAXG,nsmaxg,FLOATV,INT,FLOATV,INT,FLOATV,FLOATV)
FCALLSCSUB7(C_nsmaxg,DNSMAXG,dnsmaxg,DOUBLEV,INT,DOUBLEV,INT,DOUBLEV,DOUBLEV,STRING)

void f_nsmaxg(const float* energy, int nFlux, const float* params,
        int spectrumNumber, float* flux, float* fluxError)
{
   const size_t nPar = 5;
   fcppModelWrapper(energy, nFlux, params, spectrumNumber, flux, fluxError,
        nPar, nsmaxg);
}

void C_nsmaxg(const double* energy, int nFlux, const double* params,
        int spectrumNumber, double* flux, double* fluxError, const char* initStr)
{
   const size_t nPar = 5;
   cppModelWrapper(energy, nFlux, params, spectrumNumber, flux, fluxError,
        initStr, nPar, nsmaxg);
}

void CXX_nsmaxg(const RealArray& energyArray, const RealArray& params,
        int spectrumNumber, RealArray& fluxArray, RealArray& fluxErrArray, const string& initString)
{
   nsmaxg(energyArray, params, spectrumNumber, fluxArray, fluxErrArray, initString);
}

void f_nsx(const float* energy, int nFlux, const float* params,
	     int spectrumNumber, float* flux, float* fluxError);

FCALLSCSUB6(f_nsx,NSX,nsx,FLOATV,INT,FLOATV,INT,FLOATV,FLOATV)
FCALLSCSUB7(C_nsx,DNSX,dnsx,DOUBLEV,INT,DOUBLEV,INT,DOUBLEV,DOUBLEV,STRING)

void f_nsx(const float* energy, int nFlux, const float* params,
        int spectrumNumber, float* flux, float* fluxError)
{
   const size_t nPar = 5;
   fcppModelWrapper(energy, nFlux, params, spectrumNumber, flux, fluxError,
        nPar, nsx);
}

void C_nsx(const double* energy, int nFlux, const double* params,
        int spectrumNumber, double* flux, double* fluxError, const char* initStr)
{
   const size_t nPar = 5;
   cppModelWrapper(energy, nFlux, params, spectrumNumber, flux, fluxError,
        initStr, nPar, nsx);
}

void CXX_nsx(const RealArray& energyArray, const RealArray& params,
        int spectrumNumber, RealArray& fluxArray, RealArray& fluxErrArray, const string& initString)
{
   nsx(energyArray, params, spectrumNumber, fluxArray, fluxErrArray, initString);
}

void f_xsnteea(const float* energy, int nFlux, const float* params,
	     int spectrumNumber, float* flux, float* fluxError);

FCALLSCSUB6(f_xsnteea,XSNTEEA,xsnteea,FLOATV,INT,FLOATV,INT,FLOATV,FLOATV)
FCALLSCSUB7(C_xsnteea,DXSNTEEA,dxsnteea,DOUBLEV,INT,DOUBLEV,INT,DOUBLEV,DOUBLEV,STRING)

void f_xsnteea(const float* energy, int nFlux, const float* params,
        int spectrumNumber, float* flux, float* fluxError)
{
   const size_t nPar = 15;
   fcppModelWrapper(energy, nFlux, params, spectrumNumber, flux, fluxError,
        nPar, xsnteea);
}

void C_xsnteea(const double* energy, int nFlux, const double* params,
        int spectrumNumber, double* flux, double* fluxError, const char* initStr)
{
   const size_t nPar = 15;
   cppModelWrapper(energy, nFlux, params, spectrumNumber, flux, fluxError,
        initStr, nPar, xsnteea);
}

void f_nteea(const float* energy, int nFlux, const float* params,
	     int spectrumNumber, float* flux, float* fluxError);

FCALLSCSUB6(f_nteea,NTEEA,nteea,FLOATV,INT,FLOATV,INT,FLOATV,FLOATV)
FCALLSCSUB7(C_nteea,DNTEEA,dnteea,DOUBLEV,INT,DOUBLEV,INT,DOUBLEV,DOUBLEV,STRING)

void f_nteea(const float* energy, int nFlux, const float* params,
        int spectrumNumber, float* flux, float* fluxError)
{
   const size_t nPar = 15;
   fcppModelWrapper(energy, nFlux, params, spectrumNumber, flux, fluxError,
        nPar, xsnteea);
}

void C_nteea(const double* energy, int nFlux, const double* params,
        int spectrumNumber, double* flux, double* fluxError, const char* initStr)
{
   const size_t nPar = 15;
   cppModelWrapper(energy, nFlux, params, spectrumNumber, flux, fluxError,
        initStr, nPar, xsnteea);
}

void CXX_nteea(const RealArray& energyArray, const RealArray& params,
        int spectrumNumber, RealArray& fluxArray, RealArray& fluxErrArray, const string& initString)
{
   xsnteea(energyArray, params, spectrumNumber, fluxArray, fluxErrArray, initString);
}

void f_nthcomp(const float* energy, int nFlux, const float* params,
	     int spectrumNumber, float* flux, float* fluxError);

void f_nthcomp(const float* energy, int nFlux, const float* params,
        int spectrumNumber, float* flux, float* fluxError)
{
   const size_t nPar = 5;
   fcppModelWrapper(energy, nFlux, params, spectrumNumber, flux, fluxError,
        nPar, nthcomp);
}

void C_nthcomp(const double* energy, int nFlux, const double* params,
        int spectrumNumber, double* flux, double* fluxError, const char* initStr)
{
   const size_t nPar = 5;
   cppModelWrapper(energy, nFlux, params, spectrumNumber, flux, fluxError,
        initStr, nPar, nthcomp);
}

void f_nthComp(const float* energy, int nFlux, const float* params,
	     int spectrumNumber, float* flux, float* fluxError);

FCALLSCSUB6(f_nthComp,NTHCOMP,nthcomp,FLOATV,INT,FLOATV,INT,FLOATV,FLOATV)
FCALLSCSUB7(C_nthComp,DNTHCOMP,dnthcomp,DOUBLEV,INT,DOUBLEV,INT,DOUBLEV,DOUBLEV,STRING)

void f_nthComp(const float* energy, int nFlux, const float* params,
        int spectrumNumber, float* flux, float* fluxError)
{
   const size_t nPar = 5;
   fcppModelWrapper(energy, nFlux, params, spectrumNumber, flux, fluxError,
        nPar, nthcomp);
}

void C_nthComp(const double* energy, int nFlux, const double* params,
        int spectrumNumber, double* flux, double* fluxError, const char* initStr)
{
   const size_t nPar = 5;
   cppModelWrapper(energy, nFlux, params, spectrumNumber, flux, fluxError,
        initStr, nPar, nthcomp);
}

void CXX_nthComp(const RealArray& energyArray, const RealArray& params,
        int spectrumNumber, RealArray& fluxArray, RealArray& fluxErrArray, const string& initString)
{
   nthcomp(energyArray, params, spectrumNumber, fluxArray, fluxErrArray, initString);
}

void C_optxagn(const double* energy, int nFlux, const double* params,
        int spectrumNumber, double* flux, double* fluxError, const char* initStr)
{
   const size_t nPar = 13;
   fModelWrapper(energy, nFlux, params, nPar, spectrumNumber, flux, fluxError,
        optxagn_);
}

void CXX_optxagn(const RealArray& energyArray, const RealArray& params,
        int spectrumNumber, RealArray& fluxArray, RealArray& fluxErrArray, const string& initString)
{
   XSModelFunction* funcObj = new XSCall<xsf77Call>(optxagn_);
   (*funcObj)(energyArray, params, spectrumNumber, fluxArray, fluxErrArray, initString);
   delete funcObj;
}

void C_optxagnf(const double* energy, int nFlux, const double* params,
        int spectrumNumber, double* flux, double* fluxError, const char* initStr)
{
   const size_t nPar = 11;
   fModelWrapper(energy, nFlux, params, nPar, spectrumNumber, flux, fluxError,
        optxagnf_);
}

void CXX_optxagnf(const RealArray& energyArray, const RealArray& params,
        int spectrumNumber, RealArray& fluxArray, RealArray& fluxErrArray, const string& initString)
{
   XSModelFunction* funcObj = new XSCall<xsf77Call>(optxagnf_);
   (*funcObj)(energyArray, params, spectrumNumber, fluxArray, fluxErrArray, initString);
   delete funcObj;
}

void f_pegpwrlw(const float* energy, int nFlux, const float* params,
	     int spectrumNumber, float* flux, float* fluxError);

FCALLSCSUB6(f_pegpwrlw,PEGPWRLW,pegpwrlw,FLOATV,INT,FLOATV,INT,FLOATV,FLOATV)
FCALLSCSUB7(C_pegpwrlw,DPEGPWRLW,dpegpwrlw,DOUBLEV,INT,DOUBLEV,INT,DOUBLEV,DOUBLEV,STRING)

void f_pegpwrlw(const float* energy, int nFlux, const float* params,
        int spectrumNumber, float* flux, float* fluxError)
{
   xspegp_(energy, nFlux, params, spectrumNumber, flux, fluxError);
}

void C_pegpwrlw(const double* energy, int nFlux, const double* params,
        int spectrumNumber, double* flux, double* fluxError, const char* initStr)
{
   const size_t nPar = 3;
   fModelWrapper(energy, nFlux, params, nPar, spectrumNumber, flux, fluxError,
        xspegp_);
}

void CXX_pegpwrlw(const RealArray& energyArray, const RealArray& params,
        int spectrumNumber, RealArray& fluxArray, RealArray& fluxErrArray, const string& initString)
{
   XSModelFunction* funcObj = new XSCall<xsf77Call>(xspegp_);
   (*funcObj)(energyArray, params, spectrumNumber, fluxArray, fluxErrArray, initString);
   delete funcObj;
}

void C_pexmon(const double* energy, int nFlux, const double* params,
        int spectrumNumber, double* flux, double* fluxError, const char* initStr)
{
   const size_t nPar = 7;
   fModelWrapper(energy, nFlux, params, nPar, spectrumNumber, flux, fluxError,
        pexmon_);
}

void CXX_pexmon(const RealArray& energyArray, const RealArray& params,
        int spectrumNumber, RealArray& fluxArray, RealArray& fluxErrArray, const string& initString)
{
   XSModelFunction* funcObj = new XSCall<xsf77Call>(pexmon_);
   (*funcObj)(energyArray, params, spectrumNumber, fluxArray, fluxErrArray, initString);
   delete funcObj;
}

void f_xspexrav(const float* energy, int nFlux, const float* params,
	     int spectrumNumber, float* flux, float* fluxError);

FCALLSCSUB6(f_xspexrav,XSPEXRAV,xspexrav,FLOATV,INT,FLOATV,INT,FLOATV,FLOATV)
FCALLSCSUB7(C_xspexrav,DXSPEXRAV,dxspexrav,DOUBLEV,INT,DOUBLEV,INT,DOUBLEV,DOUBLEV,STRING)

void f_xspexrav(const float* energy, int nFlux, const float* params,
        int spectrumNumber, float* flux, float* fluxError)
{
   const size_t nPar = 7;
   fcppModelWrapper(energy, nFlux, params, spectrumNumber, flux, fluxError,
        nPar, xspexrav);
}

void C_xspexrav(const double* energy, int nFlux, const double* params,
        int spectrumNumber, double* flux, double* fluxError, const char* initStr)
{
   const size_t nPar = 7;
   cppModelWrapper(energy, nFlux, params, spectrumNumber, flux, fluxError,
        initStr, nPar, xspexrav);
}

void f_pexrav(const float* energy, int nFlux, const float* params,
	     int spectrumNumber, float* flux, float* fluxError);

FCALLSCSUB6(f_pexrav,PEXRAV,pexrav,FLOATV,INT,FLOATV,INT,FLOATV,FLOATV)
FCALLSCSUB7(C_pexrav,DPEXRAV,dpexrav,DOUBLEV,INT,DOUBLEV,INT,DOUBLEV,DOUBLEV,STRING)

void f_pexrav(const float* energy, int nFlux, const float* params,
        int spectrumNumber, float* flux, float* fluxError)
{
   const size_t nPar = 7;
   fcppModelWrapper(energy, nFlux, params, spectrumNumber, flux, fluxError,
        nPar, xspexrav);
}

void C_pexrav(const double* energy, int nFlux, const double* params,
        int spectrumNumber, double* flux, double* fluxError, const char* initStr)
{
   const size_t nPar = 7;
   cppModelWrapper(energy, nFlux, params, spectrumNumber, flux, fluxError,
        initStr, nPar, xspexrav);
}

void CXX_pexrav(const RealArray& energyArray, const RealArray& params,
        int spectrumNumber, RealArray& fluxArray, RealArray& fluxErrArray, const string& initString)
{
   xspexrav(energyArray, params, spectrumNumber, fluxArray, fluxErrArray, initString);
}

void f_xspexriv(const float* energy, int nFlux, const float* params,
	     int spectrumNumber, float* flux, float* fluxError);

FCALLSCSUB6(f_xspexriv,XSPEXRIV,xspexriv,FLOATV,INT,FLOATV,INT,FLOATV,FLOATV)
FCALLSCSUB7(C_xspexriv,DXSPEXRIV,dxspexriv,DOUBLEV,INT,DOUBLEV,INT,DOUBLEV,DOUBLEV,STRING)

void f_xspexriv(const float* energy, int nFlux, const float* params,
        int spectrumNumber, float* flux, float* fluxError)
{
   const size_t nPar = 9;
   fcppModelWrapper(energy, nFlux, params, spectrumNumber, flux, fluxError,
        nPar, xspexriv);
}

void C_xspexriv(const double* energy, int nFlux, const double* params,
        int spectrumNumber, double* flux, double* fluxError, const char* initStr)
{
   const size_t nPar = 9;
   cppModelWrapper(energy, nFlux, params, spectrumNumber, flux, fluxError,
        initStr, nPar, xspexriv);
}

void f_pexriv(const float* energy, int nFlux, const float* params,
	     int spectrumNumber, float* flux, float* fluxError);

FCALLSCSUB6(f_pexriv,PEXRIV,pexriv,FLOATV,INT,FLOATV,INT,FLOATV,FLOATV)
FCALLSCSUB7(C_pexriv,DPEXRIV,dpexriv,DOUBLEV,INT,DOUBLEV,INT,DOUBLEV,DOUBLEV,STRING)

void f_pexriv(const float* energy, int nFlux, const float* params,
        int spectrumNumber, float* flux, float* fluxError)
{
   const size_t nPar = 9;
   fcppModelWrapper(energy, nFlux, params, spectrumNumber, flux, fluxError,
        nPar, xspexriv);
}

void C_pexriv(const double* energy, int nFlux, const double* params,
        int spectrumNumber, double* flux, double* fluxError, const char* initStr)
{
   const size_t nPar = 9;
   cppModelWrapper(energy, nFlux, params, spectrumNumber, flux, fluxError,
        initStr, nPar, xspexriv);
}

void CXX_pexriv(const RealArray& energyArray, const RealArray& params,
        int spectrumNumber, RealArray& fluxArray, RealArray& fluxErrArray, const string& initString)
{
   xspexriv(energyArray, params, spectrumNumber, fluxArray, fluxErrArray, initString);
}

void f_plcabs(const float* energy, int nFlux, const float* params,
	     int spectrumNumber, float* flux, float* fluxError);

FCALLSCSUB6(f_plcabs,PLCABS,plcabs,FLOATV,INT,FLOATV,INT,FLOATV,FLOATV)
FCALLSCSUB7(C_plcabs,DPLCABS,dplcabs,DOUBLEV,INT,DOUBLEV,INT,DOUBLEV,DOUBLEV,STRING)

void f_plcabs(const float* energy, int nFlux, const float* params,
        int spectrumNumber, float* flux, float* fluxError)
{
   xsp1tr_(energy, nFlux, params, spectrumNumber, flux, fluxError);
}

void C_plcabs(const double* energy, int nFlux, const double* params,
        int spectrumNumber, double* flux, double* fluxError, const char* initStr)
{
   const size_t nPar = 10;
   fModelWrapper(energy, nFlux, params, nPar, spectrumNumber, flux, fluxError,
        xsp1tr_);
}

void CXX_plcabs(const RealArray& energyArray, const RealArray& params,
        int spectrumNumber, RealArray& fluxArray, RealArray& fluxErrArray, const string& initString)
{
   XSModelFunction* funcObj = new XSCall<xsf77Call>(xsp1tr_);
   (*funcObj)(energyArray, params, spectrumNumber, fluxArray, fluxErrArray, initString);
   delete funcObj;
}

void f_powerLaw(const float* energy, int nFlux, const float* params,
	     int spectrumNumber, float* flux, float* fluxError);

FCALLSCSUB6(f_powerLaw,XSPWLW,xspwlw,FLOATV,INT,FLOATV,INT,FLOATV,FLOATV)
FCALLSCSUB7(C_powerLaw,DXSPWLW,dxspwlw,DOUBLEV,INT,DOUBLEV,INT,DOUBLEV,DOUBLEV,STRING)

void f_powerLaw(const float* energy, int nFlux, const float* params,
        int spectrumNumber, float* flux, float* fluxError)
{
   const size_t nPar = 1;
   fcppModelWrapper(energy, nFlux, params, spectrumNumber, flux, fluxError,
        nPar, powerLaw);
}

void C_powerLaw(const double* energy, int nFlux, const double* params,
        int spectrumNumber, double* flux, double* fluxError, const char* initStr)
{
   const size_t nPar = 1;
   cppModelWrapper(energy, nFlux, params, spectrumNumber, flux, fluxError,
        initStr, nPar, powerLaw);
}

void f_powerlaw(const float* energy, int nFlux, const float* params,
	     int spectrumNumber, float* flux, float* fluxError);

FCALLSCSUB6(f_powerlaw,POWERLAW,powerlaw,FLOATV,INT,FLOATV,INT,FLOATV,FLOATV)
FCALLSCSUB7(C_powerlaw,DPOWERLAW,dpowerlaw,DOUBLEV,INT,DOUBLEV,INT,DOUBLEV,DOUBLEV,STRING)

void f_powerlaw(const float* energy, int nFlux, const float* params,
        int spectrumNumber, float* flux, float* fluxError)
{
   const size_t nPar = 1;
   fcppModelWrapper(energy, nFlux, params, spectrumNumber, flux, fluxError,
        nPar, powerLaw);
}

void C_powerlaw(const double* energy, int nFlux, const double* params,
        int spectrumNumber, double* flux, double* fluxError, const char* initStr)
{
   const size_t nPar = 1;
   cppModelWrapper(energy, nFlux, params, spectrumNumber, flux, fluxError,
        initStr, nPar, powerLaw);
}

void CXX_powerlaw(const RealArray& energyArray, const RealArray& params,
        int spectrumNumber, RealArray& fluxArray, RealArray& fluxErrArray, const string& initString)
{
   powerLaw(energyArray, params, spectrumNumber, fluxArray, fluxErrArray, initString);
}

void f_posm(const float* energy, int nFlux, const float* params,
	     int spectrumNumber, float* flux, float* fluxError);

FCALLSCSUB6(f_posm,POSM,posm,FLOATV,INT,FLOATV,INT,FLOATV,FLOATV)
FCALLSCSUB7(C_posm,DPOSM,dposm,DOUBLEV,INT,DOUBLEV,INT,DOUBLEV,DOUBLEV,STRING)

void f_posm(const float* energy, int nFlux, const float* params,
        int spectrumNumber, float* flux, float* fluxError)
{
   xsposm_(energy, nFlux, params, spectrumNumber, flux, fluxError);
}

void C_posm(const double* energy, int nFlux, const double* params,
        int spectrumNumber, double* flux, double* fluxError, const char* initStr)
{
   const size_t nPar = 0;
   fModelWrapper(energy, nFlux, params, nPar, spectrumNumber, flux, fluxError,
        xsposm_);
}

void CXX_posm(const RealArray& energyArray, const RealArray& params,
        int spectrumNumber, RealArray& fluxArray, RealArray& fluxErrArray, const string& initString)
{
   XSModelFunction* funcObj = new XSCall<xsf77Call>(xsposm_);
   (*funcObj)(energyArray, params, spectrumNumber, fluxArray, fluxErrArray, initString);
   delete funcObj;
}

void f_pshock(const float* energy, int nFlux, const float* params,
	     int spectrumNumber, float* flux, float* fluxError);

FCALLSCSUB6(f_pshock,PSHOCK,pshock,FLOATV,INT,FLOATV,INT,FLOATV,FLOATV)
FCALLSCSUB7(C_pshock,DPSHOCK,dpshock,DOUBLEV,INT,DOUBLEV,INT,DOUBLEV,DOUBLEV,STRING)

void f_pshock(const float* energy, int nFlux, const float* params,
        int spectrumNumber, float* flux, float* fluxError)
{
   const size_t nPar = 5;
   fcppModelWrapper(energy, nFlux, params, spectrumNumber, flux, fluxError,
        nPar, pshock);
}

void C_pshock(const double* energy, int nFlux, const double* params,
        int spectrumNumber, double* flux, double* fluxError, const char* initStr)
{
   const size_t nPar = 5;
   cppModelWrapper(energy, nFlux, params, spectrumNumber, flux, fluxError,
        initStr, nPar, pshock);
}

void CXX_pshock(const RealArray& energyArray, const RealArray& params,
        int spectrumNumber, RealArray& fluxArray, RealArray& fluxErrArray, const string& initString)
{
   pshock(energyArray, params, spectrumNumber, fluxArray, fluxErrArray, initString);
}

void C_qsosed(const double* energy, int nFlux, const double* params,
        int spectrumNumber, double* flux, double* fluxError, const char* initStr)
{
   const size_t nPar = 6;
   fModelWrapper(energy, nFlux, params, nPar, spectrumNumber, flux, fluxError,
        qsosed_);
}

void CXX_qsosed(const RealArray& energyArray, const RealArray& params,
        int spectrumNumber, RealArray& fluxArray, RealArray& fluxErrArray, const string& initString)
{
   XSModelFunction* funcObj = new XSCall<xsf77Call>(qsosed_);
   (*funcObj)(energyArray, params, spectrumNumber, fluxArray, fluxErrArray, initString);
   delete funcObj;
}

void f_raysmith(const float* energy, int nFlux, const float* params,
	     int spectrumNumber, float* flux, float* fluxError);

FCALLSCSUB6(f_raysmith,RAYSMITH,raysmith,FLOATV,INT,FLOATV,INT,FLOATV,FLOATV)
FCALLSCSUB7(C_raysmith,DRAYSMITH,draysmith,DOUBLEV,INT,DOUBLEV,INT,DOUBLEV,DOUBLEV,STRING)

void f_raysmith(const float* energy, int nFlux, const float* params,
        int spectrumNumber, float* flux, float* fluxError)
{
   const size_t nPar = 3;
   fcppModelWrapper(energy, nFlux, params, spectrumNumber, flux, fluxError,
        nPar, raysmith);
}

void C_raysmith(const double* energy, int nFlux, const double* params,
        int spectrumNumber, double* flux, double* fluxError, const char* initStr)
{
   const size_t nPar = 3;
   cppModelWrapper(energy, nFlux, params, spectrumNumber, flux, fluxError,
        initStr, nPar, raysmith);
}

void f_raymond(const float* energy, int nFlux, const float* params,
	     int spectrumNumber, float* flux, float* fluxError);

FCALLSCSUB6(f_raymond,RAYMOND,raymond,FLOATV,INT,FLOATV,INT,FLOATV,FLOATV)
FCALLSCSUB7(C_raymond,DRAYMOND,draymond,DOUBLEV,INT,DOUBLEV,INT,DOUBLEV,DOUBLEV,STRING)

void f_raymond(const float* energy, int nFlux, const float* params,
        int spectrumNumber, float* flux, float* fluxError)
{
   const size_t nPar = 3;
   fcppModelWrapper(energy, nFlux, params, spectrumNumber, flux, fluxError,
        nPar, raysmith);
}

void C_raymond(const double* energy, int nFlux, const double* params,
        int spectrumNumber, double* flux, double* fluxError, const char* initStr)
{
   const size_t nPar = 3;
   cppModelWrapper(energy, nFlux, params, spectrumNumber, flux, fluxError,
        initStr, nPar, raysmith);
}

void CXX_raymond(const RealArray& energyArray, const RealArray& params,
        int spectrumNumber, RealArray& fluxArray, RealArray& fluxErrArray, const string& initString)
{
   raysmith(energyArray, params, spectrumNumber, fluxArray, fluxErrArray, initString);
}

void f_redge(const float* energy, int nFlux, const float* params,
	     int spectrumNumber, float* flux, float* fluxError);

FCALLSCSUB6(f_redge,REDGE,redge,FLOATV,INT,FLOATV,INT,FLOATV,FLOATV)
FCALLSCSUB7(C_redge,DREDGE,dredge,DOUBLEV,INT,DOUBLEV,INT,DOUBLEV,DOUBLEV,STRING)

void f_redge(const float* energy, int nFlux, const float* params,
        int spectrumNumber, float* flux, float* fluxError)
{
   xredge_(energy, nFlux, params, spectrumNumber, flux, fluxError);
}

void C_redge(const double* energy, int nFlux, const double* params,
        int spectrumNumber, double* flux, double* fluxError, const char* initStr)
{
   const size_t nPar = 2;
   fModelWrapper(energy, nFlux, params, nPar, spectrumNumber, flux, fluxError,
        xredge_);
}

void CXX_redge(const RealArray& energyArray, const RealArray& params,
        int spectrumNumber, RealArray& fluxArray, RealArray& fluxErrArray, const string& initString)
{
   XSModelFunction* funcObj = new XSCall<xsf77Call>(xredge_);
   (*funcObj)(energyArray, params, spectrumNumber, fluxArray, fluxErrArray, initString);
   delete funcObj;
}

void f_refsch(const float* energy, int nFlux, const float* params,
	     int spectrumNumber, float* flux, float* fluxError);

FCALLSCSUB6(f_refsch,REFSCH,refsch,FLOATV,INT,FLOATV,INT,FLOATV,FLOATV)
FCALLSCSUB7(C_refsch,DREFSCH,drefsch,DOUBLEV,INT,DOUBLEV,INT,DOUBLEV,DOUBLEV,STRING)

void f_refsch(const float* energy, int nFlux, const float* params,
        int spectrumNumber, float* flux, float* fluxError)
{
   xsrefsch_(energy, nFlux, params, spectrumNumber, flux, fluxError);
}

void C_refsch(const double* energy, int nFlux, const double* params,
        int spectrumNumber, double* flux, double* fluxError, const char* initStr)
{
   const size_t nPar = 13;
   fModelWrapper(energy, nFlux, params, nPar, spectrumNumber, flux, fluxError,
        xsrefsch_);
}

void CXX_refsch(const RealArray& energyArray, const RealArray& params,
        int spectrumNumber, RealArray& fluxArray, RealArray& fluxErrArray, const string& initString)
{
   XSModelFunction* funcObj = new XSCall<xsf77Call>(xsrefsch_);
   (*funcObj)(energyArray, params, spectrumNumber, fluxArray, fluxErrArray, initString);
   delete funcObj;
}

void f_rnei(const float* energy, int nFlux, const float* params,
	     int spectrumNumber, float* flux, float* fluxError);

FCALLSCSUB6(f_rnei,RNEI,rnei,FLOATV,INT,FLOATV,INT,FLOATV,FLOATV)
FCALLSCSUB7(C_rnei,DRNEI,drnei,DOUBLEV,INT,DOUBLEV,INT,DOUBLEV,DOUBLEV,STRING)

void f_rnei(const float* energy, int nFlux, const float* params,
        int spectrumNumber, float* flux, float* fluxError)
{
   const size_t nPar = 5;
   fcppModelWrapper(energy, nFlux, params, spectrumNumber, flux, fluxError,
        nPar, rnei);
}

void C_rnei(const double* energy, int nFlux, const double* params,
        int spectrumNumber, double* flux, double* fluxError, const char* initStr)
{
   const size_t nPar = 5;
   cppModelWrapper(energy, nFlux, params, spectrumNumber, flux, fluxError,
        initStr, nPar, rnei);
}

void CXX_rnei(const RealArray& energyArray, const RealArray& params,
        int spectrumNumber, RealArray& fluxArray, RealArray& fluxErrArray, const string& initString)
{
   rnei(energyArray, params, spectrumNumber, fluxArray, fluxErrArray, initString);
}

void f_sedov(const float* energy, int nFlux, const float* params,
	     int spectrumNumber, float* flux, float* fluxError);

FCALLSCSUB6(f_sedov,SEDOV,sedov,FLOATV,INT,FLOATV,INT,FLOATV,FLOATV)
FCALLSCSUB7(C_sedov,DSEDOV,dsedov,DOUBLEV,INT,DOUBLEV,INT,DOUBLEV,DOUBLEV,STRING)

void f_sedov(const float* energy, int nFlux, const float* params,
        int spectrumNumber, float* flux, float* fluxError)
{
   const size_t nPar = 5;
   fcppModelWrapper(energy, nFlux, params, spectrumNumber, flux, fluxError,
        nPar, sedov);
}

void C_sedov(const double* energy, int nFlux, const double* params,
        int spectrumNumber, double* flux, double* fluxError, const char* initStr)
{
   const size_t nPar = 5;
   cppModelWrapper(energy, nFlux, params, spectrumNumber, flux, fluxError,
        initStr, nPar, sedov);
}

void CXX_sedov(const RealArray& energyArray, const RealArray& params,
        int spectrumNumber, RealArray& fluxArray, RealArray& fluxErrArray, const string& initString)
{
   sedov(energyArray, params, spectrumNumber, fluxArray, fluxErrArray, initString);
}

void f_sirf(const float* energy, int nFlux, const float* params,
	     int spectrumNumber, float* flux, float* fluxError);

FCALLSCSUB6(f_sirf,SIRF,sirf,FLOATV,INT,FLOATV,INT,FLOATV,FLOATV)
FCALLSCSUB7(C_sirf,DSIRF,dsirf,DOUBLEV,INT,DOUBLEV,INT,DOUBLEV,DOUBLEV,STRING)

void f_sirf(const float* energy, int nFlux, const float* params,
        int spectrumNumber, float* flux, float* fluxError)
{
   const size_t nPar = 9;
   fcppModelWrapper(energy, nFlux, params, spectrumNumber, flux, fluxError,
        nPar, sirf);
}

void C_sirf(const double* energy, int nFlux, const double* params,
        int spectrumNumber, double* flux, double* fluxError, const char* initStr)
{
   const size_t nPar = 9;
   cppModelWrapper(energy, nFlux, params, spectrumNumber, flux, fluxError,
        initStr, nPar, sirf);
}

void CXX_sirf(const RealArray& energyArray, const RealArray& params,
        int spectrumNumber, RealArray& fluxArray, RealArray& fluxErrArray, const string& initString)
{
   sirf(energyArray, params, spectrumNumber, fluxArray, fluxErrArray, initString);
}

void f_slimbh(const float* energy, int nFlux, const float* params,
	     int spectrumNumber, float* flux, float* fluxError);

FCALLSCSUB6(f_slimbh,SLIMBH,slimbh,FLOATV,INT,FLOATV,INT,FLOATV,FLOATV)
FCALLSCSUB7(C_slimbh,DSLIMBH,dslimbh,DOUBLEV,INT,DOUBLEV,INT,DOUBLEV,DOUBLEV,STRING)

void f_slimbh(const float* energy, int nFlux, const float* params,
        int spectrumNumber, float* flux, float* fluxError)
{
   const size_t nPar = 9;
   cModelWrapper(energy, nFlux, params, spectrumNumber, flux, fluxError,
        nPar, slimbbmodel);
}

void C_slimbh(const double* energy, int nFlux, const double* params,
        int spectrumNumber, double* flux, double* fluxError, const char* initStr)
{
   slimbbmodel(energy, nFlux, params, spectrumNumber, flux, fluxError, initStr);
}

void CXX_slimbh(const RealArray& energyArray, const RealArray& params,
        int spectrumNumber, RealArray& fluxArray, RealArray& fluxErrArray, const string& initString)
{
   XSModelFunction* funcObj = new XSCall<xsccCall>(slimbbmodel);
   (*funcObj)(energyArray, params, spectrumNumber, fluxArray, fluxErrArray, initString);
   delete funcObj;
}

void f_smaug(const float* energy, int nFlux, const float* params,
	     int spectrumNumber, float* flux, float* fluxError);

FCALLSCSUB6(f_smaug,SMAUG,smaug,FLOATV,INT,FLOATV,INT,FLOATV,FLOATV)
FCALLSCSUB7(C_smaug,DSMAUG,dsmaug,DOUBLEV,INT,DOUBLEV,INT,DOUBLEV,DOUBLEV,STRING)

void f_smaug(const float* energy, int nFlux, const float* params,
        int spectrumNumber, float* flux, float* fluxError)
{
   const size_t nPar = 22;
   cModelWrapper(energy, nFlux, params, spectrumNumber, flux, fluxError,
        nPar, xsmaug);
}

void C_smaug(const double* energy, int nFlux, const double* params,
        int spectrumNumber, double* flux, double* fluxError, const char* initStr)
{
   xsmaug(energy, nFlux, params, spectrumNumber, flux, fluxError, initStr);
}

void CXX_smaug(const RealArray& energyArray, const RealArray& params,
        int spectrumNumber, RealArray& fluxArray, RealArray& fluxErrArray, const string& initString)
{
   XSModelFunction* funcObj = new XSCall<xsccCall>(xsmaug);
   (*funcObj)(energyArray, params, spectrumNumber, fluxArray, fluxErrArray, initString);
   delete funcObj;
}

void f_snapec(const float* energy, int nFlux, const float* params,
	     int spectrumNumber, float* flux, float* fluxError);

FCALLSCSUB6(f_snapec,SNAPEC,snapec,FLOATV,INT,FLOATV,INT,FLOATV,FLOATV)
FCALLSCSUB7(C_snapec,DSNAPEC,dsnapec,DOUBLEV,INT,DOUBLEV,INT,DOUBLEV,DOUBLEV,STRING)

void f_snapec(const float* energy, int nFlux, const float* params,
        int spectrumNumber, float* flux, float* fluxError)
{
   const size_t nPar = 6;
   fcppModelWrapper(energy, nFlux, params, spectrumNumber, flux, fluxError,
        nPar, snapec);
}

void C_snapec(const double* energy, int nFlux, const double* params,
        int spectrumNumber, double* flux, double* fluxError, const char* initStr)
{
   const size_t nPar = 6;
   cppModelWrapper(energy, nFlux, params, spectrumNumber, flux, fluxError,
        initStr, nPar, snapec);
}

void CXX_snapec(const RealArray& energyArray, const RealArray& params,
        int spectrumNumber, RealArray& fluxArray, RealArray& fluxErrArray, const string& initString)
{
   snapec(energyArray, params, spectrumNumber, fluxArray, fluxErrArray, initString);
}

void C_srcut(const double* energy, int nFlux, const double* params,
        int spectrumNumber, double* flux, double* fluxError, const char* initStr)
{
   const size_t nPar = 2;
   fModelWrapper(energy, nFlux, params, nPar, spectrumNumber, flux, fluxError,
        srcut_);
}

void CXX_srcut(const RealArray& energyArray, const RealArray& params,
        int spectrumNumber, RealArray& fluxArray, RealArray& fluxErrArray, const string& initString)
{
   XSModelFunction* funcObj = new XSCall<xsf77Call>(srcut_);
   (*funcObj)(energyArray, params, spectrumNumber, fluxArray, fluxErrArray, initString);
   delete funcObj;
}

void C_sresc(const double* energy, int nFlux, const double* params,
        int spectrumNumber, double* flux, double* fluxError, const char* initStr)
{
   const size_t nPar = 2;
   fModelWrapper(energy, nFlux, params, nPar, spectrumNumber, flux, fluxError,
        sresc_);
}

void CXX_sresc(const RealArray& energyArray, const RealArray& params,
        int spectrumNumber, RealArray& fluxArray, RealArray& fluxErrArray, const string& initString)
{
   XSModelFunction* funcObj = new XSCall<xsf77Call>(sresc_);
   (*funcObj)(energyArray, params, spectrumNumber, fluxArray, fluxErrArray, initString);
   delete funcObj;
}

void C_ssa(const double* energy, int nFlux, const double* params,
        int spectrumNumber, double* flux, double* fluxError, const char* initStr)
{
   const size_t nPar = 2;
   fModelWrapper(energy, nFlux, params, nPar, spectrumNumber, flux, fluxError,
        ssa_);
}

void CXX_ssa(const RealArray& energyArray, const RealArray& params,
        int spectrumNumber, RealArray& fluxArray, RealArray& fluxErrArray, const string& initString)
{
   XSModelFunction* funcObj = new XSCall<xsf77Call>(ssa_);
   (*funcObj)(energyArray, params, spectrumNumber, fluxArray, fluxErrArray, initString);
   delete funcObj;
}

void f_step(const float* energy, int nFlux, const float* params,
	     int spectrumNumber, float* flux, float* fluxError);

FCALLSCSUB6(f_step,STEP,step,FLOATV,INT,FLOATV,INT,FLOATV,FLOATV)
FCALLSCSUB7(C_step,DSTEP,dstep,DOUBLEV,INT,DOUBLEV,INT,DOUBLEV,DOUBLEV,STRING)

void f_step(const float* energy, int nFlux, const float* params,
        int spectrumNumber, float* flux, float* fluxError)
{
   xsstep_(energy, nFlux, params, spectrumNumber, flux, fluxError);
}

void C_step(const double* energy, int nFlux, const double* params,
        int spectrumNumber, double* flux, double* fluxError, const char* initStr)
{
   const size_t nPar = 2;
   fModelWrapper(energy, nFlux, params, nPar, spectrumNumber, flux, fluxError,
        xsstep_);
}

void CXX_step(const RealArray& energyArray, const RealArray& params,
        int spectrumNumber, RealArray& fluxArray, RealArray& fluxErrArray, const string& initString)
{
   XSModelFunction* funcObj = new XSCall<xsf77Call>(xsstep_);
   (*funcObj)(energyArray, params, spectrumNumber, fluxArray, fluxErrArray, initString);
   delete funcObj;
}

void f_tapec(const float* energy, int nFlux, const float* params,
	     int spectrumNumber, float* flux, float* fluxError);

FCALLSCSUB6(f_tapec,TAPEC,tapec,FLOATV,INT,FLOATV,INT,FLOATV,FLOATV)
FCALLSCSUB7(C_tapec,DTAPEC,dtapec,DOUBLEV,INT,DOUBLEV,INT,DOUBLEV,DOUBLEV,STRING)

void f_tapec(const float* energy, int nFlux, const float* params,
        int spectrumNumber, float* flux, float* fluxError)
{
   const size_t nPar = 4;
   fcppModelWrapper(energy, nFlux, params, spectrumNumber, flux, fluxError,
        nPar, tapec);
}

void C_tapec(const double* energy, int nFlux, const double* params,
        int spectrumNumber, double* flux, double* fluxError, const char* initStr)
{
   const size_t nPar = 4;
   cppModelWrapper(energy, nFlux, params, spectrumNumber, flux, fluxError,
        initStr, nPar, tapec);
}

void CXX_tapec(const RealArray& energyArray, const RealArray& params,
        int spectrumNumber, RealArray& fluxArray, RealArray& fluxErrArray, const string& initString)
{
   tapec(energyArray, params, spectrumNumber, fluxArray, fluxErrArray, initString);
}

void f_vapec(const float* energy, int nFlux, const float* params,
	     int spectrumNumber, float* flux, float* fluxError);

FCALLSCSUB6(f_vapec,VAPEC,vapec,FLOATV,INT,FLOATV,INT,FLOATV,FLOATV)
FCALLSCSUB7(C_vapec,DVAPEC,dvapec,DOUBLEV,INT,DOUBLEV,INT,DOUBLEV,DOUBLEV,STRING)

void f_vapec(const float* energy, int nFlux, const float* params,
        int spectrumNumber, float* flux, float* fluxError)
{
   const size_t nPar = 15;
   fcppModelWrapper(energy, nFlux, params, spectrumNumber, flux, fluxError,
        nPar, vapec);
}

void C_vapec(const double* energy, int nFlux, const double* params,
        int spectrumNumber, double* flux, double* fluxError, const char* initStr)
{
   const size_t nPar = 15;
   cppModelWrapper(energy, nFlux, params, spectrumNumber, flux, fluxError,
        initStr, nPar, vapec);
}

void CXX_vapec(const RealArray& energyArray, const RealArray& params,
        int spectrumNumber, RealArray& fluxArray, RealArray& fluxErrArray, const string& initString)
{
   vapec(energyArray, params, spectrumNumber, fluxArray, fluxErrArray, initString);
}

void f_vbremss(const float* energy, int nFlux, const float* params,
	     int spectrumNumber, float* flux, float* fluxError);

FCALLSCSUB6(f_vbremss,VBREMSS,vbremss,FLOATV,INT,FLOATV,INT,FLOATV,FLOATV)
FCALLSCSUB7(C_vbremss,DVBREMSS,dvbremss,DOUBLEV,INT,DOUBLEV,INT,DOUBLEV,DOUBLEV,STRING)

void f_vbremss(const float* energy, int nFlux, const float* params,
        int spectrumNumber, float* flux, float* fluxError)
{
   xsbrmv_(energy, nFlux, params, spectrumNumber, flux, fluxError);
}

void C_vbremss(const double* energy, int nFlux, const double* params,
        int spectrumNumber, double* flux, double* fluxError, const char* initStr)
{
   const size_t nPar = 2;
   fModelWrapper(energy, nFlux, params, nPar, spectrumNumber, flux, fluxError,
        xsbrmv_);
}

void CXX_vbremss(const RealArray& energyArray, const RealArray& params,
        int spectrumNumber, RealArray& fluxArray, RealArray& fluxErrArray, const string& initString)
{
   XSModelFunction* funcObj = new XSCall<xsf77Call>(xsbrmv_);
   (*funcObj)(energyArray, params, spectrumNumber, fluxArray, fluxErrArray, initString);
   delete funcObj;
}

void f_vcph(const float* energy, int nFlux, const float* params,
	     int spectrumNumber, float* flux, float* fluxError);

FCALLSCSUB6(f_vcph,VCPH,vcph,FLOATV,INT,FLOATV,INT,FLOATV,FLOATV)
FCALLSCSUB7(C_vcph,DVCPH,dvcph,DOUBLEV,INT,DOUBLEV,INT,DOUBLEV,DOUBLEV,STRING)

void f_vcph(const float* energy, int nFlux, const float* params,
        int spectrumNumber, float* flux, float* fluxError)
{
   const size_t nPar = 17;
   fcppModelWrapper(energy, nFlux, params, spectrumNumber, flux, fluxError,
        nPar, vcph);
}

void C_vcph(const double* energy, int nFlux, const double* params,
        int spectrumNumber, double* flux, double* fluxError, const char* initStr)
{
   const size_t nPar = 17;
   cppModelWrapper(energy, nFlux, params, spectrumNumber, flux, fluxError,
        initStr, nPar, vcph);
}

void CXX_vcph(const RealArray& energyArray, const RealArray& params,
        int spectrumNumber, RealArray& fluxArray, RealArray& fluxErrArray, const string& initString)
{
   vcph(energyArray, params, spectrumNumber, fluxArray, fluxErrArray, initString);
}

void f_vequil(const float* energy, int nFlux, const float* params,
	     int spectrumNumber, float* flux, float* fluxError);

FCALLSCSUB6(f_vequil,VEQUIL,vequil,FLOATV,INT,FLOATV,INT,FLOATV,FLOATV)
FCALLSCSUB7(C_vequil,DVEQUIL,dvequil,DOUBLEV,INT,DOUBLEV,INT,DOUBLEV,DOUBLEV,STRING)

void f_vequil(const float* energy, int nFlux, const float* params,
        int spectrumNumber, float* flux, float* fluxError)
{
   const size_t nPar = 14;
   fcppModelWrapper(energy, nFlux, params, spectrumNumber, flux, fluxError,
        nPar, vequil);
}

void C_vequil(const double* energy, int nFlux, const double* params,
        int spectrumNumber, double* flux, double* fluxError, const char* initStr)
{
   const size_t nPar = 14;
   cppModelWrapper(energy, nFlux, params, spectrumNumber, flux, fluxError,
        initStr, nPar, vequil);
}

void CXX_vequil(const RealArray& energyArray, const RealArray& params,
        int spectrumNumber, RealArray& fluxArray, RealArray& fluxErrArray, const string& initString)
{
   vequil(energyArray, params, spectrumNumber, fluxArray, fluxErrArray, initString);
}

void f_vgaussDem(const float* energy, int nFlux, const float* params,
	     int spectrumNumber, float* flux, float* fluxError);

FCALLSCSUB6(f_vgaussDem,VGAUSSDEM,vgaussdem,FLOATV,INT,FLOATV,INT,FLOATV,FLOATV)
FCALLSCSUB7(C_vgaussDem,DVGAUSSDEM,dvgaussdem,DOUBLEV,INT,DOUBLEV,INT,DOUBLEV,DOUBLEV,STRING)

void f_vgaussDem(const float* energy, int nFlux, const float* params,
        int spectrumNumber, float* flux, float* fluxError)
{
   const size_t nPar = 19;
   fcppModelWrapper(energy, nFlux, params, spectrumNumber, flux, fluxError,
        nPar, vgaussDem);
}

void C_vgaussDem(const double* energy, int nFlux, const double* params,
        int spectrumNumber, double* flux, double* fluxError, const char* initStr)
{
   const size_t nPar = 19;
   cppModelWrapper(energy, nFlux, params, spectrumNumber, flux, fluxError,
        initStr, nPar, vgaussDem);
}

void f_vgadem(const float* energy, int nFlux, const float* params,
	     int spectrumNumber, float* flux, float* fluxError);

FCALLSCSUB6(f_vgadem,VGADEM,vgadem,FLOATV,INT,FLOATV,INT,FLOATV,FLOATV)
FCALLSCSUB7(C_vgadem,DVGADEM,dvgadem,DOUBLEV,INT,DOUBLEV,INT,DOUBLEV,DOUBLEV,STRING)

void f_vgadem(const float* energy, int nFlux, const float* params,
        int spectrumNumber, float* flux, float* fluxError)
{
   const size_t nPar = 19;
   fcppModelWrapper(energy, nFlux, params, spectrumNumber, flux, fluxError,
        nPar, vgaussDem);
}

void C_vgadem(const double* energy, int nFlux, const double* params,
        int spectrumNumber, double* flux, double* fluxError, const char* initStr)
{
   const size_t nPar = 19;
   cppModelWrapper(energy, nFlux, params, spectrumNumber, flux, fluxError,
        initStr, nPar, vgaussDem);
}

void CXX_vgadem(const RealArray& energyArray, const RealArray& params,
        int spectrumNumber, RealArray& fluxArray, RealArray& fluxErrArray, const string& initString)
{
   vgaussDem(energyArray, params, spectrumNumber, fluxArray, fluxErrArray, initString);
}

void f_vgnei(const float* energy, int nFlux, const float* params,
	     int spectrumNumber, float* flux, float* fluxError);

FCALLSCSUB6(f_vgnei,VGNEI,vgnei,FLOATV,INT,FLOATV,INT,FLOATV,FLOATV)
FCALLSCSUB7(C_vgnei,DVGNEI,dvgnei,DOUBLEV,INT,DOUBLEV,INT,DOUBLEV,DOUBLEV,STRING)

void f_vgnei(const float* energy, int nFlux, const float* params,
        int spectrumNumber, float* flux, float* fluxError)
{
   const size_t nPar = 17;
   fcppModelWrapper(energy, nFlux, params, spectrumNumber, flux, fluxError,
        nPar, vgnei);
}

void C_vgnei(const double* energy, int nFlux, const double* params,
        int spectrumNumber, double* flux, double* fluxError, const char* initStr)
{
   const size_t nPar = 17;
   cppModelWrapper(energy, nFlux, params, spectrumNumber, flux, fluxError,
        initStr, nPar, vgnei);
}

void CXX_vgnei(const RealArray& energyArray, const RealArray& params,
        int spectrumNumber, RealArray& fluxArray, RealArray& fluxErrArray, const string& initString)
{
   vgnei(energyArray, params, spectrumNumber, fluxArray, fluxErrArray, initString);
}

void f_vmeka(const float* energy, int nFlux, const float* params,
	     int spectrumNumber, float* flux, float* fluxError);

FCALLSCSUB6(f_vmeka,VMEKA,vmeka,FLOATV,INT,FLOATV,INT,FLOATV,FLOATV)
FCALLSCSUB7(C_vmeka,DVMEKA,dvmeka,DOUBLEV,INT,DOUBLEV,INT,DOUBLEV,DOUBLEV,STRING)

void f_vmeka(const float* energy, int nFlux, const float* params,
        int spectrumNumber, float* flux, float* fluxError)
{
   const size_t nPar = 17;
   fcppModelWrapper(energy, nFlux, params, spectrumNumber, flux, fluxError,
        nPar, vmeka);
}

void C_vmeka(const double* energy, int nFlux, const double* params,
        int spectrumNumber, double* flux, double* fluxError, const char* initStr)
{
   const size_t nPar = 17;
   cppModelWrapper(energy, nFlux, params, spectrumNumber, flux, fluxError,
        initStr, nPar, vmeka);
}

void CXX_vmeka(const RealArray& energyArray, const RealArray& params,
        int spectrumNumber, RealArray& fluxArray, RealArray& fluxErrArray, const string& initString)
{
   vmeka(energyArray, params, spectrumNumber, fluxArray, fluxErrArray, initString);
}

void f_vmekal(const float* energy, int nFlux, const float* params,
	     int spectrumNumber, float* flux, float* fluxError);

FCALLSCSUB6(f_vmekal,VMEKAL,vmekal,FLOATV,INT,FLOATV,INT,FLOATV,FLOATV)
FCALLSCSUB7(C_vmekal,DVMEKAL,dvmekal,DOUBLEV,INT,DOUBLEV,INT,DOUBLEV,DOUBLEV,STRING)

void f_vmekal(const float* energy, int nFlux, const float* params,
        int spectrumNumber, float* flux, float* fluxError)
{
   const size_t nPar = 18;
   fcppModelWrapper(energy, nFlux, params, spectrumNumber, flux, fluxError,
        nPar, vmekal);
}

void C_vmekal(const double* energy, int nFlux, const double* params,
        int spectrumNumber, double* flux, double* fluxError, const char* initStr)
{
   const size_t nPar = 18;
   cppModelWrapper(energy, nFlux, params, spectrumNumber, flux, fluxError,
        initStr, nPar, vmekal);
}

void CXX_vmekal(const RealArray& energyArray, const RealArray& params,
        int spectrumNumber, RealArray& fluxArray, RealArray& fluxErrArray, const string& initString)
{
   vmekal(energyArray, params, spectrumNumber, fluxArray, fluxErrArray, initString);
}

void f_xsvmcf(const float* energy, int nFlux, const float* params,
	     int spectrumNumber, float* flux, float* fluxError);

FCALLSCSUB6(f_xsvmcf,XSVMCF,xsvmcf,FLOATV,INT,FLOATV,INT,FLOATV,FLOATV)
FCALLSCSUB7(C_xsvmcf,DXSVMCF,dxsvmcf,DOUBLEV,INT,DOUBLEV,INT,DOUBLEV,DOUBLEV,STRING)

void f_xsvmcf(const float* energy, int nFlux, const float* params,
        int spectrumNumber, float* flux, float* fluxError)
{
   const size_t nPar = 18;
   fcppModelWrapper(energy, nFlux, params, spectrumNumber, flux, fluxError,
        nPar, xsvmcf);
}

void C_xsvmcf(const double* energy, int nFlux, const double* params,
        int spectrumNumber, double* flux, double* fluxError, const char* initStr)
{
   const size_t nPar = 18;
   cppModelWrapper(energy, nFlux, params, spectrumNumber, flux, fluxError,
        initStr, nPar, xsvmcf);
}

void f_vmcflow(const float* energy, int nFlux, const float* params,
	     int spectrumNumber, float* flux, float* fluxError);

FCALLSCSUB6(f_vmcflow,VMCFLOW,vmcflow,FLOATV,INT,FLOATV,INT,FLOATV,FLOATV)
FCALLSCSUB7(C_vmcflow,DVMCFLOW,dvmcflow,DOUBLEV,INT,DOUBLEV,INT,DOUBLEV,DOUBLEV,STRING)

void f_vmcflow(const float* energy, int nFlux, const float* params,
        int spectrumNumber, float* flux, float* fluxError)
{
   const size_t nPar = 18;
   fcppModelWrapper(energy, nFlux, params, spectrumNumber, flux, fluxError,
        nPar, xsvmcf);
}

void C_vmcflow(const double* energy, int nFlux, const double* params,
        int spectrumNumber, double* flux, double* fluxError, const char* initStr)
{
   const size_t nPar = 18;
   cppModelWrapper(energy, nFlux, params, spectrumNumber, flux, fluxError,
        initStr, nPar, xsvmcf);
}

void CXX_vmcflow(const RealArray& energyArray, const RealArray& params,
        int spectrumNumber, RealArray& fluxArray, RealArray& fluxErrArray, const string& initString)
{
   xsvmcf(energyArray, params, spectrumNumber, fluxArray, fluxErrArray, initString);
}

void f_vnei(const float* energy, int nFlux, const float* params,
	     int spectrumNumber, float* flux, float* fluxError);

FCALLSCSUB6(f_vnei,VNEI,vnei,FLOATV,INT,FLOATV,INT,FLOATV,FLOATV)
FCALLSCSUB7(C_vnei,DVNEI,dvnei,DOUBLEV,INT,DOUBLEV,INT,DOUBLEV,DOUBLEV,STRING)

void f_vnei(const float* energy, int nFlux, const float* params,
        int spectrumNumber, float* flux, float* fluxError)
{
   const size_t nPar = 16;
   fcppModelWrapper(energy, nFlux, params, spectrumNumber, flux, fluxError,
        nPar, vnei);
}

void C_vnei(const double* energy, int nFlux, const double* params,
        int spectrumNumber, double* flux, double* fluxError, const char* initStr)
{
   const size_t nPar = 16;
   cppModelWrapper(energy, nFlux, params, spectrumNumber, flux, fluxError,
        initStr, nPar, vnei);
}

void CXX_vnei(const RealArray& energyArray, const RealArray& params,
        int spectrumNumber, RealArray& fluxArray, RealArray& fluxErrArray, const string& initString)
{
   vnei(energyArray, params, spectrumNumber, fluxArray, fluxErrArray, initString);
}

void f_vnpshock(const float* energy, int nFlux, const float* params,
	     int spectrumNumber, float* flux, float* fluxError);

FCALLSCSUB6(f_vnpshock,VNPSHOCK,vnpshock,FLOATV,INT,FLOATV,INT,FLOATV,FLOATV)
FCALLSCSUB7(C_vnpshock,DVNPSHOCK,dvnpshock,DOUBLEV,INT,DOUBLEV,INT,DOUBLEV,DOUBLEV,STRING)

void f_vnpshock(const float* energy, int nFlux, const float* params,
        int spectrumNumber, float* flux, float* fluxError)
{
   const size_t nPar = 18;
   fcppModelWrapper(energy, nFlux, params, spectrumNumber, flux, fluxError,
        nPar, vnpshock);
}

void C_vnpshock(const double* energy, int nFlux, const double* params,
        int spectrumNumber, double* flux, double* fluxError, const char* initStr)
{
   const size_t nPar = 18;
   cppModelWrapper(energy, nFlux, params, spectrumNumber, flux, fluxError,
        initStr, nPar, vnpshock);
}

void CXX_vnpshock(const RealArray& energyArray, const RealArray& params,
        int spectrumNumber, RealArray& fluxArray, RealArray& fluxErrArray, const string& initString)
{
   vnpshock(energyArray, params, spectrumNumber, fluxArray, fluxErrArray, initString);
}

void f_voigtLine(const float* energy, int nFlux, const float* params,
	     int spectrumNumber, float* flux, float* fluxError);

FCALLSCSUB6(f_voigtLine,VOIGTLINE,voigtline,FLOATV,INT,FLOATV,INT,FLOATV,FLOATV)
FCALLSCSUB7(C_voigtLine,DVOIGTLINE,dvoigtline,DOUBLEV,INT,DOUBLEV,INT,DOUBLEV,DOUBLEV,STRING)

void f_voigtLine(const float* energy, int nFlux, const float* params,
        int spectrumNumber, float* flux, float* fluxError)
{
   const size_t nPar = 3;
   fcppModelWrapper(energy, nFlux, params, spectrumNumber, flux, fluxError,
        nPar, voigtLine);
}

void C_voigtLine(const double* energy, int nFlux, const double* params,
        int spectrumNumber, double* flux, double* fluxError, const char* initStr)
{
   const size_t nPar = 3;
   cppModelWrapper(energy, nFlux, params, spectrumNumber, flux, fluxError,
        initStr, nPar, voigtLine);
}

void f_voigt(const float* energy, int nFlux, const float* params,
	     int spectrumNumber, float* flux, float* fluxError);

FCALLSCSUB6(f_voigt,VOIGT,voigt,FLOATV,INT,FLOATV,INT,FLOATV,FLOATV)
FCALLSCSUB7(C_voigt,DVOIGT,dvoigt,DOUBLEV,INT,DOUBLEV,INT,DOUBLEV,DOUBLEV,STRING)

void f_voigt(const float* energy, int nFlux, const float* params,
        int spectrumNumber, float* flux, float* fluxError)
{
   const size_t nPar = 3;
   fcppModelWrapper(energy, nFlux, params, spectrumNumber, flux, fluxError,
        nPar, voigtLine);
}

void C_voigt(const double* energy, int nFlux, const double* params,
        int spectrumNumber, double* flux, double* fluxError, const char* initStr)
{
   const size_t nPar = 3;
   cppModelWrapper(energy, nFlux, params, spectrumNumber, flux, fluxError,
        initStr, nPar, voigtLine);
}

void CXX_voigt(const RealArray& energyArray, const RealArray& params,
        int spectrumNumber, RealArray& fluxArray, RealArray& fluxErrArray, const string& initString)
{
   voigtLine(energyArray, params, spectrumNumber, fluxArray, fluxErrArray, initString);
}

void f_vpshock(const float* energy, int nFlux, const float* params,
	     int spectrumNumber, float* flux, float* fluxError);

FCALLSCSUB6(f_vpshock,VPSHOCK,vpshock,FLOATV,INT,FLOATV,INT,FLOATV,FLOATV)
FCALLSCSUB7(C_vpshock,DVPSHOCK,dvpshock,DOUBLEV,INT,DOUBLEV,INT,DOUBLEV,DOUBLEV,STRING)

void f_vpshock(const float* energy, int nFlux, const float* params,
        int spectrumNumber, float* flux, float* fluxError)
{
   const size_t nPar = 17;
   fcppModelWrapper(energy, nFlux, params, spectrumNumber, flux, fluxError,
        nPar, vpshock);
}

void C_vpshock(const double* energy, int nFlux, const double* params,
        int spectrumNumber, double* flux, double* fluxError, const char* initStr)
{
   const size_t nPar = 17;
   cppModelWrapper(energy, nFlux, params, spectrumNumber, flux, fluxError,
        initStr, nPar, vpshock);
}

void CXX_vpshock(const RealArray& energyArray, const RealArray& params,
        int spectrumNumber, RealArray& fluxArray, RealArray& fluxErrArray, const string& initString)
{
   vpshock(energyArray, params, spectrumNumber, fluxArray, fluxErrArray, initString);
}

void f_vraysmith(const float* energy, int nFlux, const float* params,
	     int spectrumNumber, float* flux, float* fluxError);

FCALLSCSUB6(f_vraysmith,VRAYSMITH,vraysmith,FLOATV,INT,FLOATV,INT,FLOATV,FLOATV)
FCALLSCSUB7(C_vraysmith,DVRAYSMITH,dvraysmith,DOUBLEV,INT,DOUBLEV,INT,DOUBLEV,DOUBLEV,STRING)

void f_vraysmith(const float* energy, int nFlux, const float* params,
        int spectrumNumber, float* flux, float* fluxError)
{
   const size_t nPar = 14;
   fcppModelWrapper(energy, nFlux, params, spectrumNumber, flux, fluxError,
        nPar, vraysmith);
}

void C_vraysmith(const double* energy, int nFlux, const double* params,
        int spectrumNumber, double* flux, double* fluxError, const char* initStr)
{
   const size_t nPar = 14;
   cppModelWrapper(energy, nFlux, params, spectrumNumber, flux, fluxError,
        initStr, nPar, vraysmith);
}

void f_vraymond(const float* energy, int nFlux, const float* params,
	     int spectrumNumber, float* flux, float* fluxError);

FCALLSCSUB6(f_vraymond,VRAYMOND,vraymond,FLOATV,INT,FLOATV,INT,FLOATV,FLOATV)
FCALLSCSUB7(C_vraymond,DVRAYMOND,dvraymond,DOUBLEV,INT,DOUBLEV,INT,DOUBLEV,DOUBLEV,STRING)

void f_vraymond(const float* energy, int nFlux, const float* params,
        int spectrumNumber, float* flux, float* fluxError)
{
   const size_t nPar = 14;
   fcppModelWrapper(energy, nFlux, params, spectrumNumber, flux, fluxError,
        nPar, vraysmith);
}

void C_vraymond(const double* energy, int nFlux, const double* params,
        int spectrumNumber, double* flux, double* fluxError, const char* initStr)
{
   const size_t nPar = 14;
   cppModelWrapper(energy, nFlux, params, spectrumNumber, flux, fluxError,
        initStr, nPar, vraysmith);
}

void CXX_vraymond(const RealArray& energyArray, const RealArray& params,
        int spectrumNumber, RealArray& fluxArray, RealArray& fluxErrArray, const string& initString)
{
   vraysmith(energyArray, params, spectrumNumber, fluxArray, fluxErrArray, initString);
}

void f_vrnei(const float* energy, int nFlux, const float* params,
	     int spectrumNumber, float* flux, float* fluxError);

FCALLSCSUB6(f_vrnei,VRNEI,vrnei,FLOATV,INT,FLOATV,INT,FLOATV,FLOATV)
FCALLSCSUB7(C_vrnei,DVRNEI,dvrnei,DOUBLEV,INT,DOUBLEV,INT,DOUBLEV,DOUBLEV,STRING)

void f_vrnei(const float* energy, int nFlux, const float* params,
        int spectrumNumber, float* flux, float* fluxError)
{
   const size_t nPar = 17;
   fcppModelWrapper(energy, nFlux, params, spectrumNumber, flux, fluxError,
        nPar, vrnei);
}

void C_vrnei(const double* energy, int nFlux, const double* params,
        int spectrumNumber, double* flux, double* fluxError, const char* initStr)
{
   const size_t nPar = 17;
   cppModelWrapper(energy, nFlux, params, spectrumNumber, flux, fluxError,
        initStr, nPar, vrnei);
}

void CXX_vrnei(const RealArray& energyArray, const RealArray& params,
        int spectrumNumber, RealArray& fluxArray, RealArray& fluxErrArray, const string& initString)
{
   vrnei(energyArray, params, spectrumNumber, fluxArray, fluxErrArray, initString);
}

void f_vsedov(const float* energy, int nFlux, const float* params,
	     int spectrumNumber, float* flux, float* fluxError);

FCALLSCSUB6(f_vsedov,VSEDOV,vsedov,FLOATV,INT,FLOATV,INT,FLOATV,FLOATV)
FCALLSCSUB7(C_vsedov,DVSEDOV,dvsedov,DOUBLEV,INT,DOUBLEV,INT,DOUBLEV,DOUBLEV,STRING)

void f_vsedov(const float* energy, int nFlux, const float* params,
        int spectrumNumber, float* flux, float* fluxError)
{
   const size_t nPar = 17;
   fcppModelWrapper(energy, nFlux, params, spectrumNumber, flux, fluxError,
        nPar, vsedov);
}

void C_vsedov(const double* energy, int nFlux, const double* params,
        int spectrumNumber, double* flux, double* fluxError, const char* initStr)
{
   const size_t nPar = 17;
   cppModelWrapper(energy, nFlux, params, spectrumNumber, flux, fluxError,
        initStr, nPar, vsedov);
}

void CXX_vsedov(const RealArray& energyArray, const RealArray& params,
        int spectrumNumber, RealArray& fluxArray, RealArray& fluxErrArray, const string& initString)
{
   vsedov(energyArray, params, spectrumNumber, fluxArray, fluxErrArray, initString);
}

void f_vtapec(const float* energy, int nFlux, const float* params,
	     int spectrumNumber, float* flux, float* fluxError);

FCALLSCSUB6(f_vtapec,VTAPEC,vtapec,FLOATV,INT,FLOATV,INT,FLOATV,FLOATV)
FCALLSCSUB7(C_vtapec,DVTAPEC,dvtapec,DOUBLEV,INT,DOUBLEV,INT,DOUBLEV,DOUBLEV,STRING)

void f_vtapec(const float* energy, int nFlux, const float* params,
        int spectrumNumber, float* flux, float* fluxError)
{
   const size_t nPar = 16;
   fcppModelWrapper(energy, nFlux, params, spectrumNumber, flux, fluxError,
        nPar, vtapec);
}

void C_vtapec(const double* energy, int nFlux, const double* params,
        int spectrumNumber, double* flux, double* fluxError, const char* initStr)
{
   const size_t nPar = 16;
   cppModelWrapper(energy, nFlux, params, spectrumNumber, flux, fluxError,
        initStr, nPar, vtapec);
}

void CXX_vtapec(const RealArray& energyArray, const RealArray& params,
        int spectrumNumber, RealArray& fluxArray, RealArray& fluxErrArray, const string& initString)
{
   vtapec(energyArray, params, spectrumNumber, fluxArray, fluxErrArray, initString);
}

void f_vvapec(const float* energy, int nFlux, const float* params,
	     int spectrumNumber, float* flux, float* fluxError);

FCALLSCSUB6(f_vvapec,VVAPEC,vvapec,FLOATV,INT,FLOATV,INT,FLOATV,FLOATV)
FCALLSCSUB7(C_vvapec,DVVAPEC,dvvapec,DOUBLEV,INT,DOUBLEV,INT,DOUBLEV,DOUBLEV,STRING)

void f_vvapec(const float* energy, int nFlux, const float* params,
        int spectrumNumber, float* flux, float* fluxError)
{
   const size_t nPar = 32;
   fcppModelWrapper(energy, nFlux, params, spectrumNumber, flux, fluxError,
        nPar, vvapec);
}

void C_vvapec(const double* energy, int nFlux, const double* params,
        int spectrumNumber, double* flux, double* fluxError, const char* initStr)
{
   const size_t nPar = 32;
   cppModelWrapper(energy, nFlux, params, spectrumNumber, flux, fluxError,
        initStr, nPar, vvapec);
}

void CXX_vvapec(const RealArray& energyArray, const RealArray& params,
        int spectrumNumber, RealArray& fluxArray, RealArray& fluxErrArray, const string& initString)
{
   vvapec(energyArray, params, spectrumNumber, fluxArray, fluxErrArray, initString);
}

void f_vvgnei(const float* energy, int nFlux, const float* params,
	     int spectrumNumber, float* flux, float* fluxError);

FCALLSCSUB6(f_vvgnei,VVGNEI,vvgnei,FLOATV,INT,FLOATV,INT,FLOATV,FLOATV)
FCALLSCSUB7(C_vvgnei,DVVGNEI,dvvgnei,DOUBLEV,INT,DOUBLEV,INT,DOUBLEV,DOUBLEV,STRING)

void f_vvgnei(const float* energy, int nFlux, const float* params,
        int spectrumNumber, float* flux, float* fluxError)
{
   const size_t nPar = 34;
   fcppModelWrapper(energy, nFlux, params, spectrumNumber, flux, fluxError,
        nPar, vvgnei);
}

void C_vvgnei(const double* energy, int nFlux, const double* params,
        int spectrumNumber, double* flux, double* fluxError, const char* initStr)
{
   const size_t nPar = 34;
   cppModelWrapper(energy, nFlux, params, spectrumNumber, flux, fluxError,
        initStr, nPar, vvgnei);
}

void CXX_vvgnei(const RealArray& energyArray, const RealArray& params,
        int spectrumNumber, RealArray& fluxArray, RealArray& fluxErrArray, const string& initString)
{
   vvgnei(energyArray, params, spectrumNumber, fluxArray, fluxErrArray, initString);
}

void f_vvnei(const float* energy, int nFlux, const float* params,
	     int spectrumNumber, float* flux, float* fluxError);

FCALLSCSUB6(f_vvnei,VVNEI,vvnei,FLOATV,INT,FLOATV,INT,FLOATV,FLOATV)
FCALLSCSUB7(C_vvnei,DVVNEI,dvvnei,DOUBLEV,INT,DOUBLEV,INT,DOUBLEV,DOUBLEV,STRING)

void f_vvnei(const float* energy, int nFlux, const float* params,
        int spectrumNumber, float* flux, float* fluxError)
{
   const size_t nPar = 33;
   fcppModelWrapper(energy, nFlux, params, spectrumNumber, flux, fluxError,
        nPar, vvnei);
}

void C_vvnei(const double* energy, int nFlux, const double* params,
        int spectrumNumber, double* flux, double* fluxError, const char* initStr)
{
   const size_t nPar = 33;
   cppModelWrapper(energy, nFlux, params, spectrumNumber, flux, fluxError,
        initStr, nPar, vvnei);
}

void CXX_vvnei(const RealArray& energyArray, const RealArray& params,
        int spectrumNumber, RealArray& fluxArray, RealArray& fluxErrArray, const string& initString)
{
   vvnei(energyArray, params, spectrumNumber, fluxArray, fluxErrArray, initString);
}

void f_vvnpshock(const float* energy, int nFlux, const float* params,
	     int spectrumNumber, float* flux, float* fluxError);

FCALLSCSUB6(f_vvnpshock,VVNPSHOCK,vvnpshock,FLOATV,INT,FLOATV,INT,FLOATV,FLOATV)
FCALLSCSUB7(C_vvnpshock,DVVNPSHOCK,dvvnpshock,DOUBLEV,INT,DOUBLEV,INT,DOUBLEV,DOUBLEV,STRING)

void f_vvnpshock(const float* energy, int nFlux, const float* params,
        int spectrumNumber, float* flux, float* fluxError)
{
   const size_t nPar = 35;
   fcppModelWrapper(energy, nFlux, params, spectrumNumber, flux, fluxError,
        nPar, vvnpshock);
}

void C_vvnpshock(const double* energy, int nFlux, const double* params,
        int spectrumNumber, double* flux, double* fluxError, const char* initStr)
{
   const size_t nPar = 35;
   cppModelWrapper(energy, nFlux, params, spectrumNumber, flux, fluxError,
        initStr, nPar, vvnpshock);
}

void CXX_vvnpshock(const RealArray& energyArray, const RealArray& params,
        int spectrumNumber, RealArray& fluxArray, RealArray& fluxErrArray, const string& initString)
{
   vvnpshock(energyArray, params, spectrumNumber, fluxArray, fluxErrArray, initString);
}

void f_vvpshock(const float* energy, int nFlux, const float* params,
	     int spectrumNumber, float* flux, float* fluxError);

FCALLSCSUB6(f_vvpshock,VVPSHOCK,vvpshock,FLOATV,INT,FLOATV,INT,FLOATV,FLOATV)
FCALLSCSUB7(C_vvpshock,DVVPSHOCK,dvvpshock,DOUBLEV,INT,DOUBLEV,INT,DOUBLEV,DOUBLEV,STRING)

void f_vvpshock(const float* energy, int nFlux, const float* params,
        int spectrumNumber, float* flux, float* fluxError)
{
   const size_t nPar = 34;
   fcppModelWrapper(energy, nFlux, params, spectrumNumber, flux, fluxError,
        nPar, vvpshock);
}

void C_vvpshock(const double* energy, int nFlux, const double* params,
        int spectrumNumber, double* flux, double* fluxError, const char* initStr)
{
   const size_t nPar = 34;
   cppModelWrapper(energy, nFlux, params, spectrumNumber, flux, fluxError,
        initStr, nPar, vvpshock);
}

void CXX_vvpshock(const RealArray& energyArray, const RealArray& params,
        int spectrumNumber, RealArray& fluxArray, RealArray& fluxErrArray, const string& initString)
{
   vvpshock(energyArray, params, spectrumNumber, fluxArray, fluxErrArray, initString);
}

void f_vvrnei(const float* energy, int nFlux, const float* params,
	     int spectrumNumber, float* flux, float* fluxError);

FCALLSCSUB6(f_vvrnei,VVRNEI,vvrnei,FLOATV,INT,FLOATV,INT,FLOATV,FLOATV)
FCALLSCSUB7(C_vvrnei,DVVRNEI,dvvrnei,DOUBLEV,INT,DOUBLEV,INT,DOUBLEV,DOUBLEV,STRING)

void f_vvrnei(const float* energy, int nFlux, const float* params,
        int spectrumNumber, float* flux, float* fluxError)
{
   const size_t nPar = 34;
   fcppModelWrapper(energy, nFlux, params, spectrumNumber, flux, fluxError,
        nPar, vvrnei);
}

void C_vvrnei(const double* energy, int nFlux, const double* params,
        int spectrumNumber, double* flux, double* fluxError, const char* initStr)
{
   const size_t nPar = 34;
   cppModelWrapper(energy, nFlux, params, spectrumNumber, flux, fluxError,
        initStr, nPar, vvrnei);
}

void CXX_vvrnei(const RealArray& energyArray, const RealArray& params,
        int spectrumNumber, RealArray& fluxArray, RealArray& fluxErrArray, const string& initString)
{
   vvrnei(energyArray, params, spectrumNumber, fluxArray, fluxErrArray, initString);
}

void f_vvsedov(const float* energy, int nFlux, const float* params,
	     int spectrumNumber, float* flux, float* fluxError);

FCALLSCSUB6(f_vvsedov,VVSEDOV,vvsedov,FLOATV,INT,FLOATV,INT,FLOATV,FLOATV)
FCALLSCSUB7(C_vvsedov,DVVSEDOV,dvvsedov,DOUBLEV,INT,DOUBLEV,INT,DOUBLEV,DOUBLEV,STRING)

void f_vvsedov(const float* energy, int nFlux, const float* params,
        int spectrumNumber, float* flux, float* fluxError)
{
   const size_t nPar = 34;
   fcppModelWrapper(energy, nFlux, params, spectrumNumber, flux, fluxError,
        nPar, vvsedov);
}

void C_vvsedov(const double* energy, int nFlux, const double* params,
        int spectrumNumber, double* flux, double* fluxError, const char* initStr)
{
   const size_t nPar = 34;
   cppModelWrapper(energy, nFlux, params, spectrumNumber, flux, fluxError,
        initStr, nPar, vvsedov);
}

void CXX_vvsedov(const RealArray& energyArray, const RealArray& params,
        int spectrumNumber, RealArray& fluxArray, RealArray& fluxErrArray, const string& initString)
{
   vvsedov(energyArray, params, spectrumNumber, fluxArray, fluxErrArray, initString);
}

void f_vvtapec(const float* energy, int nFlux, const float* params,
	     int spectrumNumber, float* flux, float* fluxError);

FCALLSCSUB6(f_vvtapec,VVTAPEC,vvtapec,FLOATV,INT,FLOATV,INT,FLOATV,FLOATV)
FCALLSCSUB7(C_vvtapec,DVVTAPEC,dvvtapec,DOUBLEV,INT,DOUBLEV,INT,DOUBLEV,DOUBLEV,STRING)

void f_vvtapec(const float* energy, int nFlux, const float* params,
        int spectrumNumber, float* flux, float* fluxError)
{
   const size_t nPar = 33;
   fcppModelWrapper(energy, nFlux, params, spectrumNumber, flux, fluxError,
        nPar, vvtapec);
}

void C_vvtapec(const double* energy, int nFlux, const double* params,
        int spectrumNumber, double* flux, double* fluxError, const char* initStr)
{
   const size_t nPar = 33;
   cppModelWrapper(energy, nFlux, params, spectrumNumber, flux, fluxError,
        initStr, nPar, vvtapec);
}

void CXX_vvtapec(const RealArray& energyArray, const RealArray& params,
        int spectrumNumber, RealArray& fluxArray, RealArray& fluxErrArray, const string& initString)
{
   vvtapec(energyArray, params, spectrumNumber, fluxArray, fluxErrArray, initString);
}

void f_zagauss(const float* energy, int nFlux, const float* params,
	     int spectrumNumber, float* flux, float* fluxError);

FCALLSCSUB6(f_zagauss,ZAGAUSS,zagauss,FLOATV,INT,FLOATV,INT,FLOATV,FLOATV)
FCALLSCSUB7(C_zagauss,DZAGAUSS,dzagauss,DOUBLEV,INT,DOUBLEV,INT,DOUBLEV,DOUBLEV,STRING)

void f_zagauss(const float* energy, int nFlux, const float* params,
        int spectrumNumber, float* flux, float* fluxError)
{
   const size_t nPar = 3;
   fcppModelWrapper(energy, nFlux, params, spectrumNumber, flux, fluxError,
        nPar, zagauss);
}

void C_zagauss(const double* energy, int nFlux, const double* params,
        int spectrumNumber, double* flux, double* fluxError, const char* initStr)
{
   const size_t nPar = 3;
   cppModelWrapper(energy, nFlux, params, spectrumNumber, flux, fluxError,
        initStr, nPar, zagauss);
}

void CXX_zagauss(const RealArray& energyArray, const RealArray& params,
        int spectrumNumber, RealArray& fluxArray, RealArray& fluxErrArray, const string& initString)
{
   zagauss(energyArray, params, spectrumNumber, fluxArray, fluxErrArray, initString);
}

void f_zbbody(const float* energy, int nFlux, const float* params,
	     int spectrumNumber, float* flux, float* fluxError);

FCALLSCSUB6(f_zbbody,ZBBODY,zbbody,FLOATV,INT,FLOATV,INT,FLOATV,FLOATV)
FCALLSCSUB7(C_zbbody,DZBBODY,dzbbody,DOUBLEV,INT,DOUBLEV,INT,DOUBLEV,DOUBLEV,STRING)

void f_zbbody(const float* energy, int nFlux, const float* params,
        int spectrumNumber, float* flux, float* fluxError)
{
   xszbod_(energy, nFlux, params, spectrumNumber, flux, fluxError);
}

void C_zbbody(const double* energy, int nFlux, const double* params,
        int spectrumNumber, double* flux, double* fluxError, const char* initStr)
{
   const size_t nPar = 2;
   fModelWrapper(energy, nFlux, params, nPar, spectrumNumber, flux, fluxError,
        xszbod_);
}

void CXX_zbbody(const RealArray& energyArray, const RealArray& params,
        int spectrumNumber, RealArray& fluxArray, RealArray& fluxErrArray, const string& initString)
{
   XSModelFunction* funcObj = new XSCall<xsf77Call>(xszbod_);
   (*funcObj)(energyArray, params, spectrumNumber, fluxArray, fluxErrArray, initString);
   delete funcObj;
}

void f_zBrokenPowerLaw(const float* energy, int nFlux, const float* params,
	     int spectrumNumber, float* flux, float* fluxError);

FCALLSCSUB6(f_zBrokenPowerLaw,ZBROKENPOWERLAW,zbrokenpowerlaw,FLOATV,INT,FLOATV,INT,FLOATV,FLOATV)
FCALLSCSUB7(C_zBrokenPowerLaw,DZBROKENPOWERLAW,dzbrokenpowerlaw,DOUBLEV,INT,DOUBLEV,INT,DOUBLEV,DOUBLEV,STRING)

void f_zBrokenPowerLaw(const float* energy, int nFlux, const float* params,
        int spectrumNumber, float* flux, float* fluxError)
{
   const size_t nPar = 4;
   fcppModelWrapper(energy, nFlux, params, spectrumNumber, flux, fluxError,
        nPar, zBrokenPowerLaw);
}

void C_zBrokenPowerLaw(const double* energy, int nFlux, const double* params,
        int spectrumNumber, double* flux, double* fluxError, const char* initStr)
{
   const size_t nPar = 4;
   cppModelWrapper(energy, nFlux, params, spectrumNumber, flux, fluxError,
        initStr, nPar, zBrokenPowerLaw);
}

void f_zbknpower(const float* energy, int nFlux, const float* params,
	     int spectrumNumber, float* flux, float* fluxError);

FCALLSCSUB6(f_zbknpower,ZBKNPOWER,zbknpower,FLOATV,INT,FLOATV,INT,FLOATV,FLOATV)
FCALLSCSUB7(C_zbknpower,DZBKNPOWER,dzbknpower,DOUBLEV,INT,DOUBLEV,INT,DOUBLEV,DOUBLEV,STRING)

void f_zbknpower(const float* energy, int nFlux, const float* params,
        int spectrumNumber, float* flux, float* fluxError)
{
   const size_t nPar = 4;
   fcppModelWrapper(energy, nFlux, params, spectrumNumber, flux, fluxError,
        nPar, zBrokenPowerLaw);
}

void C_zbknpower(const double* energy, int nFlux, const double* params,
        int spectrumNumber, double* flux, double* fluxError, const char* initStr)
{
   const size_t nPar = 4;
   cppModelWrapper(energy, nFlux, params, spectrumNumber, flux, fluxError,
        initStr, nPar, zBrokenPowerLaw);
}

void CXX_zbknpower(const RealArray& energyArray, const RealArray& params,
        int spectrumNumber, RealArray& fluxArray, RealArray& fluxErrArray, const string& initString)
{
   zBrokenPowerLaw(energyArray, params, spectrumNumber, fluxArray, fluxErrArray, initString);
}

void f_zbremss(const float* energy, int nFlux, const float* params,
	     int spectrumNumber, float* flux, float* fluxError);

FCALLSCSUB6(f_zbremss,ZBREMSS,zbremss,FLOATV,INT,FLOATV,INT,FLOATV,FLOATV)
FCALLSCSUB7(C_zbremss,DZBREMSS,dzbremss,DOUBLEV,INT,DOUBLEV,INT,DOUBLEV,DOUBLEV,STRING)

void f_zbremss(const float* energy, int nFlux, const float* params,
        int spectrumNumber, float* flux, float* fluxError)
{
   xszbrm_(energy, nFlux, params, spectrumNumber, flux, fluxError);
}

void C_zbremss(const double* energy, int nFlux, const double* params,
        int spectrumNumber, double* flux, double* fluxError, const char* initStr)
{
   const size_t nPar = 2;
   fModelWrapper(energy, nFlux, params, nPar, spectrumNumber, flux, fluxError,
        xszbrm_);
}

void CXX_zbremss(const RealArray& energyArray, const RealArray& params,
        int spectrumNumber, RealArray& fluxArray, RealArray& fluxErrArray, const string& initString)
{
   XSModelFunction* funcObj = new XSCall<xsf77Call>(xszbrm_);
   (*funcObj)(energyArray, params, spectrumNumber, fluxArray, fluxErrArray, initString);
   delete funcObj;
}

void f_zcutoffPowerLaw(const float* energy, int nFlux, const float* params,
	     int spectrumNumber, float* flux, float* fluxError);

FCALLSCSUB6(f_zcutoffPowerLaw,ZCUTOFFPOWERLAW,zcutoffpowerlaw,FLOATV,INT,FLOATV,INT,FLOATV,FLOATV)
FCALLSCSUB7(C_zcutoffPowerLaw,DZCUTOFFPOWERLAW,dzcutoffpowerlaw,DOUBLEV,INT,DOUBLEV,INT,DOUBLEV,DOUBLEV,STRING)

void f_zcutoffPowerLaw(const float* energy, int nFlux, const float* params,
        int spectrumNumber, float* flux, float* fluxError)
{
   const size_t nPar = 3;
   fcppModelWrapper(energy, nFlux, params, spectrumNumber, flux, fluxError,
        nPar, zcutoffPowerLaw);
}

void C_zcutoffPowerLaw(const double* energy, int nFlux, const double* params,
        int spectrumNumber, double* flux, double* fluxError, const char* initStr)
{
   const size_t nPar = 3;
   cppModelWrapper(energy, nFlux, params, spectrumNumber, flux, fluxError,
        initStr, nPar, zcutoffPowerLaw);
}

void f_zcutoffpl(const float* energy, int nFlux, const float* params,
	     int spectrumNumber, float* flux, float* fluxError);

FCALLSCSUB6(f_zcutoffpl,ZCUTOFFPL,zcutoffpl,FLOATV,INT,FLOATV,INT,FLOATV,FLOATV)
FCALLSCSUB7(C_zcutoffpl,DZCUTOFFPL,dzcutoffpl,DOUBLEV,INT,DOUBLEV,INT,DOUBLEV,DOUBLEV,STRING)

void f_zcutoffpl(const float* energy, int nFlux, const float* params,
        int spectrumNumber, float* flux, float* fluxError)
{
   const size_t nPar = 3;
   fcppModelWrapper(energy, nFlux, params, spectrumNumber, flux, fluxError,
        nPar, zcutoffPowerLaw);
}

void C_zcutoffpl(const double* energy, int nFlux, const double* params,
        int spectrumNumber, double* flux, double* fluxError, const char* initStr)
{
   const size_t nPar = 3;
   cppModelWrapper(energy, nFlux, params, spectrumNumber, flux, fluxError,
        initStr, nPar, zcutoffPowerLaw);
}

void CXX_zcutoffpl(const RealArray& energyArray, const RealArray& params,
        int spectrumNumber, RealArray& fluxArray, RealArray& fluxErrArray, const string& initString)
{
   zcutoffPowerLaw(energyArray, params, spectrumNumber, fluxArray, fluxErrArray, initString);
}

void f_xszgau(const float* energy, int nFlux, const float* params,
	     int spectrumNumber, float* flux, float* fluxError);

FCALLSCSUB6(f_xszgau,XSZGAU,xszgau,FLOATV,INT,FLOATV,INT,FLOATV,FLOATV)
FCALLSCSUB7(C_xszgau,DXSZGAU,dxszgau,DOUBLEV,INT,DOUBLEV,INT,DOUBLEV,DOUBLEV,STRING)

void f_xszgau(const float* energy, int nFlux, const float* params,
        int spectrumNumber, float* flux, float* fluxError)
{
   const size_t nPar = 3;
   fcppModelWrapper(energy, nFlux, params, spectrumNumber, flux, fluxError,
        nPar, xszgau);
}

void C_xszgau(const double* energy, int nFlux, const double* params,
        int spectrumNumber, double* flux, double* fluxError, const char* initStr)
{
   const size_t nPar = 3;
   cppModelWrapper(energy, nFlux, params, spectrumNumber, flux, fluxError,
        initStr, nPar, xszgau);
}

void f_zgauss(const float* energy, int nFlux, const float* params,
	     int spectrumNumber, float* flux, float* fluxError);

FCALLSCSUB6(f_zgauss,ZGAUSS,zgauss,FLOATV,INT,FLOATV,INT,FLOATV,FLOATV)
FCALLSCSUB7(C_zgauss,DZGAUSS,dzgauss,DOUBLEV,INT,DOUBLEV,INT,DOUBLEV,DOUBLEV,STRING)

void f_zgauss(const float* energy, int nFlux, const float* params,
        int spectrumNumber, float* flux, float* fluxError)
{
   const size_t nPar = 3;
   fcppModelWrapper(energy, nFlux, params, spectrumNumber, flux, fluxError,
        nPar, xszgau);
}

void C_zgauss(const double* energy, int nFlux, const double* params,
        int spectrumNumber, double* flux, double* fluxError, const char* initStr)
{
   const size_t nPar = 3;
   cppModelWrapper(energy, nFlux, params, spectrumNumber, flux, fluxError,
        initStr, nPar, xszgau);
}

void CXX_zgauss(const RealArray& energyArray, const RealArray& params,
        int spectrumNumber, RealArray& fluxArray, RealArray& fluxErrArray, const string& initString)
{
   xszgau(energyArray, params, spectrumNumber, fluxArray, fluxErrArray, initString);
}

void f_zkerrbb(const float* energy, int nFlux, const float* params,
	     int spectrumNumber, float* flux, float* fluxError);

FCALLSCSUB6(f_zkerrbb,ZKERRBB,zkerrbb,FLOATV,INT,FLOATV,INT,FLOATV,FLOATV)
FCALLSCSUB7(C_zkerrbb,DZKERRBB,dzkerrbb,DOUBLEV,INT,DOUBLEV,INT,DOUBLEV,DOUBLEV,STRING)

void f_zkerrbb(const float* energy, int nFlux, const float* params,
        int spectrumNumber, float* flux, float* fluxError)
{
   const size_t nPar = 9;
   fcppModelWrapper(energy, nFlux, params, spectrumNumber, flux, fluxError,
        nPar, zkerrbb);
}

void C_zkerrbb(const double* energy, int nFlux, const double* params,
        int spectrumNumber, double* flux, double* fluxError, const char* initStr)
{
   const size_t nPar = 9;
   cppModelWrapper(energy, nFlux, params, spectrumNumber, flux, fluxError,
        initStr, nPar, zkerrbb);
}

void CXX_zkerrbb(const RealArray& energyArray, const RealArray& params,
        int spectrumNumber, RealArray& fluxArray, RealArray& fluxErrArray, const string& initString)
{
   zkerrbb(energyArray, params, spectrumNumber, fluxArray, fluxErrArray, initString);
}

void f_zLogpar(const float* energy, int nFlux, const float* params,
	     int spectrumNumber, float* flux, float* fluxError);

void f_zLogpar(const float* energy, int nFlux, const float* params,
        int spectrumNumber, float* flux, float* fluxError)
{
   const size_t nPar = 4;
   fcppModelWrapper(energy, nFlux, params, spectrumNumber, flux, fluxError,
        nPar, zLogpar);
}

void C_zLogpar(const double* energy, int nFlux, const double* params,
        int spectrumNumber, double* flux, double* fluxError, const char* initStr)
{
   const size_t nPar = 4;
   cppModelWrapper(energy, nFlux, params, spectrumNumber, flux, fluxError,
        initStr, nPar, zLogpar);
}

void f_zlogpar(const float* energy, int nFlux, const float* params,
	     int spectrumNumber, float* flux, float* fluxError);

FCALLSCSUB6(f_zlogpar,ZLOGPAR,zlogpar,FLOATV,INT,FLOATV,INT,FLOATV,FLOATV)
FCALLSCSUB7(C_zlogpar,DZLOGPAR,dzlogpar,DOUBLEV,INT,DOUBLEV,INT,DOUBLEV,DOUBLEV,STRING)

void f_zlogpar(const float* energy, int nFlux, const float* params,
        int spectrumNumber, float* flux, float* fluxError)
{
   const size_t nPar = 4;
   fcppModelWrapper(energy, nFlux, params, spectrumNumber, flux, fluxError,
        nPar, zLogpar);
}

void C_zlogpar(const double* energy, int nFlux, const double* params,
        int spectrumNumber, double* flux, double* fluxError, const char* initStr)
{
   const size_t nPar = 4;
   cppModelWrapper(energy, nFlux, params, spectrumNumber, flux, fluxError,
        initStr, nPar, zLogpar);
}

void CXX_zlogpar(const RealArray& energyArray, const RealArray& params,
        int spectrumNumber, RealArray& fluxArray, RealArray& fluxErrArray, const string& initString)
{
   zLogpar(energyArray, params, spectrumNumber, fluxArray, fluxErrArray, initString);
}

void f_zpowerLaw(const float* energy, int nFlux, const float* params,
	     int spectrumNumber, float* flux, float* fluxError);

FCALLSCSUB6(f_zpowerLaw,XSZPLW,xszplw,FLOATV,INT,FLOATV,INT,FLOATV,FLOATV)
FCALLSCSUB7(C_zpowerLaw,DXSZPLW,dxszplw,DOUBLEV,INT,DOUBLEV,INT,DOUBLEV,DOUBLEV,STRING)

void f_zpowerLaw(const float* energy, int nFlux, const float* params,
        int spectrumNumber, float* flux, float* fluxError)
{
   const size_t nPar = 2;
   fcppModelWrapper(energy, nFlux, params, spectrumNumber, flux, fluxError,
        nPar, zpowerLaw);
}

void C_zpowerLaw(const double* energy, int nFlux, const double* params,
        int spectrumNumber, double* flux, double* fluxError, const char* initStr)
{
   const size_t nPar = 2;
   cppModelWrapper(energy, nFlux, params, spectrumNumber, flux, fluxError,
        initStr, nPar, zpowerLaw);
}

void f_zpowerlw(const float* energy, int nFlux, const float* params,
	     int spectrumNumber, float* flux, float* fluxError);

FCALLSCSUB6(f_zpowerlw,ZPOWERLW,zpowerlw,FLOATV,INT,FLOATV,INT,FLOATV,FLOATV)
FCALLSCSUB7(C_zpowerlw,DZPOWERLW,dzpowerlw,DOUBLEV,INT,DOUBLEV,INT,DOUBLEV,DOUBLEV,STRING)

void f_zpowerlw(const float* energy, int nFlux, const float* params,
        int spectrumNumber, float* flux, float* fluxError)
{
   const size_t nPar = 2;
   fcppModelWrapper(energy, nFlux, params, spectrumNumber, flux, fluxError,
        nPar, zpowerLaw);
}

void C_zpowerlw(const double* energy, int nFlux, const double* params,
        int spectrumNumber, double* flux, double* fluxError, const char* initStr)
{
   const size_t nPar = 2;
   cppModelWrapper(energy, nFlux, params, spectrumNumber, flux, fluxError,
        initStr, nPar, zpowerLaw);
}

void CXX_zpowerlw(const RealArray& energyArray, const RealArray& params,
        int spectrumNumber, RealArray& fluxArray, RealArray& fluxErrArray, const string& initString)
{
   zpowerLaw(energyArray, params, spectrumNumber, fluxArray, fluxErrArray, initString);
}

void f_xsabsori(const float* energy, int nFlux, const float* params,
	     int spectrumNumber, float* flux, float* fluxError);

FCALLSCSUB6(f_xsabsori,XSABSORI,xsabsori,FLOATV,INT,FLOATV,INT,FLOATV,FLOATV)
FCALLSCSUB7(C_xsabsori,DXSABSORI,dxsabsori,DOUBLEV,INT,DOUBLEV,INT,DOUBLEV,DOUBLEV,STRING)

void f_xsabsori(const float* energy, int nFlux, const float* params,
        int spectrumNumber, float* flux, float* fluxError)
{
   const size_t nPar = 6;
   fcppModelWrapper(energy, nFlux, params, spectrumNumber, flux, fluxError,
        nPar, xsabsori);
}

void C_xsabsori(const double* energy, int nFlux, const double* params,
        int spectrumNumber, double* flux, double* fluxError, const char* initStr)
{
   const size_t nPar = 6;
   cppModelWrapper(energy, nFlux, params, spectrumNumber, flux, fluxError,
        initStr, nPar, xsabsori);
}

void f_absori(const float* energy, int nFlux, const float* params,
	     int spectrumNumber, float* flux, float* fluxError);

FCALLSCSUB6(f_absori,ABSORI,absori,FLOATV,INT,FLOATV,INT,FLOATV,FLOATV)
FCALLSCSUB7(C_absori,DABSORI,dabsori,DOUBLEV,INT,DOUBLEV,INT,DOUBLEV,DOUBLEV,STRING)

void f_absori(const float* energy, int nFlux, const float* params,
        int spectrumNumber, float* flux, float* fluxError)
{
   const size_t nPar = 6;
   fcppModelWrapper(energy, nFlux, params, spectrumNumber, flux, fluxError,
        nPar, xsabsori);
}

void C_absori(const double* energy, int nFlux, const double* params,
        int spectrumNumber, double* flux, double* fluxError, const char* initStr)
{
   const size_t nPar = 6;
   cppModelWrapper(energy, nFlux, params, spectrumNumber, flux, fluxError,
        initStr, nPar, xsabsori);
}

void CXX_absori(const RealArray& energyArray, const RealArray& params,
        int spectrumNumber, RealArray& fluxArray, RealArray& fluxErrArray, const string& initString)
{
   xsabsori(energyArray, params, spectrumNumber, fluxArray, fluxErrArray, initString);
}

void f_acisabs(const float* energy, int nFlux, const float* params,
	     int spectrumNumber, float* flux, float* fluxError);

FCALLSCSUB6(f_acisabs,ACISABS,acisabs,FLOATV,INT,FLOATV,INT,FLOATV,FLOATV)
FCALLSCSUB7(C_acisabs,DACISABS,dacisabs,DOUBLEV,INT,DOUBLEV,INT,DOUBLEV,DOUBLEV,STRING)

void f_acisabs(const float* energy, int nFlux, const float* params,
        int spectrumNumber, float* flux, float* fluxError)
{
   const size_t nPar = 8;
   fcppModelWrapper(energy, nFlux, params, spectrumNumber, flux, fluxError,
        nPar, acisabs);
}

void C_acisabs(const double* energy, int nFlux, const double* params,
        int spectrumNumber, double* flux, double* fluxError, const char* initStr)
{
   const size_t nPar = 8;
   cppModelWrapper(energy, nFlux, params, spectrumNumber, flux, fluxError,
        initStr, nPar, acisabs);
}

void CXX_acisabs(const RealArray& energyArray, const RealArray& params,
        int spectrumNumber, RealArray& fluxArray, RealArray& fluxErrArray, const string& initString)
{
   acisabs(energyArray, params, spectrumNumber, fluxArray, fluxErrArray, initString);
}

void f_constant(const float* energy, int nFlux, const float* params,
	     int spectrumNumber, float* flux, float* fluxError);

FCALLSCSUB6(f_constant,CONSTANT,constant,FLOATV,INT,FLOATV,INT,FLOATV,FLOATV)
FCALLSCSUB7(C_constant,DCONSTANT,dconstant,DOUBLEV,INT,DOUBLEV,INT,DOUBLEV,DOUBLEV,STRING)

void f_constant(const float* energy, int nFlux, const float* params,
        int spectrumNumber, float* flux, float* fluxError)
{
   xscnst_(energy, nFlux, params, spectrumNumber, flux, fluxError);
}

void C_constant(const double* energy, int nFlux, const double* params,
        int spectrumNumber, double* flux, double* fluxError, const char* initStr)
{
   const size_t nPar = 1;
   fModelWrapper(energy, nFlux, params, nPar, spectrumNumber, flux, fluxError,
        xscnst_);
}

void CXX_constant(const RealArray& energyArray, const RealArray& params,
        int spectrumNumber, RealArray& fluxArray, RealArray& fluxErrArray, const string& initString)
{
   XSModelFunction* funcObj = new XSCall<xsf77Call>(xscnst_);
   (*funcObj)(energyArray, params, spectrumNumber, fluxArray, fluxErrArray, initString);
   delete funcObj;
}

void f_cabs(const float* energy, int nFlux, const float* params,
	     int spectrumNumber, float* flux, float* fluxError);

FCALLSCSUB6(f_cabs,CABS,cabs,FLOATV,INT,FLOATV,INT,FLOATV,FLOATV)
FCALLSCSUB7(C_cabs,DCABS,dcabs,DOUBLEV,INT,DOUBLEV,INT,DOUBLEV,DOUBLEV,STRING)

void f_cabs(const float* energy, int nFlux, const float* params,
        int spectrumNumber, float* flux, float* fluxError)
{
   xscabs_(energy, nFlux, params, spectrumNumber, flux, fluxError);
}

void C_cabs(const double* energy, int nFlux, const double* params,
        int spectrumNumber, double* flux, double* fluxError, const char* initStr)
{
   const size_t nPar = 1;
   fModelWrapper(energy, nFlux, params, nPar, spectrumNumber, flux, fluxError,
        xscabs_);
}

void CXX_cabs(const RealArray& energyArray, const RealArray& params,
        int spectrumNumber, RealArray& fluxArray, RealArray& fluxErrArray, const string& initString)
{
   XSModelFunction* funcObj = new XSCall<xsf77Call>(xscabs_);
   (*funcObj)(energyArray, params, spectrumNumber, fluxArray, fluxErrArray, initString);
   delete funcObj;
}

void f_cyclabs(const float* energy, int nFlux, const float* params,
	     int spectrumNumber, float* flux, float* fluxError);

FCALLSCSUB6(f_cyclabs,CYCLABS,cyclabs,FLOATV,INT,FLOATV,INT,FLOATV,FLOATV)
FCALLSCSUB7(C_cyclabs,DCYCLABS,dcyclabs,DOUBLEV,INT,DOUBLEV,INT,DOUBLEV,DOUBLEV,STRING)

void f_cyclabs(const float* energy, int nFlux, const float* params,
        int spectrumNumber, float* flux, float* fluxError)
{
   xscycl_(energy, nFlux, params, spectrumNumber, flux, fluxError);
}

void C_cyclabs(const double* energy, int nFlux, const double* params,
        int spectrumNumber, double* flux, double* fluxError, const char* initStr)
{
   const size_t nPar = 5;
   fModelWrapper(energy, nFlux, params, nPar, spectrumNumber, flux, fluxError,
        xscycl_);
}

void CXX_cyclabs(const RealArray& energyArray, const RealArray& params,
        int spectrumNumber, RealArray& fluxArray, RealArray& fluxErrArray, const string& initString)
{
   XSModelFunction* funcObj = new XSCall<xsf77Call>(xscycl_);
   (*funcObj)(energyArray, params, spectrumNumber, fluxArray, fluxErrArray, initString);
   delete funcObj;
}

void f_dust(const float* energy, int nFlux, const float* params,
	     int spectrumNumber, float* flux, float* fluxError);

FCALLSCSUB6(f_dust,DUST,dust,FLOATV,INT,FLOATV,INT,FLOATV,FLOATV)
FCALLSCSUB7(C_dust,DDUST,ddust,DOUBLEV,INT,DOUBLEV,INT,DOUBLEV,DOUBLEV,STRING)

void f_dust(const float* energy, int nFlux, const float* params,
        int spectrumNumber, float* flux, float* fluxError)
{
   xsdust_(energy, nFlux, params, spectrumNumber, flux, fluxError);
}

void C_dust(const double* energy, int nFlux, const double* params,
        int spectrumNumber, double* flux, double* fluxError, const char* initStr)
{
   const size_t nPar = 2;
   fModelWrapper(energy, nFlux, params, nPar, spectrumNumber, flux, fluxError,
        xsdust_);
}

void CXX_dust(const RealArray& energyArray, const RealArray& params,
        int spectrumNumber, RealArray& fluxArray, RealArray& fluxErrArray, const string& initString)
{
   XSModelFunction* funcObj = new XSCall<xsf77Call>(xsdust_);
   (*funcObj)(energyArray, params, spectrumNumber, fluxArray, fluxErrArray, initString);
   delete funcObj;
}

void f_edge(const float* energy, int nFlux, const float* params,
	     int spectrumNumber, float* flux, float* fluxError);

FCALLSCSUB6(f_edge,EDGE,edge,FLOATV,INT,FLOATV,INT,FLOATV,FLOATV)
FCALLSCSUB7(C_edge,DEDGE,dedge,DOUBLEV,INT,DOUBLEV,INT,DOUBLEV,DOUBLEV,STRING)

void f_edge(const float* energy, int nFlux, const float* params,
        int spectrumNumber, float* flux, float* fluxError)
{
   xsedge_(energy, nFlux, params, spectrumNumber, flux, fluxError);
}

void C_edge(const double* energy, int nFlux, const double* params,
        int spectrumNumber, double* flux, double* fluxError, const char* initStr)
{
   const size_t nPar = 2;
   fModelWrapper(energy, nFlux, params, nPar, spectrumNumber, flux, fluxError,
        xsedge_);
}

void CXX_edge(const RealArray& energyArray, const RealArray& params,
        int spectrumNumber, RealArray& fluxArray, RealArray& fluxErrArray, const string& initString)
{
   XSModelFunction* funcObj = new XSCall<xsf77Call>(xsedge_);
   (*funcObj)(energyArray, params, spectrumNumber, fluxArray, fluxErrArray, initString);
   delete funcObj;
}

void f_expabs(const float* energy, int nFlux, const float* params,
	     int spectrumNumber, float* flux, float* fluxError);

FCALLSCSUB6(f_expabs,EXPABS,expabs,FLOATV,INT,FLOATV,INT,FLOATV,FLOATV)
FCALLSCSUB7(C_expabs,DEXPABS,dexpabs,DOUBLEV,INT,DOUBLEV,INT,DOUBLEV,DOUBLEV,STRING)

void f_expabs(const float* energy, int nFlux, const float* params,
        int spectrumNumber, float* flux, float* fluxError)
{
   xsabsc_(energy, nFlux, params, spectrumNumber, flux, fluxError);
}

void C_expabs(const double* energy, int nFlux, const double* params,
        int spectrumNumber, double* flux, double* fluxError, const char* initStr)
{
   const size_t nPar = 1;
   fModelWrapper(energy, nFlux, params, nPar, spectrumNumber, flux, fluxError,
        xsabsc_);
}

void CXX_expabs(const RealArray& energyArray, const RealArray& params,
        int spectrumNumber, RealArray& fluxArray, RealArray& fluxErrArray, const string& initString)
{
   XSModelFunction* funcObj = new XSCall<xsf77Call>(xsabsc_);
   (*funcObj)(energyArray, params, spectrumNumber, fluxArray, fluxErrArray, initString);
   delete funcObj;
}

void f_expfac(const float* energy, int nFlux, const float* params,
	     int spectrumNumber, float* flux, float* fluxError);

FCALLSCSUB6(f_expfac,EXPFAC,expfac,FLOATV,INT,FLOATV,INT,FLOATV,FLOATV)
FCALLSCSUB7(C_expfac,DEXPFAC,dexpfac,DOUBLEV,INT,DOUBLEV,INT,DOUBLEV,DOUBLEV,STRING)

void f_expfac(const float* energy, int nFlux, const float* params,
        int spectrumNumber, float* flux, float* fluxError)
{
   xsexp_(energy, nFlux, params, spectrumNumber, flux, fluxError);
}

void C_expfac(const double* energy, int nFlux, const double* params,
        int spectrumNumber, double* flux, double* fluxError, const char* initStr)
{
   const size_t nPar = 3;
   fModelWrapper(energy, nFlux, params, nPar, spectrumNumber, flux, fluxError,
        xsexp_);
}

void CXX_expfac(const RealArray& energyArray, const RealArray& params,
        int spectrumNumber, RealArray& fluxArray, RealArray& fluxErrArray, const string& initString)
{
   XSModelFunction* funcObj = new XSCall<xsf77Call>(xsexp_);
   (*funcObj)(energyArray, params, spectrumNumber, fluxArray, fluxErrArray, initString);
   delete funcObj;
}

void f_gaussianAbsorptionLine(const float* energy, int nFlux, const float* params,
	     int spectrumNumber, float* flux, float* fluxError);

FCALLSCSUB6(f_gaussianAbsorptionLine,GAUSSIANABSORPTIONLINE,gaussianabsorptionline,FLOATV,INT,FLOATV,INT,FLOATV,FLOATV)
FCALLSCSUB7(C_gaussianAbsorptionLine,DGAUSSIANABSORPTIONLINE,dgaussianabsorptionline,DOUBLEV,INT,DOUBLEV,INT,DOUBLEV,DOUBLEV,STRING)

void f_gaussianAbsorptionLine(const float* energy, int nFlux, const float* params,
        int spectrumNumber, float* flux, float* fluxError)
{
   const size_t nPar = 3;
   fcppModelWrapper(energy, nFlux, params, spectrumNumber, flux, fluxError,
        nPar, gaussianAbsorptionLine);
}

void C_gaussianAbsorptionLine(const double* energy, int nFlux, const double* params,
        int spectrumNumber, double* flux, double* fluxError, const char* initStr)
{
   const size_t nPar = 3;
   cppModelWrapper(energy, nFlux, params, spectrumNumber, flux, fluxError,
        initStr, nPar, gaussianAbsorptionLine);
}

void f_gabs(const float* energy, int nFlux, const float* params,
	     int spectrumNumber, float* flux, float* fluxError);

FCALLSCSUB6(f_gabs,GABS,gabs,FLOATV,INT,FLOATV,INT,FLOATV,FLOATV)
FCALLSCSUB7(C_gabs,DGABS,dgabs,DOUBLEV,INT,DOUBLEV,INT,DOUBLEV,DOUBLEV,STRING)

void f_gabs(const float* energy, int nFlux, const float* params,
        int spectrumNumber, float* flux, float* fluxError)
{
   const size_t nPar = 3;
   fcppModelWrapper(energy, nFlux, params, spectrumNumber, flux, fluxError,
        nPar, gaussianAbsorptionLine);
}

void C_gabs(const double* energy, int nFlux, const double* params,
        int spectrumNumber, double* flux, double* fluxError, const char* initStr)
{
   const size_t nPar = 3;
   cppModelWrapper(energy, nFlux, params, spectrumNumber, flux, fluxError,
        initStr, nPar, gaussianAbsorptionLine);
}

void CXX_gabs(const RealArray& energyArray, const RealArray& params,
        int spectrumNumber, RealArray& fluxArray, RealArray& fluxErrArray, const string& initString)
{
   gaussianAbsorptionLine(energyArray, params, spectrumNumber, fluxArray, fluxErrArray, initString);
}

void f_heilin(const float* energy, int nFlux, const float* params,
	     int spectrumNumber, float* flux, float* fluxError);

FCALLSCSUB6(f_heilin,HEILIN,heilin,FLOATV,INT,FLOATV,INT,FLOATV,FLOATV)
FCALLSCSUB7(C_heilin,DHEILIN,dheilin,DOUBLEV,INT,DOUBLEV,INT,DOUBLEV,DOUBLEV,STRING)

void f_heilin(const float* energy, int nFlux, const float* params,
        int spectrumNumber, float* flux, float* fluxError)
{
   xsphei_(energy, nFlux, params, spectrumNumber, flux, fluxError);
}

void C_heilin(const double* energy, int nFlux, const double* params,
        int spectrumNumber, double* flux, double* fluxError, const char* initStr)
{
   const size_t nPar = 3;
   fModelWrapper(energy, nFlux, params, nPar, spectrumNumber, flux, fluxError,
        xsphei_);
}

void CXX_heilin(const RealArray& energyArray, const RealArray& params,
        int spectrumNumber, RealArray& fluxArray, RealArray& fluxErrArray, const string& initString)
{
   XSModelFunction* funcObj = new XSCall<xsf77Call>(xsphei_);
   (*funcObj)(energyArray, params, spectrumNumber, fluxArray, fluxErrArray, initString);
   delete funcObj;
}

void f_highecut(const float* energy, int nFlux, const float* params,
	     int spectrumNumber, float* flux, float* fluxError);

FCALLSCSUB6(f_highecut,HIGHECUT,highecut,FLOATV,INT,FLOATV,INT,FLOATV,FLOATV)
FCALLSCSUB7(C_highecut,DHIGHECUT,dhighecut,DOUBLEV,INT,DOUBLEV,INT,DOUBLEV,DOUBLEV,STRING)

void f_highecut(const float* energy, int nFlux, const float* params,
        int spectrumNumber, float* flux, float* fluxError)
{
   xshecu_(energy, nFlux, params, spectrumNumber, flux, fluxError);
}

void C_highecut(const double* energy, int nFlux, const double* params,
        int spectrumNumber, double* flux, double* fluxError, const char* initStr)
{
   const size_t nPar = 2;
   fModelWrapper(energy, nFlux, params, nPar, spectrumNumber, flux, fluxError,
        xshecu_);
}

void CXX_highecut(const RealArray& energyArray, const RealArray& params,
        int spectrumNumber, RealArray& fluxArray, RealArray& fluxErrArray, const string& initString)
{
   XSModelFunction* funcObj = new XSCall<xsf77Call>(xshecu_);
   (*funcObj)(energyArray, params, spectrumNumber, fluxArray, fluxErrArray, initString);
   delete funcObj;
}

void f_hrefl(const float* energy, int nFlux, const float* params,
	     int spectrumNumber, float* flux, float* fluxError);

FCALLSCSUB6(f_hrefl,HREFL,hrefl,FLOATV,INT,FLOATV,INT,FLOATV,FLOATV)
FCALLSCSUB7(C_hrefl,DHREFL,dhrefl,DOUBLEV,INT,DOUBLEV,INT,DOUBLEV,DOUBLEV,STRING)

void f_hrefl(const float* energy, int nFlux, const float* params,
        int spectrumNumber, float* flux, float* fluxError)
{
   xshrfl_(energy, nFlux, params, spectrumNumber, flux, fluxError);
}

void C_hrefl(const double* energy, int nFlux, const double* params,
        int spectrumNumber, double* flux, double* fluxError, const char* initStr)
{
   const size_t nPar = 8;
   fModelWrapper(energy, nFlux, params, nPar, spectrumNumber, flux, fluxError,
        xshrfl_);
}

void CXX_hrefl(const RealArray& energyArray, const RealArray& params,
        int spectrumNumber, RealArray& fluxArray, RealArray& fluxErrArray, const string& initString)
{
   XSModelFunction* funcObj = new XSCall<xsf77Call>(xshrfl_);
   (*funcObj)(energyArray, params, spectrumNumber, fluxArray, fluxErrArray, initString);
   delete funcObj;
}

void C_ismabs(const double* energy, int nFlux, const double* params,
        int spectrumNumber, double* flux, double* fluxError, const char* initStr)
{
   const size_t nPar = 31;
   fModelWrapper(energy, nFlux, params, nPar, spectrumNumber, flux, fluxError,
        ismabs_);
}

void CXX_ismabs(const RealArray& energyArray, const RealArray& params,
        int spectrumNumber, RealArray& fluxArray, RealArray& fluxErrArray, const string& initString)
{
   XSModelFunction* funcObj = new XSCall<xsf77Call>(ismabs_);
   (*funcObj)(energyArray, params, spectrumNumber, fluxArray, fluxErrArray, initString);
   delete funcObj;
}

void C_ismdust(const double* energy, int nFlux, const double* params,
        int spectrumNumber, double* flux, double* fluxError, const char* initStr)
{
   const size_t nPar = 3;
   fModelWrapper(energy, nFlux, params, nPar, spectrumNumber, flux, fluxError,
        ismdust_);
}

void CXX_ismdust(const RealArray& energyArray, const RealArray& params,
        int spectrumNumber, RealArray& fluxArray, RealArray& fluxErrArray, const string& initString)
{
   XSModelFunction* funcObj = new XSCall<xsf77Call>(ismdust_);
   (*funcObj)(energyArray, params, spectrumNumber, fluxArray, fluxErrArray, initString);
   delete funcObj;
}

void f_logconst(const float* energy, int nFlux, const float* params,
	     int spectrumNumber, float* flux, float* fluxError);

FCALLSCSUB6(f_logconst,LOGCONST,logconst,FLOATV,INT,FLOATV,INT,FLOATV,FLOATV)
FCALLSCSUB7(C_logconst,DLOGCONST,dlogconst,DOUBLEV,INT,DOUBLEV,INT,DOUBLEV,DOUBLEV,STRING)

void f_logconst(const float* energy, int nFlux, const float* params,
        int spectrumNumber, float* flux, float* fluxError)
{
   const size_t nPar = 1;
   fcppModelWrapper(energy, nFlux, params, spectrumNumber, flux, fluxError,
        nPar, logconst);
}

void C_logconst(const double* energy, int nFlux, const double* params,
        int spectrumNumber, double* flux, double* fluxError, const char* initStr)
{
   const size_t nPar = 1;
   cppModelWrapper(energy, nFlux, params, spectrumNumber, flux, fluxError,
        initStr, nPar, logconst);
}

void CXX_logconst(const RealArray& energyArray, const RealArray& params,
        int spectrumNumber, RealArray& fluxArray, RealArray& fluxErrArray, const string& initString)
{
   logconst(energyArray, params, spectrumNumber, fluxArray, fluxErrArray, initString);
}

void f_log10con(const float* energy, int nFlux, const float* params,
	     int spectrumNumber, float* flux, float* fluxError);

FCALLSCSUB6(f_log10con,LOG10CON,log10con,FLOATV,INT,FLOATV,INT,FLOATV,FLOATV)
FCALLSCSUB7(C_log10con,DLOG10CON,dlog10con,DOUBLEV,INT,DOUBLEV,INT,DOUBLEV,DOUBLEV,STRING)

void f_log10con(const float* energy, int nFlux, const float* params,
        int spectrumNumber, float* flux, float* fluxError)
{
   const size_t nPar = 1;
   fcppModelWrapper(energy, nFlux, params, spectrumNumber, flux, fluxError,
        nPar, log10con);
}

void C_log10con(const double* energy, int nFlux, const double* params,
        int spectrumNumber, double* flux, double* fluxError, const char* initStr)
{
   const size_t nPar = 1;
   cppModelWrapper(energy, nFlux, params, spectrumNumber, flux, fluxError,
        initStr, nPar, log10con);
}

void CXX_log10con(const RealArray& energyArray, const RealArray& params,
        int spectrumNumber, RealArray& fluxArray, RealArray& fluxErrArray, const string& initString)
{
   log10con(energyArray, params, spectrumNumber, fluxArray, fluxErrArray, initString);
}

void f_lyman(const float* energy, int nFlux, const float* params,
	     int spectrumNumber, float* flux, float* fluxError);

FCALLSCSUB6(f_lyman,LYMAN,lyman,FLOATV,INT,FLOATV,INT,FLOATV,FLOATV)
FCALLSCSUB7(C_lyman,DLYMAN,dlyman,DOUBLEV,INT,DOUBLEV,INT,DOUBLEV,DOUBLEV,STRING)

void f_lyman(const float* energy, int nFlux, const float* params,
        int spectrumNumber, float* flux, float* fluxError)
{
   xslyman_(energy, nFlux, params, spectrumNumber, flux, fluxError);
}

void C_lyman(const double* energy, int nFlux, const double* params,
        int spectrumNumber, double* flux, double* fluxError, const char* initStr)
{
   const size_t nPar = 4;
   fModelWrapper(energy, nFlux, params, nPar, spectrumNumber, flux, fluxError,
        xslyman_);
}

void CXX_lyman(const RealArray& energyArray, const RealArray& params,
        int spectrumNumber, RealArray& fluxArray, RealArray& fluxErrArray, const string& initString)
{
   XSModelFunction* funcObj = new XSCall<xsf77Call>(xslyman_);
   (*funcObj)(energyArray, params, spectrumNumber, fluxArray, fluxErrArray, initString);
   delete funcObj;
}

void f_notch(const float* energy, int nFlux, const float* params,
	     int spectrumNumber, float* flux, float* fluxError);

FCALLSCSUB6(f_notch,NOTCH,notch,FLOATV,INT,FLOATV,INT,FLOATV,FLOATV)
FCALLSCSUB7(C_notch,DNOTCH,dnotch,DOUBLEV,INT,DOUBLEV,INT,DOUBLEV,DOUBLEV,STRING)

void f_notch(const float* energy, int nFlux, const float* params,
        int spectrumNumber, float* flux, float* fluxError)
{
   xsntch_(energy, nFlux, params, spectrumNumber, flux, fluxError);
}

void C_notch(const double* energy, int nFlux, const double* params,
        int spectrumNumber, double* flux, double* fluxError, const char* initStr)
{
   const size_t nPar = 3;
   fModelWrapper(energy, nFlux, params, nPar, spectrumNumber, flux, fluxError,
        xsntch_);
}

void CXX_notch(const RealArray& energyArray, const RealArray& params,
        int spectrumNumber, RealArray& fluxArray, RealArray& fluxErrArray, const string& initString)
{
   XSModelFunction* funcObj = new XSCall<xsf77Call>(xsntch_);
   (*funcObj)(energyArray, params, spectrumNumber, fluxArray, fluxErrArray, initString);
   delete funcObj;
}

void C_olivineabs(const double* energy, int nFlux, const double* params,
        int spectrumNumber, double* flux, double* fluxError, const char* initStr)
{
   const size_t nPar = 2;
   fModelWrapper(energy, nFlux, params, nPar, spectrumNumber, flux, fluxError,
        olivineabs_);
}

void CXX_olivineabs(const RealArray& energyArray, const RealArray& params,
        int spectrumNumber, RealArray& fluxArray, RealArray& fluxErrArray, const string& initString)
{
   XSModelFunction* funcObj = new XSCall<xsf77Call>(olivineabs_);
   (*funcObj)(energyArray, params, spectrumNumber, fluxArray, fluxErrArray, initString);
   delete funcObj;
}

void f_pcfabs(const float* energy, int nFlux, const float* params,
	     int spectrumNumber, float* flux, float* fluxError);

FCALLSCSUB6(f_pcfabs,PCFABS,pcfabs,FLOATV,INT,FLOATV,INT,FLOATV,FLOATV)
FCALLSCSUB7(C_pcfabs,DPCFABS,dpcfabs,DOUBLEV,INT,DOUBLEV,INT,DOUBLEV,DOUBLEV,STRING)

void f_pcfabs(const float* energy, int nFlux, const float* params,
        int spectrumNumber, float* flux, float* fluxError)
{
   xsabsp_(energy, nFlux, params, spectrumNumber, flux, fluxError);
}

void C_pcfabs(const double* energy, int nFlux, const double* params,
        int spectrumNumber, double* flux, double* fluxError, const char* initStr)
{
   const size_t nPar = 2;
   fModelWrapper(energy, nFlux, params, nPar, spectrumNumber, flux, fluxError,
        xsabsp_);
}

void CXX_pcfabs(const RealArray& energyArray, const RealArray& params,
        int spectrumNumber, RealArray& fluxArray, RealArray& fluxErrArray, const string& initString)
{
   XSModelFunction* funcObj = new XSCall<xsf77Call>(xsabsp_);
   (*funcObj)(energyArray, params, spectrumNumber, fluxArray, fluxErrArray, initString);
   delete funcObj;
}

void f_phabs(const float* energy, int nFlux, const float* params,
	     int spectrumNumber, float* flux, float* fluxError);

FCALLSCSUB6(f_phabs,PHABS,phabs,FLOATV,INT,FLOATV,INT,FLOATV,FLOATV)
FCALLSCSUB7(C_phabs,DPHABS,dphabs,DOUBLEV,INT,DOUBLEV,INT,DOUBLEV,DOUBLEV,STRING)

void f_phabs(const float* energy, int nFlux, const float* params,
        int spectrumNumber, float* flux, float* fluxError)
{
   xsphab_(energy, nFlux, params, spectrumNumber, flux, fluxError);
}

void C_phabs(const double* energy, int nFlux, const double* params,
        int spectrumNumber, double* flux, double* fluxError, const char* initStr)
{
   const size_t nPar = 1;
   fModelWrapper(energy, nFlux, params, nPar, spectrumNumber, flux, fluxError,
        xsphab_);
}

void CXX_phabs(const RealArray& energyArray, const RealArray& params,
        int spectrumNumber, RealArray& fluxArray, RealArray& fluxErrArray, const string& initString)
{
   XSModelFunction* funcObj = new XSCall<xsf77Call>(xsphab_);
   (*funcObj)(energyArray, params, spectrumNumber, fluxArray, fluxErrArray, initString);
   delete funcObj;
}

void f_plabs(const float* energy, int nFlux, const float* params,
	     int spectrumNumber, float* flux, float* fluxError);

FCALLSCSUB6(f_plabs,PLABS,plabs,FLOATV,INT,FLOATV,INT,FLOATV,FLOATV)
FCALLSCSUB7(C_plabs,DPLABS,dplabs,DOUBLEV,INT,DOUBLEV,INT,DOUBLEV,DOUBLEV,STRING)

void f_plabs(const float* energy, int nFlux, const float* params,
        int spectrumNumber, float* flux, float* fluxError)
{
   xsplab_(energy, nFlux, params, spectrumNumber, flux, fluxError);
}

void C_plabs(const double* energy, int nFlux, const double* params,
        int spectrumNumber, double* flux, double* fluxError, const char* initStr)
{
   const size_t nPar = 2;
   fModelWrapper(energy, nFlux, params, nPar, spectrumNumber, flux, fluxError,
        xsplab_);
}

void CXX_plabs(const RealArray& energyArray, const RealArray& params,
        int spectrumNumber, RealArray& fluxArray, RealArray& fluxErrArray, const string& initString)
{
   XSModelFunction* funcObj = new XSCall<xsf77Call>(xsplab_);
   (*funcObj)(energyArray, params, spectrumNumber, fluxArray, fluxErrArray, initString);
   delete funcObj;
}

void f_xspwab(const float* energy, int nFlux, const float* params,
	     int spectrumNumber, float* flux, float* fluxError);

FCALLSCSUB6(f_xspwab,XSPWAB,xspwab,FLOATV,INT,FLOATV,INT,FLOATV,FLOATV)
FCALLSCSUB7(C_xspwab,DXSPWAB,dxspwab,DOUBLEV,INT,DOUBLEV,INT,DOUBLEV,DOUBLEV,STRING)

void f_xspwab(const float* energy, int nFlux, const float* params,
        int spectrumNumber, float* flux, float* fluxError)
{
   const size_t nPar = 3;
   fcppModelWrapper(energy, nFlux, params, spectrumNumber, flux, fluxError,
        nPar, xspwab);
}

void C_xspwab(const double* energy, int nFlux, const double* params,
        int spectrumNumber, double* flux, double* fluxError, const char* initStr)
{
   const size_t nPar = 3;
   cppModelWrapper(energy, nFlux, params, spectrumNumber, flux, fluxError,
        initStr, nPar, xspwab);
}

void f_pwab(const float* energy, int nFlux, const float* params,
	     int spectrumNumber, float* flux, float* fluxError);

FCALLSCSUB6(f_pwab,PWAB,pwab,FLOATV,INT,FLOATV,INT,FLOATV,FLOATV)
FCALLSCSUB7(C_pwab,DPWAB,dpwab,DOUBLEV,INT,DOUBLEV,INT,DOUBLEV,DOUBLEV,STRING)

void f_pwab(const float* energy, int nFlux, const float* params,
        int spectrumNumber, float* flux, float* fluxError)
{
   const size_t nPar = 3;
   fcppModelWrapper(energy, nFlux, params, spectrumNumber, flux, fluxError,
        nPar, xspwab);
}

void C_pwab(const double* energy, int nFlux, const double* params,
        int spectrumNumber, double* flux, double* fluxError, const char* initStr)
{
   const size_t nPar = 3;
   cppModelWrapper(energy, nFlux, params, spectrumNumber, flux, fluxError,
        initStr, nPar, xspwab);
}

void CXX_pwab(const RealArray& energyArray, const RealArray& params,
        int spectrumNumber, RealArray& fluxArray, RealArray& fluxErrArray, const string& initString)
{
   xspwab(energyArray, params, spectrumNumber, fluxArray, fluxErrArray, initString);
}

void f_redden(const float* energy, int nFlux, const float* params,
	     int spectrumNumber, float* flux, float* fluxError);

FCALLSCSUB6(f_redden,REDDEN,redden,FLOATV,INT,FLOATV,INT,FLOATV,FLOATV)
FCALLSCSUB7(C_redden,DREDDEN,dredden,DOUBLEV,INT,DOUBLEV,INT,DOUBLEV,DOUBLEV,STRING)

void f_redden(const float* energy, int nFlux, const float* params,
        int spectrumNumber, float* flux, float* fluxError)
{
   xscred_(energy, nFlux, params, spectrumNumber, flux, fluxError);
}

void C_redden(const double* energy, int nFlux, const double* params,
        int spectrumNumber, double* flux, double* fluxError, const char* initStr)
{
   const size_t nPar = 1;
   fModelWrapper(energy, nFlux, params, nPar, spectrumNumber, flux, fluxError,
        xscred_);
}

void CXX_redden(const RealArray& energyArray, const RealArray& params,
        int spectrumNumber, RealArray& fluxArray, RealArray& fluxErrArray, const string& initString)
{
   XSModelFunction* funcObj = new XSCall<xsf77Call>(xscred_);
   (*funcObj)(energyArray, params, spectrumNumber, fluxArray, fluxErrArray, initString);
   delete funcObj;
}

void f_smedge(const float* energy, int nFlux, const float* params,
	     int spectrumNumber, float* flux, float* fluxError);

FCALLSCSUB6(f_smedge,SMEDGE,smedge,FLOATV,INT,FLOATV,INT,FLOATV,FLOATV)
FCALLSCSUB7(C_smedge,DSMEDGE,dsmedge,DOUBLEV,INT,DOUBLEV,INT,DOUBLEV,DOUBLEV,STRING)

void f_smedge(const float* energy, int nFlux, const float* params,
        int spectrumNumber, float* flux, float* fluxError)
{
   xssmdg_(energy, nFlux, params, spectrumNumber, flux, fluxError);
}

void C_smedge(const double* energy, int nFlux, const double* params,
        int spectrumNumber, double* flux, double* fluxError, const char* initStr)
{
   const size_t nPar = 4;
   fModelWrapper(energy, nFlux, params, nPar, spectrumNumber, flux, fluxError,
        xssmdg_);
}

void CXX_smedge(const RealArray& energyArray, const RealArray& params,
        int spectrumNumber, RealArray& fluxArray, RealArray& fluxErrArray, const string& initString)
{
   XSModelFunction* funcObj = new XSCall<xsf77Call>(xssmdg_);
   (*funcObj)(energyArray, params, spectrumNumber, fluxArray, fluxErrArray, initString);
   delete funcObj;
}

void f_superExpCutoff(const float* energy, int nFlux, const float* params,
	     int spectrumNumber, float* flux, float* fluxError);

FCALLSCSUB6(f_superExpCutoff,SUPEREXPCUTOFF,superexpcutoff,FLOATV,INT,FLOATV,INT,FLOATV,FLOATV)
FCALLSCSUB7(C_superExpCutoff,DSUPEREXPCUTOFF,dsuperexpcutoff,DOUBLEV,INT,DOUBLEV,INT,DOUBLEV,DOUBLEV,STRING)

void f_superExpCutoff(const float* energy, int nFlux, const float* params,
        int spectrumNumber, float* flux, float* fluxError)
{
   const size_t nPar = 2;
   fcppModelWrapper(energy, nFlux, params, spectrumNumber, flux, fluxError,
        nPar, superExpCutoff);
}

void C_superExpCutoff(const double* energy, int nFlux, const double* params,
        int spectrumNumber, double* flux, double* fluxError, const char* initStr)
{
   const size_t nPar = 2;
   cppModelWrapper(energy, nFlux, params, spectrumNumber, flux, fluxError,
        initStr, nPar, superExpCutoff);
}

void f_spexpcut(const float* energy, int nFlux, const float* params,
	     int spectrumNumber, float* flux, float* fluxError);

FCALLSCSUB6(f_spexpcut,SPEXPCUT,spexpcut,FLOATV,INT,FLOATV,INT,FLOATV,FLOATV)
FCALLSCSUB7(C_spexpcut,DSPEXPCUT,dspexpcut,DOUBLEV,INT,DOUBLEV,INT,DOUBLEV,DOUBLEV,STRING)

void f_spexpcut(const float* energy, int nFlux, const float* params,
        int spectrumNumber, float* flux, float* fluxError)
{
   const size_t nPar = 2;
   fcppModelWrapper(energy, nFlux, params, spectrumNumber, flux, fluxError,
        nPar, superExpCutoff);
}

void C_spexpcut(const double* energy, int nFlux, const double* params,
        int spectrumNumber, double* flux, double* fluxError, const char* initStr)
{
   const size_t nPar = 2;
   cppModelWrapper(energy, nFlux, params, spectrumNumber, flux, fluxError,
        initStr, nPar, superExpCutoff);
}

void CXX_spexpcut(const RealArray& energyArray, const RealArray& params,
        int spectrumNumber, RealArray& fluxArray, RealArray& fluxErrArray, const string& initString)
{
   superExpCutoff(energyArray, params, spectrumNumber, fluxArray, fluxErrArray, initString);
}

void f_spline(const float* energy, int nFlux, const float* params,
	     int spectrumNumber, float* flux, float* fluxError);

FCALLSCSUB6(f_spline,SPLINE,spline,FLOATV,INT,FLOATV,INT,FLOATV,FLOATV)
FCALLSCSUB7(C_spline,DSPLINE,dspline,DOUBLEV,INT,DOUBLEV,INT,DOUBLEV,DOUBLEV,STRING)

void f_spline(const float* energy, int nFlux, const float* params,
        int spectrumNumber, float* flux, float* fluxError)
{
   xsspln_(energy, nFlux, params, spectrumNumber, flux, fluxError);
}

void C_spline(const double* energy, int nFlux, const double* params,
        int spectrumNumber, double* flux, double* fluxError, const char* initStr)
{
   const size_t nPar = 6;
   fModelWrapper(energy, nFlux, params, nPar, spectrumNumber, flux, fluxError,
        xsspln_);
}

void CXX_spline(const RealArray& energyArray, const RealArray& params,
        int spectrumNumber, RealArray& fluxArray, RealArray& fluxErrArray, const string& initString)
{
   XSModelFunction* funcObj = new XSCall<xsf77Call>(xsspln_);
   (*funcObj)(energyArray, params, spectrumNumber, fluxArray, fluxErrArray, initString);
   delete funcObj;
}

void f_SSS_ice(const float* energy, int nFlux, const float* params,
	     int spectrumNumber, float* flux, float* fluxError);

FCALLSCSUB6(f_SSS_ice,SSS_ICE,sss_ice,FLOATV,INT,FLOATV,INT,FLOATV,FLOATV)
FCALLSCSUB7(C_SSS_ice,DSSS_ICE,dsss_ice,DOUBLEV,INT,DOUBLEV,INT,DOUBLEV,DOUBLEV,STRING)

void f_SSS_ice(const float* energy, int nFlux, const float* params,
        int spectrumNumber, float* flux, float* fluxError)
{
   xssssi_(energy, nFlux, params, spectrumNumber, flux, fluxError);
}

void C_SSS_ice(const double* energy, int nFlux, const double* params,
        int spectrumNumber, double* flux, double* fluxError, const char* initStr)
{
   const size_t nPar = 1;
   fModelWrapper(energy, nFlux, params, nPar, spectrumNumber, flux, fluxError,
        xssssi_);
}

void CXX_SSS_ice(const RealArray& energyArray, const RealArray& params,
        int spectrumNumber, RealArray& fluxArray, RealArray& fluxErrArray, const string& initString)
{
   XSModelFunction* funcObj = new XSCall<xsf77Call>(xssssi_);
   (*funcObj)(energyArray, params, spectrumNumber, fluxArray, fluxErrArray, initString);
   delete funcObj;
}

void f_swind1(const float* energy, int nFlux, const float* params,
	     int spectrumNumber, float* flux, float* fluxError);

FCALLSCSUB6(f_swind1,SWIND1,swind1,FLOATV,INT,FLOATV,INT,FLOATV,FLOATV)
FCALLSCSUB7(C_swind1,DSWIND1,dswind1,DOUBLEV,INT,DOUBLEV,INT,DOUBLEV,DOUBLEV,STRING)

void f_swind1(const float* energy, int nFlux, const float* params,
        int spectrumNumber, float* flux, float* fluxError)
{
   const size_t nPar = 4;
   fcppModelWrapper(energy, nFlux, params, spectrumNumber, flux, fluxError,
        nPar, swind1);
}

void C_swind1(const double* energy, int nFlux, const double* params,
        int spectrumNumber, double* flux, double* fluxError, const char* initStr)
{
   const size_t nPar = 4;
   cppModelWrapper(energy, nFlux, params, spectrumNumber, flux, fluxError,
        initStr, nPar, swind1);
}

void CXX_swind1(const RealArray& energyArray, const RealArray& params,
        int spectrumNumber, RealArray& fluxArray, RealArray& fluxErrArray, const string& initString)
{
   swind1(energyArray, params, spectrumNumber, fluxArray, fluxErrArray, initString);
}

void f_tbabs(const float* energy, int nFlux, const float* params,
	     int spectrumNumber, float* flux, float* fluxError);

void f_tbabs(const float* energy, int nFlux, const float* params,
        int spectrumNumber, float* flux, float* fluxError)
{
   const size_t nPar = 1;
   fcppModelWrapper(energy, nFlux, params, spectrumNumber, flux, fluxError,
        nPar, tbabs);
}

void C_tbabs(const double* energy, int nFlux, const double* params,
        int spectrumNumber, double* flux, double* fluxError, const char* initStr)
{
   const size_t nPar = 1;
   cppModelWrapper(energy, nFlux, params, spectrumNumber, flux, fluxError,
        initStr, nPar, tbabs);
}

void f_TBabs(const float* energy, int nFlux, const float* params,
	     int spectrumNumber, float* flux, float* fluxError);

FCALLSCSUB6(f_TBabs,TBABS,tbabs,FLOATV,INT,FLOATV,INT,FLOATV,FLOATV)
FCALLSCSUB7(C_TBabs,DTBABS,dtbabs,DOUBLEV,INT,DOUBLEV,INT,DOUBLEV,DOUBLEV,STRING)

void f_TBabs(const float* energy, int nFlux, const float* params,
        int spectrumNumber, float* flux, float* fluxError)
{
   const size_t nPar = 1;
   fcppModelWrapper(energy, nFlux, params, spectrumNumber, flux, fluxError,
        nPar, tbabs);
}

void C_TBabs(const double* energy, int nFlux, const double* params,
        int spectrumNumber, double* flux, double* fluxError, const char* initStr)
{
   const size_t nPar = 1;
   cppModelWrapper(energy, nFlux, params, spectrumNumber, flux, fluxError,
        initStr, nPar, tbabs);
}

void CXX_TBabs(const RealArray& energyArray, const RealArray& params,
        int spectrumNumber, RealArray& fluxArray, RealArray& fluxErrArray, const string& initString)
{
   tbabs(energyArray, params, spectrumNumber, fluxArray, fluxErrArray, initString);
}

void f_tbfeo(const float* energy, int nFlux, const float* params,
	     int spectrumNumber, float* flux, float* fluxError);

void f_tbfeo(const float* energy, int nFlux, const float* params,
        int spectrumNumber, float* flux, float* fluxError)
{
   const size_t nPar = 4;
   fcppModelWrapper(energy, nFlux, params, spectrumNumber, flux, fluxError,
        nPar, tbfeo);
}

void C_tbfeo(const double* energy, int nFlux, const double* params,
        int spectrumNumber, double* flux, double* fluxError, const char* initStr)
{
   const size_t nPar = 4;
   cppModelWrapper(energy, nFlux, params, spectrumNumber, flux, fluxError,
        initStr, nPar, tbfeo);
}

void f_TBfeo(const float* energy, int nFlux, const float* params,
	     int spectrumNumber, float* flux, float* fluxError);

FCALLSCSUB6(f_TBfeo,TBFEO,tbfeo,FLOATV,INT,FLOATV,INT,FLOATV,FLOATV)
FCALLSCSUB7(C_TBfeo,DTBFEO,dtbfeo,DOUBLEV,INT,DOUBLEV,INT,DOUBLEV,DOUBLEV,STRING)

void f_TBfeo(const float* energy, int nFlux, const float* params,
        int spectrumNumber, float* flux, float* fluxError)
{
   const size_t nPar = 4;
   fcppModelWrapper(energy, nFlux, params, spectrumNumber, flux, fluxError,
        nPar, tbfeo);
}

void C_TBfeo(const double* energy, int nFlux, const double* params,
        int spectrumNumber, double* flux, double* fluxError, const char* initStr)
{
   const size_t nPar = 4;
   cppModelWrapper(energy, nFlux, params, spectrumNumber, flux, fluxError,
        initStr, nPar, tbfeo);
}

void CXX_TBfeo(const RealArray& energyArray, const RealArray& params,
        int spectrumNumber, RealArray& fluxArray, RealArray& fluxErrArray, const string& initString)
{
   tbfeo(energyArray, params, spectrumNumber, fluxArray, fluxErrArray, initString);
}

void f_tbgas(const float* energy, int nFlux, const float* params,
	     int spectrumNumber, float* flux, float* fluxError);

void f_tbgas(const float* energy, int nFlux, const float* params,
        int spectrumNumber, float* flux, float* fluxError)
{
   const size_t nPar = 2;
   fcppModelWrapper(energy, nFlux, params, spectrumNumber, flux, fluxError,
        nPar, tbgas);
}

void C_tbgas(const double* energy, int nFlux, const double* params,
        int spectrumNumber, double* flux, double* fluxError, const char* initStr)
{
   const size_t nPar = 2;
   cppModelWrapper(energy, nFlux, params, spectrumNumber, flux, fluxError,
        initStr, nPar, tbgas);
}

void f_TBgas(const float* energy, int nFlux, const float* params,
	     int spectrumNumber, float* flux, float* fluxError);

FCALLSCSUB6(f_TBgas,TBGAS,tbgas,FLOATV,INT,FLOATV,INT,FLOATV,FLOATV)
FCALLSCSUB7(C_TBgas,DTBGAS,dtbgas,DOUBLEV,INT,DOUBLEV,INT,DOUBLEV,DOUBLEV,STRING)

void f_TBgas(const float* energy, int nFlux, const float* params,
        int spectrumNumber, float* flux, float* fluxError)
{
   const size_t nPar = 2;
   fcppModelWrapper(energy, nFlux, params, spectrumNumber, flux, fluxError,
        nPar, tbgas);
}

void C_TBgas(const double* energy, int nFlux, const double* params,
        int spectrumNumber, double* flux, double* fluxError, const char* initStr)
{
   const size_t nPar = 2;
   cppModelWrapper(energy, nFlux, params, spectrumNumber, flux, fluxError,
        initStr, nPar, tbgas);
}

void CXX_TBgas(const RealArray& energyArray, const RealArray& params,
        int spectrumNumber, RealArray& fluxArray, RealArray& fluxErrArray, const string& initString)
{
   tbgas(energyArray, params, spectrumNumber, fluxArray, fluxErrArray, initString);
}

void f_tbgrain(const float* energy, int nFlux, const float* params,
	     int spectrumNumber, float* flux, float* fluxError);

void f_tbgrain(const float* energy, int nFlux, const float* params,
        int spectrumNumber, float* flux, float* fluxError)
{
   const size_t nPar = 6;
   fcppModelWrapper(energy, nFlux, params, spectrumNumber, flux, fluxError,
        nPar, tbgrain);
}

void C_tbgrain(const double* energy, int nFlux, const double* params,
        int spectrumNumber, double* flux, double* fluxError, const char* initStr)
{
   const size_t nPar = 6;
   cppModelWrapper(energy, nFlux, params, spectrumNumber, flux, fluxError,
        initStr, nPar, tbgrain);
}

void f_TBgrain(const float* energy, int nFlux, const float* params,
	     int spectrumNumber, float* flux, float* fluxError);

FCALLSCSUB6(f_TBgrain,TBGRAIN,tbgrain,FLOATV,INT,FLOATV,INT,FLOATV,FLOATV)
FCALLSCSUB7(C_TBgrain,DTBGRAIN,dtbgrain,DOUBLEV,INT,DOUBLEV,INT,DOUBLEV,DOUBLEV,STRING)

void f_TBgrain(const float* energy, int nFlux, const float* params,
        int spectrumNumber, float* flux, float* fluxError)
{
   const size_t nPar = 6;
   fcppModelWrapper(energy, nFlux, params, spectrumNumber, flux, fluxError,
        nPar, tbgrain);
}

void C_TBgrain(const double* energy, int nFlux, const double* params,
        int spectrumNumber, double* flux, double* fluxError, const char* initStr)
{
   const size_t nPar = 6;
   cppModelWrapper(energy, nFlux, params, spectrumNumber, flux, fluxError,
        initStr, nPar, tbgrain);
}

void CXX_TBgrain(const RealArray& energyArray, const RealArray& params,
        int spectrumNumber, RealArray& fluxArray, RealArray& fluxErrArray, const string& initString)
{
   tbgrain(energyArray, params, spectrumNumber, fluxArray, fluxErrArray, initString);
}

void f_tbvabs(const float* energy, int nFlux, const float* params,
	     int spectrumNumber, float* flux, float* fluxError);

FCALLSCSUB6(f_tbvabs,TBVABS,tbvabs,FLOATV,INT,FLOATV,INT,FLOATV,FLOATV)
FCALLSCSUB7(C_tbvabs,DTBVABS,dtbvabs,DOUBLEV,INT,DOUBLEV,INT,DOUBLEV,DOUBLEV,STRING)

void f_tbvabs(const float* energy, int nFlux, const float* params,
        int spectrumNumber, float* flux, float* fluxError)
{
   const size_t nPar = 42;
   fcppModelWrapper(energy, nFlux, params, spectrumNumber, flux, fluxError,
        nPar, tbvabs);
}

void C_tbvabs(const double* energy, int nFlux, const double* params,
        int spectrumNumber, double* flux, double* fluxError, const char* initStr)
{
   const size_t nPar = 42;
   cppModelWrapper(energy, nFlux, params, spectrumNumber, flux, fluxError,
        initStr, nPar, tbvabs);
}

void f_TBvarabs(const float* energy, int nFlux, const float* params,
	     int spectrumNumber, float* flux, float* fluxError);

FCALLSCSUB6(f_TBvarabs,TBVARABS,tbvarabs,FLOATV,INT,FLOATV,INT,FLOATV,FLOATV)
FCALLSCSUB7(C_TBvarabs,DTBVARABS,dtbvarabs,DOUBLEV,INT,DOUBLEV,INT,DOUBLEV,DOUBLEV,STRING)

void f_TBvarabs(const float* energy, int nFlux, const float* params,
        int spectrumNumber, float* flux, float* fluxError)
{
   const size_t nPar = 42;
   fcppModelWrapper(energy, nFlux, params, spectrumNumber, flux, fluxError,
        nPar, tbvabs);
}

void C_TBvarabs(const double* energy, int nFlux, const double* params,
        int spectrumNumber, double* flux, double* fluxError, const char* initStr)
{
   const size_t nPar = 42;
   cppModelWrapper(energy, nFlux, params, spectrumNumber, flux, fluxError,
        initStr, nPar, tbvabs);
}

void CXX_TBvarabs(const RealArray& energyArray, const RealArray& params,
        int spectrumNumber, RealArray& fluxArray, RealArray& fluxErrArray, const string& initString)
{
   tbvabs(energyArray, params, spectrumNumber, fluxArray, fluxErrArray, initString);
}

void f_tbpcf(const float* energy, int nFlux, const float* params,
	     int spectrumNumber, float* flux, float* fluxError);

void f_tbpcf(const float* energy, int nFlux, const float* params,
        int spectrumNumber, float* flux, float* fluxError)
{
   const size_t nPar = 3;
   fcppModelWrapper(energy, nFlux, params, spectrumNumber, flux, fluxError,
        nPar, tbpcf);
}

void C_tbpcf(const double* energy, int nFlux, const double* params,
        int spectrumNumber, double* flux, double* fluxError, const char* initStr)
{
   const size_t nPar = 3;
   cppModelWrapper(energy, nFlux, params, spectrumNumber, flux, fluxError,
        initStr, nPar, tbpcf);
}

void f_TBpcf(const float* energy, int nFlux, const float* params,
	     int spectrumNumber, float* flux, float* fluxError);

FCALLSCSUB6(f_TBpcf,TBPCF,tbpcf,FLOATV,INT,FLOATV,INT,FLOATV,FLOATV)
FCALLSCSUB7(C_TBpcf,DTBPCF,dtbpcf,DOUBLEV,INT,DOUBLEV,INT,DOUBLEV,DOUBLEV,STRING)

void f_TBpcf(const float* energy, int nFlux, const float* params,
        int spectrumNumber, float* flux, float* fluxError)
{
   const size_t nPar = 3;
   fcppModelWrapper(energy, nFlux, params, spectrumNumber, flux, fluxError,
        nPar, tbpcf);
}

void C_TBpcf(const double* energy, int nFlux, const double* params,
        int spectrumNumber, double* flux, double* fluxError, const char* initStr)
{
   const size_t nPar = 3;
   cppModelWrapper(energy, nFlux, params, spectrumNumber, flux, fluxError,
        initStr, nPar, tbpcf);
}

void CXX_TBpcf(const RealArray& energyArray, const RealArray& params,
        int spectrumNumber, RealArray& fluxArray, RealArray& fluxErrArray, const string& initString)
{
   tbpcf(energyArray, params, spectrumNumber, fluxArray, fluxErrArray, initString);
}

void f_tbrel(const float* energy, int nFlux, const float* params,
	     int spectrumNumber, float* flux, float* fluxError);

void f_tbrel(const float* energy, int nFlux, const float* params,
        int spectrumNumber, float* flux, float* fluxError)
{
   const size_t nPar = 42;
   fcppModelWrapper(energy, nFlux, params, spectrumNumber, flux, fluxError,
        nPar, tbrel);
}

void C_tbrel(const double* energy, int nFlux, const double* params,
        int spectrumNumber, double* flux, double* fluxError, const char* initStr)
{
   const size_t nPar = 42;
   cppModelWrapper(energy, nFlux, params, spectrumNumber, flux, fluxError,
        initStr, nPar, tbrel);
}

void f_TBrel(const float* energy, int nFlux, const float* params,
	     int spectrumNumber, float* flux, float* fluxError);

FCALLSCSUB6(f_TBrel,TBREL,tbrel,FLOATV,INT,FLOATV,INT,FLOATV,FLOATV)
FCALLSCSUB7(C_TBrel,DTBREL,dtbrel,DOUBLEV,INT,DOUBLEV,INT,DOUBLEV,DOUBLEV,STRING)

void f_TBrel(const float* energy, int nFlux, const float* params,
        int spectrumNumber, float* flux, float* fluxError)
{
   const size_t nPar = 42;
   fcppModelWrapper(energy, nFlux, params, spectrumNumber, flux, fluxError,
        nPar, tbrel);
}

void C_TBrel(const double* energy, int nFlux, const double* params,
        int spectrumNumber, double* flux, double* fluxError, const char* initStr)
{
   const size_t nPar = 42;
   cppModelWrapper(energy, nFlux, params, spectrumNumber, flux, fluxError,
        initStr, nPar, tbrel);
}

void CXX_TBrel(const RealArray& energyArray, const RealArray& params,
        int spectrumNumber, RealArray& fluxArray, RealArray& fluxErrArray, const string& initString)
{
   tbrel(energyArray, params, spectrumNumber, fluxArray, fluxErrArray, initString);
}

void f_uvred(const float* energy, int nFlux, const float* params,
	     int spectrumNumber, float* flux, float* fluxError);

FCALLSCSUB6(f_uvred,UVRED,uvred,FLOATV,INT,FLOATV,INT,FLOATV,FLOATV)
FCALLSCSUB7(C_uvred,DUVRED,duvred,DOUBLEV,INT,DOUBLEV,INT,DOUBLEV,DOUBLEV,STRING)

void f_uvred(const float* energy, int nFlux, const float* params,
        int spectrumNumber, float* flux, float* fluxError)
{
   xsred_(energy, nFlux, params, spectrumNumber, flux, fluxError);
}

void C_uvred(const double* energy, int nFlux, const double* params,
        int spectrumNumber, double* flux, double* fluxError, const char* initStr)
{
   const size_t nPar = 1;
   fModelWrapper(energy, nFlux, params, nPar, spectrumNumber, flux, fluxError,
        xsred_);
}

void CXX_uvred(const RealArray& energyArray, const RealArray& params,
        int spectrumNumber, RealArray& fluxArray, RealArray& fluxErrArray, const string& initString)
{
   XSModelFunction* funcObj = new XSCall<xsf77Call>(xsred_);
   (*funcObj)(energyArray, params, spectrumNumber, fluxArray, fluxErrArray, initString);
   delete funcObj;
}

void f_varabs(const float* energy, int nFlux, const float* params,
	     int spectrumNumber, float* flux, float* fluxError);

FCALLSCSUB6(f_varabs,VARABS,varabs,FLOATV,INT,FLOATV,INT,FLOATV,FLOATV)
FCALLSCSUB7(C_varabs,DVARABS,dvarabs,DOUBLEV,INT,DOUBLEV,INT,DOUBLEV,DOUBLEV,STRING)

void f_varabs(const float* energy, int nFlux, const float* params,
        int spectrumNumber, float* flux, float* fluxError)
{
   xsabsv_(energy, nFlux, params, spectrumNumber, flux, fluxError);
}

void C_varabs(const double* energy, int nFlux, const double* params,
        int spectrumNumber, double* flux, double* fluxError, const char* initStr)
{
   const size_t nPar = 18;
   fModelWrapper(energy, nFlux, params, nPar, spectrumNumber, flux, fluxError,
        xsabsv_);
}

void CXX_varabs(const RealArray& energyArray, const RealArray& params,
        int spectrumNumber, RealArray& fluxArray, RealArray& fluxErrArray, const string& initString)
{
   XSModelFunction* funcObj = new XSCall<xsf77Call>(xsabsv_);
   (*funcObj)(energyArray, params, spectrumNumber, fluxArray, fluxErrArray, initString);
   delete funcObj;
}

void f_vphabs(const float* energy, int nFlux, const float* params,
	     int spectrumNumber, float* flux, float* fluxError);

FCALLSCSUB6(f_vphabs,VPHABS,vphabs,FLOATV,INT,FLOATV,INT,FLOATV,FLOATV)
FCALLSCSUB7(C_vphabs,DVPHABS,dvphabs,DOUBLEV,INT,DOUBLEV,INT,DOUBLEV,DOUBLEV,STRING)

void f_vphabs(const float* energy, int nFlux, const float* params,
        int spectrumNumber, float* flux, float* fluxError)
{
   xsvphb_(energy, nFlux, params, spectrumNumber, flux, fluxError);
}

void C_vphabs(const double* energy, int nFlux, const double* params,
        int spectrumNumber, double* flux, double* fluxError, const char* initStr)
{
   const size_t nPar = 18;
   fModelWrapper(energy, nFlux, params, nPar, spectrumNumber, flux, fluxError,
        xsvphb_);
}

void CXX_vphabs(const RealArray& energyArray, const RealArray& params,
        int spectrumNumber, RealArray& fluxArray, RealArray& fluxErrArray, const string& initString)
{
   XSModelFunction* funcObj = new XSCall<xsf77Call>(xsvphb_);
   (*funcObj)(energyArray, params, spectrumNumber, fluxArray, fluxErrArray, initString);
   delete funcObj;
}

void f_wabs(const float* energy, int nFlux, const float* params,
	     int spectrumNumber, float* flux, float* fluxError);

FCALLSCSUB6(f_wabs,WABS,wabs,FLOATV,INT,FLOATV,INT,FLOATV,FLOATV)
FCALLSCSUB7(C_wabs,DWABS,dwabs,DOUBLEV,INT,DOUBLEV,INT,DOUBLEV,DOUBLEV,STRING)

void f_wabs(const float* energy, int nFlux, const float* params,
        int spectrumNumber, float* flux, float* fluxError)
{
   xsabsw_(energy, nFlux, params, spectrumNumber, flux, fluxError);
}

void C_wabs(const double* energy, int nFlux, const double* params,
        int spectrumNumber, double* flux, double* fluxError, const char* initStr)
{
   const size_t nPar = 1;
   fModelWrapper(energy, nFlux, params, nPar, spectrumNumber, flux, fluxError,
        xsabsw_);
}

void CXX_wabs(const RealArray& energyArray, const RealArray& params,
        int spectrumNumber, RealArray& fluxArray, RealArray& fluxErrArray, const string& initString)
{
   XSModelFunction* funcObj = new XSCall<xsf77Call>(xsabsw_);
   (*funcObj)(energyArray, params, spectrumNumber, fluxArray, fluxErrArray, initString);
   delete funcObj;
}

void f_wndabs(const float* energy, int nFlux, const float* params,
	     int spectrumNumber, float* flux, float* fluxError);

FCALLSCSUB6(f_wndabs,WNDABS,wndabs,FLOATV,INT,FLOATV,INT,FLOATV,FLOATV)
FCALLSCSUB7(C_wndabs,DWNDABS,dwndabs,DOUBLEV,INT,DOUBLEV,INT,DOUBLEV,DOUBLEV,STRING)

void f_wndabs(const float* energy, int nFlux, const float* params,
        int spectrumNumber, float* flux, float* fluxError)
{
   xswnab_(energy, nFlux, params, spectrumNumber, flux, fluxError);
}

void C_wndabs(const double* energy, int nFlux, const double* params,
        int spectrumNumber, double* flux, double* fluxError, const char* initStr)
{
   const size_t nPar = 2;
   fModelWrapper(energy, nFlux, params, nPar, spectrumNumber, flux, fluxError,
        xswnab_);
}

void CXX_wndabs(const RealArray& energyArray, const RealArray& params,
        int spectrumNumber, RealArray& fluxArray, RealArray& fluxErrArray, const string& initString)
{
   XSModelFunction* funcObj = new XSCall<xsf77Call>(xswnab_);
   (*funcObj)(energyArray, params, spectrumNumber, fluxArray, fluxErrArray, initString);
   delete funcObj;
}

void f_xion(const float* energy, int nFlux, const float* params,
	     int spectrumNumber, float* flux, float* fluxError);

FCALLSCSUB6(f_xion,XION,xion,FLOATV,INT,FLOATV,INT,FLOATV,FLOATV)
FCALLSCSUB7(C_xion,DXION,dxion,DOUBLEV,INT,DOUBLEV,INT,DOUBLEV,DOUBLEV,STRING)

void f_xion(const float* energy, int nFlux, const float* params,
        int spectrumNumber, float* flux, float* fluxError)
{
   xsxirf_(energy, nFlux, params, spectrumNumber, flux, fluxError);
}

void C_xion(const double* energy, int nFlux, const double* params,
        int spectrumNumber, double* flux, double* fluxError, const char* initStr)
{
   const size_t nPar = 13;
   fModelWrapper(energy, nFlux, params, nPar, spectrumNumber, flux, fluxError,
        xsxirf_);
}

void CXX_xion(const RealArray& energyArray, const RealArray& params,
        int spectrumNumber, RealArray& fluxArray, RealArray& fluxErrArray, const string& initString)
{
   XSModelFunction* funcObj = new XSCall<xsf77Call>(xsxirf_);
   (*funcObj)(energyArray, params, spectrumNumber, fluxArray, fluxErrArray, initString);
   delete funcObj;
}

void f_xscatmodel(const float* energy, int nFlux, const float* params,
	     int spectrumNumber, float* flux, float* fluxError);

FCALLSCSUB6(f_xscatmodel,XSCATMODEL,xscatmodel,FLOATV,INT,FLOATV,INT,FLOATV,FLOATV)
FCALLSCSUB7(C_xscatmodel,DXSCATMODEL,dxscatmodel,DOUBLEV,INT,DOUBLEV,INT,DOUBLEV,DOUBLEV,STRING)

void f_xscatmodel(const float* energy, int nFlux, const float* params,
        int spectrumNumber, float* flux, float* fluxError)
{
   const size_t nPar = 4;
   fcppModelWrapper(energy, nFlux, params, spectrumNumber, flux, fluxError,
        nPar, xscatmodel);
}

void C_xscatmodel(const double* energy, int nFlux, const double* params,
        int spectrumNumber, double* flux, double* fluxError, const char* initStr)
{
   const size_t nPar = 4;
   cppModelWrapper(energy, nFlux, params, spectrumNumber, flux, fluxError,
        initStr, nPar, xscatmodel);
}

void f_xscat(const float* energy, int nFlux, const float* params,
	     int spectrumNumber, float* flux, float* fluxError);

FCALLSCSUB6(f_xscat,XSCAT,xscat,FLOATV,INT,FLOATV,INT,FLOATV,FLOATV)
FCALLSCSUB7(C_xscat,DXSCAT,dxscat,DOUBLEV,INT,DOUBLEV,INT,DOUBLEV,DOUBLEV,STRING)

void f_xscat(const float* energy, int nFlux, const float* params,
        int spectrumNumber, float* flux, float* fluxError)
{
   const size_t nPar = 4;
   fcppModelWrapper(energy, nFlux, params, spectrumNumber, flux, fluxError,
        nPar, xscatmodel);
}

void C_xscat(const double* energy, int nFlux, const double* params,
        int spectrumNumber, double* flux, double* fluxError, const char* initStr)
{
   const size_t nPar = 4;
   cppModelWrapper(energy, nFlux, params, spectrumNumber, flux, fluxError,
        initStr, nPar, xscatmodel);
}

void CXX_xscat(const RealArray& energyArray, const RealArray& params,
        int spectrumNumber, RealArray& fluxArray, RealArray& fluxErrArray, const string& initString)
{
   xscatmodel(energyArray, params, spectrumNumber, fluxArray, fluxErrArray, initString);
}

void f_zbabs(const float* energy, int nFlux, const float* params,
	     int spectrumNumber, float* flux, float* fluxError);

FCALLSCSUB6(f_zbabs,ZBABS,zbabs,FLOATV,INT,FLOATV,INT,FLOATV,FLOATV)
FCALLSCSUB7(C_zbabs,DZBABS,dzbabs,DOUBLEV,INT,DOUBLEV,INT,DOUBLEV,DOUBLEV,STRING)

void f_zbabs(const float* energy, int nFlux, const float* params,
        int spectrumNumber, float* flux, float* fluxError)
{
   const size_t nPar = 4;
   cModelWrapper(energy, nFlux, params, spectrumNumber, flux, fluxError,
        nPar, xszbabs);
}

void C_zbabs(const double* energy, int nFlux, const double* params,
        int spectrumNumber, double* flux, double* fluxError, const char* initStr)
{
   xszbabs(energy, nFlux, params, spectrumNumber, flux, fluxError, initStr);
}

void CXX_zbabs(const RealArray& energyArray, const RealArray& params,
        int spectrumNumber, RealArray& fluxArray, RealArray& fluxErrArray, const string& initString)
{
   XSModelFunction* funcObj = new XSCall<xsccCall>(xszbabs);
   (*funcObj)(energyArray, params, spectrumNumber, fluxArray, fluxErrArray, initString);
   delete funcObj;
}

void f_zdust(const float* energy, int nFlux, const float* params,
	     int spectrumNumber, float* flux, float* fluxError);

FCALLSCSUB6(f_zdust,ZDUST,zdust,FLOATV,INT,FLOATV,INT,FLOATV,FLOATV)
FCALLSCSUB7(C_zdust,DZDUST,dzdust,DOUBLEV,INT,DOUBLEV,INT,DOUBLEV,DOUBLEV,STRING)

void f_zdust(const float* energy, int nFlux, const float* params,
        int spectrumNumber, float* flux, float* fluxError)
{
   mszdst_(energy, nFlux, params, spectrumNumber, flux, fluxError);
}

void C_zdust(const double* energy, int nFlux, const double* params,
        int spectrumNumber, double* flux, double* fluxError, const char* initStr)
{
   const size_t nPar = 4;
   fModelWrapper(energy, nFlux, params, nPar, spectrumNumber, flux, fluxError,
        mszdst_);
}

void CXX_zdust(const RealArray& energyArray, const RealArray& params,
        int spectrumNumber, RealArray& fluxArray, RealArray& fluxErrArray, const string& initString)
{
   XSModelFunction* funcObj = new XSCall<xsf77Call>(mszdst_);
   (*funcObj)(energyArray, params, spectrumNumber, fluxArray, fluxErrArray, initString);
   delete funcObj;
}

void f_zedge(const float* energy, int nFlux, const float* params,
	     int spectrumNumber, float* flux, float* fluxError);

FCALLSCSUB6(f_zedge,ZEDGE,zedge,FLOATV,INT,FLOATV,INT,FLOATV,FLOATV)
FCALLSCSUB7(C_zedge,DZEDGE,dzedge,DOUBLEV,INT,DOUBLEV,INT,DOUBLEV,DOUBLEV,STRING)

void f_zedge(const float* energy, int nFlux, const float* params,
        int spectrumNumber, float* flux, float* fluxError)
{
   xszedg_(energy, nFlux, params, spectrumNumber, flux, fluxError);
}

void C_zedge(const double* energy, int nFlux, const double* params,
        int spectrumNumber, double* flux, double* fluxError, const char* initStr)
{
   const size_t nPar = 3;
   fModelWrapper(energy, nFlux, params, nPar, spectrumNumber, flux, fluxError,
        xszedg_);
}

void CXX_zedge(const RealArray& energyArray, const RealArray& params,
        int spectrumNumber, RealArray& fluxArray, RealArray& fluxErrArray, const string& initString)
{
   XSModelFunction* funcObj = new XSCall<xsf77Call>(xszedg_);
   (*funcObj)(energyArray, params, spectrumNumber, fluxArray, fluxErrArray, initString);
   delete funcObj;
}

void f_zhighect(const float* energy, int nFlux, const float* params,
	     int spectrumNumber, float* flux, float* fluxError);

FCALLSCSUB6(f_zhighect,ZHIGHECT,zhighect,FLOATV,INT,FLOATV,INT,FLOATV,FLOATV)
FCALLSCSUB7(C_zhighect,DZHIGHECT,dzhighect,DOUBLEV,INT,DOUBLEV,INT,DOUBLEV,DOUBLEV,STRING)

void f_zhighect(const float* energy, int nFlux, const float* params,
        int spectrumNumber, float* flux, float* fluxError)
{
   xszhcu_(energy, nFlux, params, spectrumNumber, flux, fluxError);
}

void C_zhighect(const double* energy, int nFlux, const double* params,
        int spectrumNumber, double* flux, double* fluxError, const char* initStr)
{
   const size_t nPar = 3;
   fModelWrapper(energy, nFlux, params, nPar, spectrumNumber, flux, fluxError,
        xszhcu_);
}

void CXX_zhighect(const RealArray& energyArray, const RealArray& params,
        int spectrumNumber, RealArray& fluxArray, RealArray& fluxErrArray, const string& initString)
{
   XSModelFunction* funcObj = new XSCall<xsf77Call>(xszhcu_);
   (*funcObj)(energyArray, params, spectrumNumber, fluxArray, fluxErrArray, initString);
   delete funcObj;
}

void C_zigm(const double* energy, int nFlux, const double* params,
        int spectrumNumber, double* flux, double* fluxError, const char* initStr)
{
   const size_t nPar = 3;
   fModelWrapper(energy, nFlux, params, nPar, spectrumNumber, flux, fluxError,
        zigm_);
}

void CXX_zigm(const RealArray& energyArray, const RealArray& params,
        int spectrumNumber, RealArray& fluxArray, RealArray& fluxErrArray, const string& initString)
{
   XSModelFunction* funcObj = new XSCall<xsf77Call>(zigm_);
   (*funcObj)(energyArray, params, spectrumNumber, fluxArray, fluxErrArray, initString);
   delete funcObj;
}

void f_zpcfabs(const float* energy, int nFlux, const float* params,
	     int spectrumNumber, float* flux, float* fluxError);

FCALLSCSUB6(f_zpcfabs,ZPCFABS,zpcfabs,FLOATV,INT,FLOATV,INT,FLOATV,FLOATV)
FCALLSCSUB7(C_zpcfabs,DZPCFABS,dzpcfabs,DOUBLEV,INT,DOUBLEV,INT,DOUBLEV,DOUBLEV,STRING)

void f_zpcfabs(const float* energy, int nFlux, const float* params,
        int spectrumNumber, float* flux, float* fluxError)
{
   xszabp_(energy, nFlux, params, spectrumNumber, flux, fluxError);
}

void C_zpcfabs(const double* energy, int nFlux, const double* params,
        int spectrumNumber, double* flux, double* fluxError, const char* initStr)
{
   const size_t nPar = 3;
   fModelWrapper(energy, nFlux, params, nPar, spectrumNumber, flux, fluxError,
        xszabp_);
}

void CXX_zpcfabs(const RealArray& energyArray, const RealArray& params,
        int spectrumNumber, RealArray& fluxArray, RealArray& fluxErrArray, const string& initString)
{
   XSModelFunction* funcObj = new XSCall<xsf77Call>(xszabp_);
   (*funcObj)(energyArray, params, spectrumNumber, fluxArray, fluxErrArray, initString);
   delete funcObj;
}

void f_zphabs(const float* energy, int nFlux, const float* params,
	     int spectrumNumber, float* flux, float* fluxError);

FCALLSCSUB6(f_zphabs,ZPHABS,zphabs,FLOATV,INT,FLOATV,INT,FLOATV,FLOATV)
FCALLSCSUB7(C_zphabs,DZPHABS,dzphabs,DOUBLEV,INT,DOUBLEV,INT,DOUBLEV,DOUBLEV,STRING)

void f_zphabs(const float* energy, int nFlux, const float* params,
        int spectrumNumber, float* flux, float* fluxError)
{
   xszphb_(energy, nFlux, params, spectrumNumber, flux, fluxError);
}

void C_zphabs(const double* energy, int nFlux, const double* params,
        int spectrumNumber, double* flux, double* fluxError, const char* initStr)
{
   const size_t nPar = 2;
   fModelWrapper(energy, nFlux, params, nPar, spectrumNumber, flux, fluxError,
        xszphb_);
}

void CXX_zphabs(const RealArray& energyArray, const RealArray& params,
        int spectrumNumber, RealArray& fluxArray, RealArray& fluxErrArray, const string& initString)
{
   XSModelFunction* funcObj = new XSCall<xsf77Call>(xszphb_);
   (*funcObj)(energyArray, params, spectrumNumber, fluxArray, fluxErrArray, initString);
   delete funcObj;
}

void f_zxipcf(const float* energy, int nFlux, const float* params,
	     int spectrumNumber, float* flux, float* fluxError);

FCALLSCSUB6(f_zxipcf,ZXIPCF,zxipcf,FLOATV,INT,FLOATV,INT,FLOATV,FLOATV)
FCALLSCSUB7(C_zxipcf,DZXIPCF,dzxipcf,DOUBLEV,INT,DOUBLEV,INT,DOUBLEV,DOUBLEV,STRING)

void f_zxipcf(const float* energy, int nFlux, const float* params,
        int spectrumNumber, float* flux, float* fluxError)
{
   const size_t nPar = 4;
   fcppModelWrapper(energy, nFlux, params, spectrumNumber, flux, fluxError,
        nPar, zxipcf);
}

void C_zxipcf(const double* energy, int nFlux, const double* params,
        int spectrumNumber, double* flux, double* fluxError, const char* initStr)
{
   const size_t nPar = 4;
   cppModelWrapper(energy, nFlux, params, spectrumNumber, flux, fluxError,
        initStr, nPar, zxipcf);
}

void CXX_zxipcf(const RealArray& energyArray, const RealArray& params,
        int spectrumNumber, RealArray& fluxArray, RealArray& fluxErrArray, const string& initString)
{
   zxipcf(energyArray, params, spectrumNumber, fluxArray, fluxErrArray, initString);
}

void f_zredden(const float* energy, int nFlux, const float* params,
	     int spectrumNumber, float* flux, float* fluxError);

FCALLSCSUB6(f_zredden,ZREDDEN,zredden,FLOATV,INT,FLOATV,INT,FLOATV,FLOATV)
FCALLSCSUB7(C_zredden,DZREDDEN,dzredden,DOUBLEV,INT,DOUBLEV,INT,DOUBLEV,DOUBLEV,STRING)

void f_zredden(const float* energy, int nFlux, const float* params,
        int spectrumNumber, float* flux, float* fluxError)
{
   xszcrd_(energy, nFlux, params, spectrumNumber, flux, fluxError);
}

void C_zredden(const double* energy, int nFlux, const double* params,
        int spectrumNumber, double* flux, double* fluxError, const char* initStr)
{
   const size_t nPar = 2;
   fModelWrapper(energy, nFlux, params, nPar, spectrumNumber, flux, fluxError,
        xszcrd_);
}

void CXX_zredden(const RealArray& energyArray, const RealArray& params,
        int spectrumNumber, RealArray& fluxArray, RealArray& fluxErrArray, const string& initString)
{
   XSModelFunction* funcObj = new XSCall<xsf77Call>(xszcrd_);
   (*funcObj)(energyArray, params, spectrumNumber, fluxArray, fluxErrArray, initString);
   delete funcObj;
}

void f_zsmdust(const float* energy, int nFlux, const float* params,
	     int spectrumNumber, float* flux, float* fluxError);

FCALLSCSUB6(f_zsmdust,ZSMDUST,zsmdust,FLOATV,INT,FLOATV,INT,FLOATV,FLOATV)
FCALLSCSUB7(C_zsmdust,DZSMDUST,dzsmdust,DOUBLEV,INT,DOUBLEV,INT,DOUBLEV,DOUBLEV,STRING)

void f_zsmdust(const float* energy, int nFlux, const float* params,
        int spectrumNumber, float* flux, float* fluxError)
{
   msldst_(energy, nFlux, params, spectrumNumber, flux, fluxError);
}

void C_zsmdust(const double* energy, int nFlux, const double* params,
        int spectrumNumber, double* flux, double* fluxError, const char* initStr)
{
   const size_t nPar = 4;
   fModelWrapper(energy, nFlux, params, nPar, spectrumNumber, flux, fluxError,
        msldst_);
}

void CXX_zsmdust(const RealArray& energyArray, const RealArray& params,
        int spectrumNumber, RealArray& fluxArray, RealArray& fluxErrArray, const string& initString)
{
   XSModelFunction* funcObj = new XSCall<xsf77Call>(msldst_);
   (*funcObj)(energyArray, params, spectrumNumber, fluxArray, fluxErrArray, initString);
   delete funcObj;
}

void f_ztbabs(const float* energy, int nFlux, const float* params,
	     int spectrumNumber, float* flux, float* fluxError);

void f_ztbabs(const float* energy, int nFlux, const float* params,
        int spectrumNumber, float* flux, float* fluxError)
{
   const size_t nPar = 2;
   fcppModelWrapper(energy, nFlux, params, spectrumNumber, flux, fluxError,
        nPar, ztbabs);
}

void C_ztbabs(const double* energy, int nFlux, const double* params,
        int spectrumNumber, double* flux, double* fluxError, const char* initStr)
{
   const size_t nPar = 2;
   cppModelWrapper(energy, nFlux, params, spectrumNumber, flux, fluxError,
        initStr, nPar, ztbabs);
}

void f_zTBabs(const float* energy, int nFlux, const float* params,
	     int spectrumNumber, float* flux, float* fluxError);

FCALLSCSUB6(f_zTBabs,ZTBABS,ztbabs,FLOATV,INT,FLOATV,INT,FLOATV,FLOATV)
FCALLSCSUB7(C_zTBabs,DZTBABS,dztbabs,DOUBLEV,INT,DOUBLEV,INT,DOUBLEV,DOUBLEV,STRING)

void f_zTBabs(const float* energy, int nFlux, const float* params,
        int spectrumNumber, float* flux, float* fluxError)
{
   const size_t nPar = 2;
   fcppModelWrapper(energy, nFlux, params, spectrumNumber, flux, fluxError,
        nPar, ztbabs);
}

void C_zTBabs(const double* energy, int nFlux, const double* params,
        int spectrumNumber, double* flux, double* fluxError, const char* initStr)
{
   const size_t nPar = 2;
   cppModelWrapper(energy, nFlux, params, spectrumNumber, flux, fluxError,
        initStr, nPar, ztbabs);
}

void CXX_zTBabs(const RealArray& energyArray, const RealArray& params,
        int spectrumNumber, RealArray& fluxArray, RealArray& fluxErrArray, const string& initString)
{
   ztbabs(energyArray, params, spectrumNumber, fluxArray, fluxErrArray, initString);
}

void f_zvarabs(const float* energy, int nFlux, const float* params,
	     int spectrumNumber, float* flux, float* fluxError);

FCALLSCSUB6(f_zvarabs,ZVARABS,zvarabs,FLOATV,INT,FLOATV,INT,FLOATV,FLOATV)
FCALLSCSUB7(C_zvarabs,DZVARABS,dzvarabs,DOUBLEV,INT,DOUBLEV,INT,DOUBLEV,DOUBLEV,STRING)

void f_zvarabs(const float* energy, int nFlux, const float* params,
        int spectrumNumber, float* flux, float* fluxError)
{
   xszvab_(energy, nFlux, params, spectrumNumber, flux, fluxError);
}

void C_zvarabs(const double* energy, int nFlux, const double* params,
        int spectrumNumber, double* flux, double* fluxError, const char* initStr)
{
   const size_t nPar = 19;
   fModelWrapper(energy, nFlux, params, nPar, spectrumNumber, flux, fluxError,
        xszvab_);
}

void CXX_zvarabs(const RealArray& energyArray, const RealArray& params,
        int spectrumNumber, RealArray& fluxArray, RealArray& fluxErrArray, const string& initString)
{
   XSModelFunction* funcObj = new XSCall<xsf77Call>(xszvab_);
   (*funcObj)(energyArray, params, spectrumNumber, fluxArray, fluxErrArray, initString);
   delete funcObj;
}

void f_zvfeabs(const float* energy, int nFlux, const float* params,
	     int spectrumNumber, float* flux, float* fluxError);

FCALLSCSUB6(f_zvfeabs,ZVFEABS,zvfeabs,FLOATV,INT,FLOATV,INT,FLOATV,FLOATV)
FCALLSCSUB7(C_zvfeabs,DZVFEABS,dzvfeabs,DOUBLEV,INT,DOUBLEV,INT,DOUBLEV,DOUBLEV,STRING)

void f_zvfeabs(const float* energy, int nFlux, const float* params,
        int spectrumNumber, float* flux, float* fluxError)
{
   xszvfe_(energy, nFlux, params, spectrumNumber, flux, fluxError);
}

void C_zvfeabs(const double* energy, int nFlux, const double* params,
        int spectrumNumber, double* flux, double* fluxError, const char* initStr)
{
   const size_t nPar = 5;
   fModelWrapper(energy, nFlux, params, nPar, spectrumNumber, flux, fluxError,
        xszvfe_);
}

void CXX_zvfeabs(const RealArray& energyArray, const RealArray& params,
        int spectrumNumber, RealArray& fluxArray, RealArray& fluxErrArray, const string& initString)
{
   XSModelFunction* funcObj = new XSCall<xsf77Call>(xszvfe_);
   (*funcObj)(energyArray, params, spectrumNumber, fluxArray, fluxErrArray, initString);
   delete funcObj;
}

void f_zvphabs(const float* energy, int nFlux, const float* params,
	     int spectrumNumber, float* flux, float* fluxError);

FCALLSCSUB6(f_zvphabs,ZVPHABS,zvphabs,FLOATV,INT,FLOATV,INT,FLOATV,FLOATV)
FCALLSCSUB7(C_zvphabs,DZVPHABS,dzvphabs,DOUBLEV,INT,DOUBLEV,INT,DOUBLEV,DOUBLEV,STRING)

void f_zvphabs(const float* energy, int nFlux, const float* params,
        int spectrumNumber, float* flux, float* fluxError)
{
   xszvph_(energy, nFlux, params, spectrumNumber, flux, fluxError);
}

void C_zvphabs(const double* energy, int nFlux, const double* params,
        int spectrumNumber, double* flux, double* fluxError, const char* initStr)
{
   const size_t nPar = 19;
   fModelWrapper(energy, nFlux, params, nPar, spectrumNumber, flux, fluxError,
        xszvph_);
}

void CXX_zvphabs(const RealArray& energyArray, const RealArray& params,
        int spectrumNumber, RealArray& fluxArray, RealArray& fluxErrArray, const string& initString)
{
   XSModelFunction* funcObj = new XSCall<xsf77Call>(xszvph_);
   (*funcObj)(energyArray, params, spectrumNumber, fluxArray, fluxErrArray, initString);
   delete funcObj;
}

void f_zwabs(const float* energy, int nFlux, const float* params,
	     int spectrumNumber, float* flux, float* fluxError);

FCALLSCSUB6(f_zwabs,ZWABS,zwabs,FLOATV,INT,FLOATV,INT,FLOATV,FLOATV)
FCALLSCSUB7(C_zwabs,DZWABS,dzwabs,DOUBLEV,INT,DOUBLEV,INT,DOUBLEV,DOUBLEV,STRING)

void f_zwabs(const float* energy, int nFlux, const float* params,
        int spectrumNumber, float* flux, float* fluxError)
{
   xszabs_(energy, nFlux, params, spectrumNumber, flux, fluxError);
}

void C_zwabs(const double* energy, int nFlux, const double* params,
        int spectrumNumber, double* flux, double* fluxError, const char* initStr)
{
   const size_t nPar = 2;
   fModelWrapper(energy, nFlux, params, nPar, spectrumNumber, flux, fluxError,
        xszabs_);
}

void CXX_zwabs(const RealArray& energyArray, const RealArray& params,
        int spectrumNumber, RealArray& fluxArray, RealArray& fluxErrArray, const string& initString)
{
   XSModelFunction* funcObj = new XSCall<xsf77Call>(xszabs_);
   (*funcObj)(energyArray, params, spectrumNumber, fluxArray, fluxErrArray, initString);
   delete funcObj;
}

void f_zwndabs(const float* energy, int nFlux, const float* params,
	     int spectrumNumber, float* flux, float* fluxError);

FCALLSCSUB6(f_zwndabs,ZWNDABS,zwndabs,FLOATV,INT,FLOATV,INT,FLOATV,FLOATV)
FCALLSCSUB7(C_zwndabs,DZWNDABS,dzwndabs,DOUBLEV,INT,DOUBLEV,INT,DOUBLEV,DOUBLEV,STRING)

void f_zwndabs(const float* energy, int nFlux, const float* params,
        int spectrumNumber, float* flux, float* fluxError)
{
   xszwnb_(energy, nFlux, params, spectrumNumber, flux, fluxError);
}

void C_zwndabs(const double* energy, int nFlux, const double* params,
        int spectrumNumber, double* flux, double* fluxError, const char* initStr)
{
   const size_t nPar = 3;
   fModelWrapper(energy, nFlux, params, nPar, spectrumNumber, flux, fluxError,
        xszwnb_);
}

void CXX_zwndabs(const RealArray& energyArray, const RealArray& params,
        int spectrumNumber, RealArray& fluxArray, RealArray& fluxErrArray, const string& initString)
{
   XSModelFunction* funcObj = new XSCall<xsf77Call>(xszwnb_);
   (*funcObj)(energyArray, params, spectrumNumber, fluxArray, fluxErrArray, initString);
   delete funcObj;
}

void f_cflux(const float* energy, int nFlux, const float* params,
	     int spectrumNumber, float* flux, float* fluxError);

FCALLSCSUB6(f_cflux,CFLUX,cflux,FLOATV,INT,FLOATV,INT,FLOATV,FLOATV)
FCALLSCSUB7(C_cflux,DCFLUX,dcflux,DOUBLEV,INT,DOUBLEV,INT,DOUBLEV,DOUBLEV,STRING)

void f_cflux(const float* energy, int nFlux, const float* params,
        int spectrumNumber, float* flux, float* fluxError)
{
   const size_t nPar = 3;
   fcppModelWrapper(energy, nFlux, params, spectrumNumber, flux, fluxError,
        nPar, cflux);
}

void C_cflux(const double* energy, int nFlux, const double* params,
        int spectrumNumber, double* flux, double* fluxError, const char* initStr)
{
   const size_t nPar = 3;
   cppModelWrapper(energy, nFlux, params, spectrumNumber, flux, fluxError,
        initStr, nPar, cflux);
}

void CXX_cflux(const RealArray& energyArray, const RealArray& params,
        int spectrumNumber, RealArray& fluxArray, RealArray& fluxErrArray, const string& initString)
{
   cflux(energyArray, params, spectrumNumber, fluxArray, fluxErrArray, initString);
}

void f_clumin(const float* energy, int nFlux, const float* params,
	     int spectrumNumber, float* flux, float* fluxError);

FCALLSCSUB6(f_clumin,CLUMIN,clumin,FLOATV,INT,FLOATV,INT,FLOATV,FLOATV)
FCALLSCSUB7(C_clumin,DCLUMIN,dclumin,DOUBLEV,INT,DOUBLEV,INT,DOUBLEV,DOUBLEV,STRING)

void f_clumin(const float* energy, int nFlux, const float* params,
        int spectrumNumber, float* flux, float* fluxError)
{
   const size_t nPar = 4;
   fcppModelWrapper(energy, nFlux, params, spectrumNumber, flux, fluxError,
        nPar, clumin);
}

void C_clumin(const double* energy, int nFlux, const double* params,
        int spectrumNumber, double* flux, double* fluxError, const char* initStr)
{
   const size_t nPar = 4;
   cppModelWrapper(energy, nFlux, params, spectrumNumber, flux, fluxError,
        initStr, nPar, clumin);
}

void CXX_clumin(const RealArray& energyArray, const RealArray& params,
        int spectrumNumber, RealArray& fluxArray, RealArray& fluxErrArray, const string& initString)
{
   clumin(energyArray, params, spectrumNumber, fluxArray, fluxErrArray, initString);
}

void f_cpflux(const float* energy, int nFlux, const float* params,
	     int spectrumNumber, float* flux, float* fluxError);

FCALLSCSUB6(f_cpflux,CPFLUX,cpflux,FLOATV,INT,FLOATV,INT,FLOATV,FLOATV)
FCALLSCSUB7(C_cpflux,DCPFLUX,dcpflux,DOUBLEV,INT,DOUBLEV,INT,DOUBLEV,DOUBLEV,STRING)

void f_cpflux(const float* energy, int nFlux, const float* params,
        int spectrumNumber, float* flux, float* fluxError)
{
   const size_t nPar = 3;
   fcppModelWrapper(energy, nFlux, params, spectrumNumber, flux, fluxError,
        nPar, cpflux);
}

void C_cpflux(const double* energy, int nFlux, const double* params,
        int spectrumNumber, double* flux, double* fluxError, const char* initStr)
{
   const size_t nPar = 3;
   cppModelWrapper(energy, nFlux, params, spectrumNumber, flux, fluxError,
        initStr, nPar, cpflux);
}

void CXX_cpflux(const RealArray& energyArray, const RealArray& params,
        int spectrumNumber, RealArray& fluxArray, RealArray& fluxErrArray, const string& initString)
{
   cpflux(energyArray, params, spectrumNumber, fluxArray, fluxErrArray, initString);
}

void f_gsmooth(const float* energy, int nFlux, const float* params,
	     int spectrumNumber, float* flux, float* fluxError);

FCALLSCSUB6(f_gsmooth,GSMOOTH,gsmooth,FLOATV,INT,FLOATV,INT,FLOATV,FLOATV)
FCALLSCSUB7(C_gsmooth,DGSMOOTH,dgsmooth,DOUBLEV,INT,DOUBLEV,INT,DOUBLEV,DOUBLEV,STRING)

void f_gsmooth(const float* energy, int nFlux, const float* params,
        int spectrumNumber, float* flux, float* fluxError)
{
   const size_t nPar = 2;
   fcppModelWrapper(energy, nFlux, params, spectrumNumber, flux, fluxError,
        nPar, gsmooth);
}

void C_gsmooth(const double* energy, int nFlux, const double* params,
        int spectrumNumber, double* flux, double* fluxError, const char* initStr)
{
   const size_t nPar = 2;
   cppModelWrapper(energy, nFlux, params, spectrumNumber, flux, fluxError,
        initStr, nPar, gsmooth);
}

void CXX_gsmooth(const RealArray& energyArray, const RealArray& params,
        int spectrumNumber, RealArray& fluxArray, RealArray& fluxErrArray, const string& initString)
{
   gsmooth(energyArray, params, spectrumNumber, fluxArray, fluxErrArray, initString);
}

void f_ireflct(const float* energy, int nFlux, const float* params,
	     int spectrumNumber, float* flux, float* fluxError);

FCALLSCSUB6(f_ireflct,IREFLCT,ireflct,FLOATV,INT,FLOATV,INT,FLOATV,FLOATV)
FCALLSCSUB7(C_ireflct,DIREFLCT,direflct,DOUBLEV,INT,DOUBLEV,INT,DOUBLEV,DOUBLEV,STRING)

void f_ireflct(const float* energy, int nFlux, const float* params,
        int spectrumNumber, float* flux, float* fluxError)
{
   const size_t nPar = 7;
   fcppModelWrapper(energy, nFlux, params, spectrumNumber, flux, fluxError,
        nPar, ireflct);
}

void C_ireflct(const double* energy, int nFlux, const double* params,
        int spectrumNumber, double* flux, double* fluxError, const char* initStr)
{
   const size_t nPar = 7;
   cppModelWrapper(energy, nFlux, params, spectrumNumber, flux, fluxError,
        initStr, nPar, ireflct);
}

void f_ireflect(const float* energy, int nFlux, const float* params,
	     int spectrumNumber, float* flux, float* fluxError);

FCALLSCSUB6(f_ireflect,IREFLECT,ireflect,FLOATV,INT,FLOATV,INT,FLOATV,FLOATV)
FCALLSCSUB7(C_ireflect,DIREFLECT,direflect,DOUBLEV,INT,DOUBLEV,INT,DOUBLEV,DOUBLEV,STRING)

void f_ireflect(const float* energy, int nFlux, const float* params,
        int spectrumNumber, float* flux, float* fluxError)
{
   const size_t nPar = 7;
   fcppModelWrapper(energy, nFlux, params, spectrumNumber, flux, fluxError,
        nPar, ireflct);
}

void C_ireflect(const double* energy, int nFlux, const double* params,
        int spectrumNumber, double* flux, double* fluxError, const char* initStr)
{
   const size_t nPar = 7;
   cppModelWrapper(energy, nFlux, params, spectrumNumber, flux, fluxError,
        initStr, nPar, ireflct);
}

void CXX_ireflect(const RealArray& energyArray, const RealArray& params,
        int spectrumNumber, RealArray& fluxArray, RealArray& fluxErrArray, const string& initString)
{
   ireflct(energyArray, params, spectrumNumber, fluxArray, fluxErrArray, initString);
}

void f_kdblur(const float* energy, int nFlux, const float* params,
	     int spectrumNumber, float* flux, float* fluxError);

FCALLSCSUB6(f_kdblur,KDBLUR,kdblur,FLOATV,INT,FLOATV,INT,FLOATV,FLOATV)
FCALLSCSUB7(C_kdblur,DKDBLUR,dkdblur,DOUBLEV,INT,DOUBLEV,INT,DOUBLEV,DOUBLEV,STRING)

void f_kdblur(const float* energy, int nFlux, const float* params,
        int spectrumNumber, float* flux, float* fluxError)
{
   const size_t nPar = 4;
   fcppModelWrapper(energy, nFlux, params, spectrumNumber, flux, fluxError,
        nPar, kdblur);
}

void C_kdblur(const double* energy, int nFlux, const double* params,
        int spectrumNumber, double* flux, double* fluxError, const char* initStr)
{
   const size_t nPar = 4;
   cppModelWrapper(energy, nFlux, params, spectrumNumber, flux, fluxError,
        initStr, nPar, kdblur);
}

void CXX_kdblur(const RealArray& energyArray, const RealArray& params,
        int spectrumNumber, RealArray& fluxArray, RealArray& fluxErrArray, const string& initString)
{
   kdblur(energyArray, params, spectrumNumber, fluxArray, fluxErrArray, initString);
}

void f_kdblur2(const float* energy, int nFlux, const float* params,
	     int spectrumNumber, float* flux, float* fluxError);

FCALLSCSUB6(f_kdblur2,KDBLUR2,kdblur2,FLOATV,INT,FLOATV,INT,FLOATV,FLOATV)
FCALLSCSUB7(C_kdblur2,DKDBLUR2,dkdblur2,DOUBLEV,INT,DOUBLEV,INT,DOUBLEV,DOUBLEV,STRING)

void f_kdblur2(const float* energy, int nFlux, const float* params,
        int spectrumNumber, float* flux, float* fluxError)
{
   const size_t nPar = 6;
   fcppModelWrapper(energy, nFlux, params, spectrumNumber, flux, fluxError,
        nPar, kdblur2);
}

void C_kdblur2(const double* energy, int nFlux, const double* params,
        int spectrumNumber, double* flux, double* fluxError, const char* initStr)
{
   const size_t nPar = 6;
   cppModelWrapper(energy, nFlux, params, spectrumNumber, flux, fluxError,
        initStr, nPar, kdblur2);
}

void CXX_kdblur2(const RealArray& energyArray, const RealArray& params,
        int spectrumNumber, RealArray& fluxArray, RealArray& fluxErrArray, const string& initString)
{
   kdblur2(energyArray, params, spectrumNumber, fluxArray, fluxErrArray, initString);
}

void f_spinconv(const float* energy, int nFlux, const float* params,
	     int spectrumNumber, float* flux, float* fluxError);

FCALLSCSUB6(f_spinconv,SPINCONV,spinconv,FLOATV,INT,FLOATV,INT,FLOATV,FLOATV)
FCALLSCSUB7(C_spinconv,DSPINCONV,dspinconv,DOUBLEV,INT,DOUBLEV,INT,DOUBLEV,DOUBLEV,STRING)

void f_spinconv(const float* energy, int nFlux, const float* params,
        int spectrumNumber, float* flux, float* fluxError)
{
   const size_t nPar = 7;
   fcppModelWrapper(energy, nFlux, params, spectrumNumber, flux, fluxError,
        nPar, spinconv);
}

void C_spinconv(const double* energy, int nFlux, const double* params,
        int spectrumNumber, double* flux, double* fluxError, const char* initStr)
{
   const size_t nPar = 7;
   cppModelWrapper(energy, nFlux, params, spectrumNumber, flux, fluxError,
        initStr, nPar, spinconv);
}

void f_kerrconv(const float* energy, int nFlux, const float* params,
	     int spectrumNumber, float* flux, float* fluxError);

FCALLSCSUB6(f_kerrconv,KERRCONV,kerrconv,FLOATV,INT,FLOATV,INT,FLOATV,FLOATV)
FCALLSCSUB7(C_kerrconv,DKERRCONV,dkerrconv,DOUBLEV,INT,DOUBLEV,INT,DOUBLEV,DOUBLEV,STRING)

void f_kerrconv(const float* energy, int nFlux, const float* params,
        int spectrumNumber, float* flux, float* fluxError)
{
   const size_t nPar = 7;
   fcppModelWrapper(energy, nFlux, params, spectrumNumber, flux, fluxError,
        nPar, spinconv);
}

void C_kerrconv(const double* energy, int nFlux, const double* params,
        int spectrumNumber, double* flux, double* fluxError, const char* initStr)
{
   const size_t nPar = 7;
   cppModelWrapper(energy, nFlux, params, spectrumNumber, flux, fluxError,
        initStr, nPar, spinconv);
}

void CXX_kerrconv(const RealArray& energyArray, const RealArray& params,
        int spectrumNumber, RealArray& fluxArray, RealArray& fluxErrArray, const string& initString)
{
   spinconv(energyArray, params, spectrumNumber, fluxArray, fluxErrArray, initString);
}

void f_lsmooth(const float* energy, int nFlux, const float* params,
	     int spectrumNumber, float* flux, float* fluxError);

FCALLSCSUB6(f_lsmooth,LSMOOTH,lsmooth,FLOATV,INT,FLOATV,INT,FLOATV,FLOATV)
FCALLSCSUB7(C_lsmooth,DLSMOOTH,dlsmooth,DOUBLEV,INT,DOUBLEV,INT,DOUBLEV,DOUBLEV,STRING)

void f_lsmooth(const float* energy, int nFlux, const float* params,
        int spectrumNumber, float* flux, float* fluxError)
{
   const size_t nPar = 2;
   fcppModelWrapper(energy, nFlux, params, spectrumNumber, flux, fluxError,
        nPar, lsmooth);
}

void C_lsmooth(const double* energy, int nFlux, const double* params,
        int spectrumNumber, double* flux, double* fluxError, const char* initStr)
{
   const size_t nPar = 2;
   cppModelWrapper(energy, nFlux, params, spectrumNumber, flux, fluxError,
        initStr, nPar, lsmooth);
}

void CXX_lsmooth(const RealArray& energyArray, const RealArray& params,
        int spectrumNumber, RealArray& fluxArray, RealArray& fluxErrArray, const string& initString)
{
   lsmooth(energyArray, params, spectrumNumber, fluxArray, fluxErrArray, initString);
}

void f_PartialCovering(const float* energy, int nFlux, const float* params,
	     int spectrumNumber, float* flux, float* fluxError);

FCALLSCSUB6(f_PartialCovering,PRTCOV,prtcov,FLOATV,INT,FLOATV,INT,FLOATV,FLOATV)
FCALLSCSUB7(C_PartialCovering,DPRTCOV,dprtcov,DOUBLEV,INT,DOUBLEV,INT,DOUBLEV,DOUBLEV,STRING)

void f_PartialCovering(const float* energy, int nFlux, const float* params,
        int spectrumNumber, float* flux, float* fluxError)
{
   const size_t nPar = 1;
   fcppModelWrapper(energy, nFlux, params, spectrumNumber, flux, fluxError,
        nPar, PartialCovering);
}

void C_PartialCovering(const double* energy, int nFlux, const double* params,
        int spectrumNumber, double* flux, double* fluxError, const char* initStr)
{
   const size_t nPar = 1;
   cppModelWrapper(energy, nFlux, params, spectrumNumber, flux, fluxError,
        initStr, nPar, PartialCovering);
}

void f_partcov(const float* energy, int nFlux, const float* params,
	     int spectrumNumber, float* flux, float* fluxError);

FCALLSCSUB6(f_partcov,PARTCOV,partcov,FLOATV,INT,FLOATV,INT,FLOATV,FLOATV)
FCALLSCSUB7(C_partcov,DPARTCOV,dpartcov,DOUBLEV,INT,DOUBLEV,INT,DOUBLEV,DOUBLEV,STRING)

void f_partcov(const float* energy, int nFlux, const float* params,
        int spectrumNumber, float* flux, float* fluxError)
{
   const size_t nPar = 1;
   fcppModelWrapper(energy, nFlux, params, spectrumNumber, flux, fluxError,
        nPar, PartialCovering);
}

void C_partcov(const double* energy, int nFlux, const double* params,
        int spectrumNumber, double* flux, double* fluxError, const char* initStr)
{
   const size_t nPar = 1;
   cppModelWrapper(energy, nFlux, params, spectrumNumber, flux, fluxError,
        initStr, nPar, PartialCovering);
}

void CXX_partcov(const RealArray& energyArray, const RealArray& params,
        int spectrumNumber, RealArray& fluxArray, RealArray& fluxErrArray, const string& initString)
{
   PartialCovering(energyArray, params, spectrumNumber, fluxArray, fluxErrArray, initString);
}

void f_rdblur(const float* energy, int nFlux, const float* params,
	     int spectrumNumber, float* flux, float* fluxError);

FCALLSCSUB6(f_rdblur,RDBLUR,rdblur,FLOATV,INT,FLOATV,INT,FLOATV,FLOATV)
FCALLSCSUB7(C_rdblur,DRDBLUR,drdblur,DOUBLEV,INT,DOUBLEV,INT,DOUBLEV,DOUBLEV,STRING)

void f_rdblur(const float* energy, int nFlux, const float* params,
        int spectrumNumber, float* flux, float* fluxError)
{
   const size_t nPar = 4;
   fcppModelWrapper(energy, nFlux, params, spectrumNumber, flux, fluxError,
        nPar, rdblur);
}

void C_rdblur(const double* energy, int nFlux, const double* params,
        int spectrumNumber, double* flux, double* fluxError, const char* initStr)
{
   const size_t nPar = 4;
   cppModelWrapper(energy, nFlux, params, spectrumNumber, flux, fluxError,
        initStr, nPar, rdblur);
}

void CXX_rdblur(const RealArray& energyArray, const RealArray& params,
        int spectrumNumber, RealArray& fluxArray, RealArray& fluxErrArray, const string& initString)
{
   rdblur(energyArray, params, spectrumNumber, fluxArray, fluxErrArray, initString);
}

void f_reflct(const float* energy, int nFlux, const float* params,
	     int spectrumNumber, float* flux, float* fluxError);

FCALLSCSUB6(f_reflct,REFLCT,reflct,FLOATV,INT,FLOATV,INT,FLOATV,FLOATV)
FCALLSCSUB7(C_reflct,DREFLCT,dreflct,DOUBLEV,INT,DOUBLEV,INT,DOUBLEV,DOUBLEV,STRING)

void f_reflct(const float* energy, int nFlux, const float* params,
        int spectrumNumber, float* flux, float* fluxError)
{
   const size_t nPar = 5;
   fcppModelWrapper(energy, nFlux, params, spectrumNumber, flux, fluxError,
        nPar, reflct);
}

void C_reflct(const double* energy, int nFlux, const double* params,
        int spectrumNumber, double* flux, double* fluxError, const char* initStr)
{
   const size_t nPar = 5;
   cppModelWrapper(energy, nFlux, params, spectrumNumber, flux, fluxError,
        initStr, nPar, reflct);
}

void f_reflect(const float* energy, int nFlux, const float* params,
	     int spectrumNumber, float* flux, float* fluxError);

FCALLSCSUB6(f_reflect,REFLECT,reflect,FLOATV,INT,FLOATV,INT,FLOATV,FLOATV)
FCALLSCSUB7(C_reflect,DREFLECT,dreflect,DOUBLEV,INT,DOUBLEV,INT,DOUBLEV,DOUBLEV,STRING)

void f_reflect(const float* energy, int nFlux, const float* params,
        int spectrumNumber, float* flux, float* fluxError)
{
   const size_t nPar = 5;
   fcppModelWrapper(energy, nFlux, params, spectrumNumber, flux, fluxError,
        nPar, reflct);
}

void C_reflect(const double* energy, int nFlux, const double* params,
        int spectrumNumber, double* flux, double* fluxError, const char* initStr)
{
   const size_t nPar = 5;
   cppModelWrapper(energy, nFlux, params, spectrumNumber, flux, fluxError,
        initStr, nPar, reflct);
}

void CXX_reflect(const RealArray& energyArray, const RealArray& params,
        int spectrumNumber, RealArray& fluxArray, RealArray& fluxErrArray, const string& initString)
{
   reflct(energyArray, params, spectrumNumber, fluxArray, fluxErrArray, initString);
}

void f_rfxconv(const float* energy, int nFlux, const float* params,
	     int spectrumNumber, float* flux, float* fluxError);

FCALLSCSUB6(f_rfxconv,RFXCONV,rfxconv,FLOATV,INT,FLOATV,INT,FLOATV,FLOATV)
FCALLSCSUB7(C_rfxconv,DRFXCONV,drfxconv,DOUBLEV,INT,DOUBLEV,INT,DOUBLEV,DOUBLEV,STRING)

void f_rfxconv(const float* energy, int nFlux, const float* params,
        int spectrumNumber, float* flux, float* fluxError)
{
   const size_t nPar = 5;
   fcppModelWrapper(energy, nFlux, params, spectrumNumber, flux, fluxError,
        nPar, rfxconv);
}

void C_rfxconv(const double* energy, int nFlux, const double* params,
        int spectrumNumber, double* flux, double* fluxError, const char* initStr)
{
   const size_t nPar = 5;
   cppModelWrapper(energy, nFlux, params, spectrumNumber, flux, fluxError,
        initStr, nPar, rfxconv);
}

void CXX_rfxconv(const RealArray& energyArray, const RealArray& params,
        int spectrumNumber, RealArray& fluxArray, RealArray& fluxErrArray, const string& initString)
{
   rfxconv(energyArray, params, spectrumNumber, fluxArray, fluxErrArray, initString);
}

void C_rgsxsrc(const double* energy, int nFlux, const double* params,
        int spectrumNumber, double* flux, double* fluxError, const char* initStr)
{
   const size_t nPar = 1;
   fModelWrapper(energy, nFlux, params, nPar, spectrumNumber, flux, fluxError,
        rgsxsrc_);
}

void CXX_rgsxsrc(const RealArray& energyArray, const RealArray& params,
        int spectrumNumber, RealArray& fluxArray, RealArray& fluxErrArray, const string& initString)
{
   XSModelFunction* funcObj = new XSCall<xsf77Call>(rgsxsrc_);
   (*funcObj)(energyArray, params, spectrumNumber, fluxArray, fluxErrArray, initString);
   delete funcObj;
}

void f_simpl(const float* energy, int nFlux, const float* params,
	     int spectrumNumber, float* flux, float* fluxError);

FCALLSCSUB6(f_simpl,SIMPL,simpl,FLOATV,INT,FLOATV,INT,FLOATV,FLOATV)
FCALLSCSUB7(C_simpl,DSIMPL,dsimpl,DOUBLEV,INT,DOUBLEV,INT,DOUBLEV,DOUBLEV,STRING)

void f_simpl(const float* energy, int nFlux, const float* params,
        int spectrumNumber, float* flux, float* fluxError)
{
   const size_t nPar = 3;
   fcppModelWrapper(energy, nFlux, params, spectrumNumber, flux, fluxError,
        nPar, simpl);
}

void C_simpl(const double* energy, int nFlux, const double* params,
        int spectrumNumber, double* flux, double* fluxError, const char* initStr)
{
   const size_t nPar = 3;
   cppModelWrapper(energy, nFlux, params, spectrumNumber, flux, fluxError,
        initStr, nPar, simpl);
}

void CXX_simpl(const RealArray& energyArray, const RealArray& params,
        int spectrumNumber, RealArray& fluxArray, RealArray& fluxErrArray, const string& initString)
{
   simpl(energyArray, params, spectrumNumber, fluxArray, fluxErrArray, initString);
}

void f_thcomp(const float* energy, int nFlux, const float* params,
	     int spectrumNumber, float* flux, float* fluxError);

FCALLSCSUB6(f_thcomp,THCOMP,thcomp,FLOATV,INT,FLOATV,INT,FLOATV,FLOATV)
FCALLSCSUB7(C_thcomp,DTHCOMP,dthcomp,DOUBLEV,INT,DOUBLEV,INT,DOUBLEV,DOUBLEV,STRING)

void f_thcomp(const float* energy, int nFlux, const float* params,
        int spectrumNumber, float* flux, float* fluxError)
{
   thcompf_(energy, nFlux, params, spectrumNumber, flux, fluxError);
}

void C_thcomp(const double* energy, int nFlux, const double* params,
        int spectrumNumber, double* flux, double* fluxError, const char* initStr)
{
   const size_t nPar = 4;
   fModelWrapper(energy, nFlux, params, nPar, spectrumNumber, flux, fluxError,
        thcompf_);
}

void CXX_thcomp(const RealArray& energyArray, const RealArray& params,
        int spectrumNumber, RealArray& fluxArray, RealArray& fluxErrArray, const string& initString)
{
   XSModelFunction* funcObj = new XSCall<xsf77Call>(thcompf_);
   (*funcObj)(energyArray, params, spectrumNumber, fluxArray, fluxErrArray, initString);
   delete funcObj;
}

void f_vashift(const float* energy, int nFlux, const float* params,
	     int spectrumNumber, float* flux, float* fluxError);

FCALLSCSUB6(f_vashift,VASHIFT,vashift,FLOATV,INT,FLOATV,INT,FLOATV,FLOATV)
FCALLSCSUB7(C_vashift,DVASHIFT,dvashift,DOUBLEV,INT,DOUBLEV,INT,DOUBLEV,DOUBLEV,STRING)

void f_vashift(const float* energy, int nFlux, const float* params,
        int spectrumNumber, float* flux, float* fluxError)
{
   const size_t nPar = 1;
   fcppModelWrapper(energy, nFlux, params, spectrumNumber, flux, fluxError,
        nPar, vashift);
}

void C_vashift(const double* energy, int nFlux, const double* params,
        int spectrumNumber, double* flux, double* fluxError, const char* initStr)
{
   const size_t nPar = 1;
   cppModelWrapper(energy, nFlux, params, spectrumNumber, flux, fluxError,
        initStr, nPar, vashift);
}

void CXX_vashift(const RealArray& energyArray, const RealArray& params,
        int spectrumNumber, RealArray& fluxArray, RealArray& fluxErrArray, const string& initString)
{
   vashift(energyArray, params, spectrumNumber, fluxArray, fluxErrArray, initString);
}

void f_vmshift(const float* energy, int nFlux, const float* params,
	     int spectrumNumber, float* flux, float* fluxError);

FCALLSCSUB6(f_vmshift,VMSHIFT,vmshift,FLOATV,INT,FLOATV,INT,FLOATV,FLOATV)
FCALLSCSUB7(C_vmshift,DVMSHIFT,dvmshift,DOUBLEV,INT,DOUBLEV,INT,DOUBLEV,DOUBLEV,STRING)

void f_vmshift(const float* energy, int nFlux, const float* params,
        int spectrumNumber, float* flux, float* fluxError)
{
   const size_t nPar = 1;
   fcppModelWrapper(energy, nFlux, params, spectrumNumber, flux, fluxError,
        nPar, vmshift);
}

void C_vmshift(const double* energy, int nFlux, const double* params,
        int spectrumNumber, double* flux, double* fluxError, const char* initStr)
{
   const size_t nPar = 1;
   cppModelWrapper(energy, nFlux, params, spectrumNumber, flux, fluxError,
        initStr, nPar, vmshift);
}

void CXX_vmshift(const RealArray& energyArray, const RealArray& params,
        int spectrumNumber, RealArray& fluxArray, RealArray& fluxErrArray, const string& initString)
{
   vmshift(energyArray, params, spectrumNumber, fluxArray, fluxErrArray, initString);
}

void f_xilconv(const float* energy, int nFlux, const float* params,
	     int spectrumNumber, float* flux, float* fluxError);

FCALLSCSUB6(f_xilconv,XILCONV,xilconv,FLOATV,INT,FLOATV,INT,FLOATV,FLOATV)
FCALLSCSUB7(C_xilconv,DXILCONV,dxilconv,DOUBLEV,INT,DOUBLEV,INT,DOUBLEV,DOUBLEV,STRING)

void f_xilconv(const float* energy, int nFlux, const float* params,
        int spectrumNumber, float* flux, float* fluxError)
{
   const size_t nPar = 6;
   fcppModelWrapper(energy, nFlux, params, spectrumNumber, flux, fluxError,
        nPar, xilconv);
}

void C_xilconv(const double* energy, int nFlux, const double* params,
        int spectrumNumber, double* flux, double* fluxError, const char* initStr)
{
   const size_t nPar = 6;
   cppModelWrapper(energy, nFlux, params, spectrumNumber, flux, fluxError,
        initStr, nPar, xilconv);
}

void CXX_xilconv(const RealArray& energyArray, const RealArray& params,
        int spectrumNumber, RealArray& fluxArray, RealArray& fluxErrArray, const string& initString)
{
   xilconv(energyArray, params, spectrumNumber, fluxArray, fluxErrArray, initString);
}

void f_zashift(const float* energy, int nFlux, const float* params,
	     int spectrumNumber, float* flux, float* fluxError);

FCALLSCSUB6(f_zashift,ZASHIFT,zashift,FLOATV,INT,FLOATV,INT,FLOATV,FLOATV)
FCALLSCSUB7(C_zashift,DZASHIFT,dzashift,DOUBLEV,INT,DOUBLEV,INT,DOUBLEV,DOUBLEV,STRING)

void f_zashift(const float* energy, int nFlux, const float* params,
        int spectrumNumber, float* flux, float* fluxError)
{
   const size_t nPar = 1;
   fcppModelWrapper(energy, nFlux, params, spectrumNumber, flux, fluxError,
        nPar, zashift);
}

void C_zashift(const double* energy, int nFlux, const double* params,
        int spectrumNumber, double* flux, double* fluxError, const char* initStr)
{
   const size_t nPar = 1;
   cppModelWrapper(energy, nFlux, params, spectrumNumber, flux, fluxError,
        initStr, nPar, zashift);
}

void CXX_zashift(const RealArray& energyArray, const RealArray& params,
        int spectrumNumber, RealArray& fluxArray, RealArray& fluxErrArray, const string& initString)
{
   zashift(energyArray, params, spectrumNumber, fluxArray, fluxErrArray, initString);
}

void f_zmshift(const float* energy, int nFlux, const float* params,
	     int spectrumNumber, float* flux, float* fluxError);

FCALLSCSUB6(f_zmshift,ZMSHIFT,zmshift,FLOATV,INT,FLOATV,INT,FLOATV,FLOATV)
FCALLSCSUB7(C_zmshift,DZMSHIFT,dzmshift,DOUBLEV,INT,DOUBLEV,INT,DOUBLEV,DOUBLEV,STRING)

void f_zmshift(const float* energy, int nFlux, const float* params,
        int spectrumNumber, float* flux, float* fluxError)
{
   const size_t nPar = 1;
   fcppModelWrapper(energy, nFlux, params, spectrumNumber, flux, fluxError,
        nPar, zmshift);
}

void C_zmshift(const double* energy, int nFlux, const double* params,
        int spectrumNumber, double* flux, double* fluxError, const char* initStr)
{
   const size_t nPar = 1;
   cppModelWrapper(energy, nFlux, params, spectrumNumber, flux, fluxError,
        initStr, nPar, zmshift);
}

void CXX_zmshift(const RealArray& energyArray, const RealArray& params,
        int spectrumNumber, RealArray& fluxArray, RealArray& fluxErrArray, const string& initString)
{
   zmshift(energyArray, params, spectrumNumber, fluxArray, fluxErrArray, initString);
}

void f_pileup(const float* energy, int nFlux, const float* params,
	     int spectrumNumber, float* flux, float* fluxError);

FCALLSCSUB6(f_pileup,PILEUP,pileup,FLOATV,INT,FLOATV,INT,FLOATV,FLOATV)
FCALLSCSUB7(C_pileup,DPILEUP,dpileup,DOUBLEV,INT,DOUBLEV,INT,DOUBLEV,DOUBLEV,STRING)

void f_pileup(const float* energy, int nFlux, const float* params,
        int spectrumNumber, float* flux, float* fluxError)
{
   const size_t nPar = 7;
   fcppModelWrapper(energy, nFlux, params, spectrumNumber, flux, fluxError,
        nPar, pileup);
}

void C_pileup(const double* energy, int nFlux, const double* params,
        int spectrumNumber, double* flux, double* fluxError, const char* initStr)
{
   const size_t nPar = 7;
   cppModelWrapper(energy, nFlux, params, spectrumNumber, flux, fluxError,
        initStr, nPar, pileup);
}

void CXX_pileup(const RealArray& energyArray, const RealArray& params,
        int spectrumNumber, RealArray& fluxArray, RealArray& fluxErrArray, const string& initString)
{
   pileup(energyArray, params, spectrumNumber, fluxArray, fluxErrArray, initString);
}

void f_bwcycl(const float* energy, int nFlux, const float* params,
	     int spectrumNumber, float* flux, float* fluxError);

FCALLSCSUB6(f_bwcycl,BWCYCL,bwcycl,FLOATV,INT,FLOATV,INT,FLOATV,FLOATV)
FCALLSCSUB7(C_bwcycl,DBWCYCL,dbwcycl,DOUBLEV,INT,DOUBLEV,INT,DOUBLEV,DOUBLEV,STRING)

void f_bwcycl(const float* energy, int nFlux, const float* params,
        int spectrumNumber, float* flux, float* fluxError)
{
   const size_t nPar = 12;
   cModelWrapper(energy, nFlux, params, spectrumNumber, flux, fluxError,
        nPar, beckerwolff);
}

void C_bwcycl(const double* energy, int nFlux, const double* params,
        int spectrumNumber, double* flux, double* fluxError, const char* initStr)
{
   beckerwolff(energy, nFlux, params, spectrumNumber, flux, fluxError, initStr);
}

void CXX_bwcycl(const RealArray& energyArray, const RealArray& params,
        int spectrumNumber, RealArray& fluxArray, RealArray& fluxErrArray, const string& initString)
{
   XSModelFunction* funcObj = new XSCall<xsccCall>(beckerwolff);
   (*funcObj)(energyArray, params, spectrumNumber, fluxArray, fluxErrArray, initString);
   delete funcObj;
}

